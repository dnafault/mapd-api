// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package mapd

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type TDatumType int64
const (
  TDatumType_SMALLINT TDatumType = 0
  TDatumType_INT TDatumType = 1
  TDatumType_BIGINT TDatumType = 2
  TDatumType_FLOAT TDatumType = 3
  TDatumType_DECIMAL TDatumType = 4
  TDatumType_DOUBLE TDatumType = 5
  TDatumType_STR TDatumType = 6
  TDatumType_TIME TDatumType = 7
  TDatumType_TIMESTAMP TDatumType = 8
  TDatumType_DATE TDatumType = 9
  TDatumType_BOOL TDatumType = 10
  TDatumType_INTERVAL_DAY_TIME TDatumType = 11
  TDatumType_INTERVAL_YEAR_MONTH TDatumType = 12
)

func (p TDatumType) String() string {
  switch p {
  case TDatumType_SMALLINT: return "SMALLINT"
  case TDatumType_INT: return "INT"
  case TDatumType_BIGINT: return "BIGINT"
  case TDatumType_FLOAT: return "FLOAT"
  case TDatumType_DECIMAL: return "DECIMAL"
  case TDatumType_DOUBLE: return "DOUBLE"
  case TDatumType_STR: return "STR"
  case TDatumType_TIME: return "TIME"
  case TDatumType_TIMESTAMP: return "TIMESTAMP"
  case TDatumType_DATE: return "DATE"
  case TDatumType_BOOL: return "BOOL"
  case TDatumType_INTERVAL_DAY_TIME: return "INTERVAL_DAY_TIME"
  case TDatumType_INTERVAL_YEAR_MONTH: return "INTERVAL_YEAR_MONTH"
  }
  return "<UNSET>"
}

func TDatumTypeFromString(s string) (TDatumType, error) {
  switch s {
  case "SMALLINT": return TDatumType_SMALLINT, nil 
  case "INT": return TDatumType_INT, nil 
  case "BIGINT": return TDatumType_BIGINT, nil 
  case "FLOAT": return TDatumType_FLOAT, nil 
  case "DECIMAL": return TDatumType_DECIMAL, nil 
  case "DOUBLE": return TDatumType_DOUBLE, nil 
  case "STR": return TDatumType_STR, nil 
  case "TIME": return TDatumType_TIME, nil 
  case "TIMESTAMP": return TDatumType_TIMESTAMP, nil 
  case "DATE": return TDatumType_DATE, nil 
  case "BOOL": return TDatumType_BOOL, nil 
  case "INTERVAL_DAY_TIME": return TDatumType_INTERVAL_DAY_TIME, nil 
  case "INTERVAL_YEAR_MONTH": return TDatumType_INTERVAL_YEAR_MONTH, nil 
  }
  return TDatumType(0), fmt.Errorf("not a valid TDatumType string")
}


func TDatumTypePtr(v TDatumType) *TDatumType { return &v }

func (p TDatumType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TDatumType) UnmarshalText(text []byte) error {
q, err := TDatumTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TDatumType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TDatumType(v)
return nil
}

func (p * TDatumType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TEncodingType int64
const (
  TEncodingType_NONE TEncodingType = 0
  TEncodingType_FIXED TEncodingType = 1
  TEncodingType_RL TEncodingType = 2
  TEncodingType_DIFF TEncodingType = 3
  TEncodingType_DICT TEncodingType = 4
  TEncodingType_SPARSE TEncodingType = 5
)

func (p TEncodingType) String() string {
  switch p {
  case TEncodingType_NONE: return "NONE"
  case TEncodingType_FIXED: return "FIXED"
  case TEncodingType_RL: return "RL"
  case TEncodingType_DIFF: return "DIFF"
  case TEncodingType_DICT: return "DICT"
  case TEncodingType_SPARSE: return "SPARSE"
  }
  return "<UNSET>"
}

func TEncodingTypeFromString(s string) (TEncodingType, error) {
  switch s {
  case "NONE": return TEncodingType_NONE, nil 
  case "FIXED": return TEncodingType_FIXED, nil 
  case "RL": return TEncodingType_RL, nil 
  case "DIFF": return TEncodingType_DIFF, nil 
  case "DICT": return TEncodingType_DICT, nil 
  case "SPARSE": return TEncodingType_SPARSE, nil 
  }
  return TEncodingType(0), fmt.Errorf("not a valid TEncodingType string")
}


func TEncodingTypePtr(v TEncodingType) *TEncodingType { return &v }

func (p TEncodingType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TEncodingType) UnmarshalText(text []byte) error {
q, err := TEncodingTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TEncodingType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TEncodingType(v)
return nil
}

func (p * TEncodingType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TExecuteMode int64
const (
  TExecuteMode_HYBRID TExecuteMode = 0
  TExecuteMode_GPU TExecuteMode = 1
  TExecuteMode_CPU TExecuteMode = 2
)

func (p TExecuteMode) String() string {
  switch p {
  case TExecuteMode_HYBRID: return "HYBRID"
  case TExecuteMode_GPU: return "GPU"
  case TExecuteMode_CPU: return "CPU"
  }
  return "<UNSET>"
}

func TExecuteModeFromString(s string) (TExecuteMode, error) {
  switch s {
  case "HYBRID": return TExecuteMode_HYBRID, nil 
  case "GPU": return TExecuteMode_GPU, nil 
  case "CPU": return TExecuteMode_CPU, nil 
  }
  return TExecuteMode(0), fmt.Errorf("not a valid TExecuteMode string")
}


func TExecuteModePtr(v TExecuteMode) *TExecuteMode { return &v }

func (p TExecuteMode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TExecuteMode) UnmarshalText(text []byte) error {
q, err := TExecuteModeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TExecuteMode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TExecuteMode(v)
return nil
}

func (p * TExecuteMode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TTableType int64
const (
  TTableType_DELIMITED TTableType = 0
  TTableType_POLYGON TTableType = 1
)

func (p TTableType) String() string {
  switch p {
  case TTableType_DELIMITED: return "DELIMITED"
  case TTableType_POLYGON: return "POLYGON"
  }
  return "<UNSET>"
}

func TTableTypeFromString(s string) (TTableType, error) {
  switch s {
  case "DELIMITED": return TTableType_DELIMITED, nil 
  case "POLYGON": return TTableType_POLYGON, nil 
  }
  return TTableType(0), fmt.Errorf("not a valid TTableType string")
}


func TTableTypePtr(v TTableType) *TTableType { return &v }

func (p TTableType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TTableType) UnmarshalText(text []byte) error {
q, err := TTableTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TTableType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TTableType(v)
return nil
}

func (p * TTableType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TMergeType int64
const (
  TMergeType_UNION TMergeType = 0
  TMergeType_REDUCE TMergeType = 1
)

func (p TMergeType) String() string {
  switch p {
  case TMergeType_UNION: return "UNION"
  case TMergeType_REDUCE: return "REDUCE"
  }
  return "<UNSET>"
}

func TMergeTypeFromString(s string) (TMergeType, error) {
  switch s {
  case "UNION": return TMergeType_UNION, nil 
  case "REDUCE": return TMergeType_REDUCE, nil 
  }
  return TMergeType(0), fmt.Errorf("not a valid TMergeType string")
}


func TMergeTypePtr(v TMergeType) *TMergeType { return &v }

func (p TMergeType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TMergeType) UnmarshalText(text []byte) error {
q, err := TMergeTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TMergeType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TMergeType(v)
return nil
}

func (p * TMergeType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TExpressionRangeType int64
const (
  TExpressionRangeType_INVALID TExpressionRangeType = 0
  TExpressionRangeType_INTEGER TExpressionRangeType = 1
  TExpressionRangeType_FLOAT TExpressionRangeType = 2
  TExpressionRangeType_DOUBLE TExpressionRangeType = 3
)

func (p TExpressionRangeType) String() string {
  switch p {
  case TExpressionRangeType_INVALID: return "INVALID"
  case TExpressionRangeType_INTEGER: return "INTEGER"
  case TExpressionRangeType_FLOAT: return "FLOAT"
  case TExpressionRangeType_DOUBLE: return "DOUBLE"
  }
  return "<UNSET>"
}

func TExpressionRangeTypeFromString(s string) (TExpressionRangeType, error) {
  switch s {
  case "INVALID": return TExpressionRangeType_INVALID, nil 
  case "INTEGER": return TExpressionRangeType_INTEGER, nil 
  case "FLOAT": return TExpressionRangeType_FLOAT, nil 
  case "DOUBLE": return TExpressionRangeType_DOUBLE, nil 
  }
  return TExpressionRangeType(0), fmt.Errorf("not a valid TExpressionRangeType string")
}


func TExpressionRangeTypePtr(v TExpressionRangeType) *TExpressionRangeType { return &v }

func (p TExpressionRangeType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TExpressionRangeType) UnmarshalText(text []byte) error {
q, err := TExpressionRangeTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TExpressionRangeType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TExpressionRangeType(v)
return nil
}

func (p * TExpressionRangeType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TRowDescriptor []*TColumnType

func TRowDescriptorPtr(v TRowDescriptor) *TRowDescriptor { return &v }

type TTableDescriptor map[string]*TColumnType

func TTableDescriptorPtr(v TTableDescriptor) *TTableDescriptor { return &v }

type TSessionId string

func TSessionIdPtr(v TSessionId) *TSessionId { return &v }

type TQueryId int64

func TQueryIdPtr(v TQueryId) *TQueryId { return &v }

type TRenderPropertyMap map[string]*TRenderProperty

func TRenderPropertyMapPtr(v TRenderPropertyMap) *TRenderPropertyMap { return &v }

type TColumnRenderMap map[string]TRenderPropertyMap

func TColumnRenderMapPtr(v TColumnRenderMap) *TColumnRenderMap { return &v }

type TRenderPassMap map[int32]*TRawRenderPassDataResult_

func TRenderPassMapPtr(v TRenderPassMap) *TRenderPassMap { return &v }

// Attributes:
//  - IntVal
//  - RealVal
//  - StrVal
//  - ArrVal
type TDatumVal struct {
  IntVal int64 `thrift:"int_val,1" db:"int_val" json:"int_val"`
  RealVal float64 `thrift:"real_val,2" db:"real_val" json:"real_val"`
  StrVal string `thrift:"str_val,3" db:"str_val" json:"str_val"`
  ArrVal []*TDatum `thrift:"arr_val,4" db:"arr_val" json:"arr_val"`
}

func NewTDatumVal() *TDatumVal {
  return &TDatumVal{}
}


func (p *TDatumVal) GetIntVal() int64 {
  return p.IntVal
}

func (p *TDatumVal) GetRealVal() float64 {
  return p.RealVal
}

func (p *TDatumVal) GetStrVal() string {
  return p.StrVal
}

func (p *TDatumVal) GetArrVal() []*TDatum {
  return p.ArrVal
}
func (p *TDatumVal) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDatumVal)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IntVal = v
}
  return nil
}

func (p *TDatumVal)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RealVal = v
}
  return nil
}

func (p *TDatumVal)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StrVal = v
}
  return nil
}

func (p *TDatumVal)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDatum, 0, size)
  p.ArrVal =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &TDatum{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.ArrVal = append(p.ArrVal, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDatumVal) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDatumVal"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDatumVal) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("int_val", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:int_val: ", p), err) }
  if err := oprot.WriteI64(int64(p.IntVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.int_val (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:int_val: ", p), err) }
  return err
}

func (p *TDatumVal) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("real_val", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:real_val: ", p), err) }
  if err := oprot.WriteDouble(float64(p.RealVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.real_val (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:real_val: ", p), err) }
  return err
}

func (p *TDatumVal) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("str_val", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:str_val: ", p), err) }
  if err := oprot.WriteString(string(p.StrVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.str_val (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:str_val: ", p), err) }
  return err
}

func (p *TDatumVal) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("arr_val", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:arr_val: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ArrVal)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ArrVal {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:arr_val: ", p), err) }
  return err
}

func (p *TDatumVal) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDatumVal(%+v)", *p)
}

// Attributes:
//  - Val
//  - IsNull
type TDatum struct {
  Val *TDatumVal `thrift:"val,1" db:"val" json:"val"`
  IsNull bool `thrift:"is_null,2" db:"is_null" json:"is_null"`
}

func NewTDatum() *TDatum {
  return &TDatum{}
}

var TDatum_Val_DEFAULT *TDatumVal
func (p *TDatum) GetVal() *TDatumVal {
  if !p.IsSetVal() {
    return TDatum_Val_DEFAULT
  }
return p.Val
}

func (p *TDatum) GetIsNull() bool {
  return p.IsNull
}
func (p *TDatum) IsSetVal() bool {
  return p.Val != nil
}

func (p *TDatum) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDatum)  ReadField1(iprot thrift.TProtocol) error {
  p.Val = &TDatumVal{}
  if err := p.Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Val), err)
  }
  return nil
}

func (p *TDatum)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IsNull = v
}
  return nil
}

func (p *TDatum) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDatum"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDatum) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("val", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:val: ", p), err) }
  if err := p.Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:val: ", p), err) }
  return err
}

func (p *TDatum) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_null", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:is_null: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsNull)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_null (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:is_null: ", p), err) }
  return err
}

func (p *TDatum) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDatum(%+v)", *p)
}

// Attributes:
//  - StrVal
//  - IsNull
type TStringValue struct {
  StrVal string `thrift:"str_val,1" db:"str_val" json:"str_val"`
  IsNull bool `thrift:"is_null,2" db:"is_null" json:"is_null"`
}

func NewTStringValue() *TStringValue {
  return &TStringValue{}
}


func (p *TStringValue) GetStrVal() string {
  return p.StrVal
}

func (p *TStringValue) GetIsNull() bool {
  return p.IsNull
}
func (p *TStringValue) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringValue)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StrVal = v
}
  return nil
}

func (p *TStringValue)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IsNull = v
}
  return nil
}

func (p *TStringValue) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TStringValue"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringValue) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("str_val", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:str_val: ", p), err) }
  if err := oprot.WriteString(string(p.StrVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.str_val (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:str_val: ", p), err) }
  return err
}

func (p *TStringValue) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_null", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:is_null: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsNull)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_null (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:is_null: ", p), err) }
  return err
}

func (p *TStringValue) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringValue(%+v)", *p)
}

// Attributes:
//  - Type
//  - Encoding
//  - Nullable
//  - IsArray
//  - Precision
//  - Scale
//  - CompParam
type TTypeInfo struct {
  Type TDatumType `thrift:"type,1" db:"type" json:"type"`
  Nullable bool `thrift:"nullable,2" db:"nullable" json:"nullable"`
  IsArray bool `thrift:"is_array,3" db:"is_array" json:"is_array"`
  Encoding TEncodingType `thrift:"encoding,4" db:"encoding" json:"encoding"`
  Precision int32 `thrift:"precision,5" db:"precision" json:"precision"`
  Scale int32 `thrift:"scale,6" db:"scale" json:"scale"`
  CompParam int32 `thrift:"comp_param,7" db:"comp_param" json:"comp_param"`
}

func NewTTypeInfo() *TTypeInfo {
  return &TTypeInfo{}
}


func (p *TTypeInfo) GetType() TDatumType {
  return p.Type
}

func (p *TTypeInfo) GetEncoding() TEncodingType {
  return p.Encoding
}

func (p *TTypeInfo) GetNullable() bool {
  return p.Nullable
}

func (p *TTypeInfo) GetIsArray() bool {
  return p.IsArray
}

func (p *TTypeInfo) GetPrecision() int32 {
  return p.Precision
}

func (p *TTypeInfo) GetScale() int32 {
  return p.Scale
}

func (p *TTypeInfo) GetCompParam() int32 {
  return p.CompParam
}
func (p *TTypeInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTypeInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TDatumType(v)
  p.Type = temp
}
  return nil
}

func (p *TTypeInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TEncodingType(v)
  p.Encoding = temp
}
  return nil
}

func (p *TTypeInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Nullable = v
}
  return nil
}

func (p *TTypeInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IsArray = v
}
  return nil
}

func (p *TTypeInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Precision = v
}
  return nil
}

func (p *TTypeInfo)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Scale = v
}
  return nil
}

func (p *TTypeInfo)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.CompParam = v
}
  return nil
}

func (p *TTypeInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTypeInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTypeInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *TTypeInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nullable", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nullable: ", p), err) }
  if err := oprot.WriteBool(bool(p.Nullable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nullable (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nullable: ", p), err) }
  return err
}

func (p *TTypeInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_array", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:is_array: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsArray)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_array (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:is_array: ", p), err) }
  return err
}

func (p *TTypeInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("encoding", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:encoding: ", p), err) }
  if err := oprot.WriteI32(int32(p.Encoding)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encoding (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:encoding: ", p), err) }
  return err
}

func (p *TTypeInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("precision", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:precision: ", p), err) }
  if err := oprot.WriteI32(int32(p.Precision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.precision (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:precision: ", p), err) }
  return err
}

func (p *TTypeInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scale", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:scale: ", p), err) }
  if err := oprot.WriteI32(int32(p.Scale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scale (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:scale: ", p), err) }
  return err
}

func (p *TTypeInfo) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("comp_param", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:comp_param: ", p), err) }
  if err := oprot.WriteI32(int32(p.CompParam)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.comp_param (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:comp_param: ", p), err) }
  return err
}

func (p *TTypeInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTypeInfo(%+v)", *p)
}

// Attributes:
//  - ColName
//  - ColType
//  - IsReservedKeyword
//  - SrcName
type TColumnType struct {
  ColName string `thrift:"col_name,1" db:"col_name" json:"col_name"`
  ColType *TTypeInfo `thrift:"col_type,2" db:"col_type" json:"col_type"`
  IsReservedKeyword bool `thrift:"is_reserved_keyword,3" db:"is_reserved_keyword" json:"is_reserved_keyword"`
  SrcName string `thrift:"src_name,4" db:"src_name" json:"src_name"`
}

func NewTColumnType() *TColumnType {
  return &TColumnType{}
}


func (p *TColumnType) GetColName() string {
  return p.ColName
}
var TColumnType_ColType_DEFAULT *TTypeInfo
func (p *TColumnType) GetColType() *TTypeInfo {
  if !p.IsSetColType() {
    return TColumnType_ColType_DEFAULT
  }
return p.ColType
}

func (p *TColumnType) GetIsReservedKeyword() bool {
  return p.IsReservedKeyword
}

func (p *TColumnType) GetSrcName() string {
  return p.SrcName
}
func (p *TColumnType) IsSetColType() bool {
  return p.ColType != nil
}

func (p *TColumnType) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TColumnType)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ColName = v
}
  return nil
}

func (p *TColumnType)  ReadField2(iprot thrift.TProtocol) error {
  p.ColType = &TTypeInfo{}
  if err := p.ColType.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ColType), err)
  }
  return nil
}

func (p *TColumnType)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IsReservedKeyword = v
}
  return nil
}

func (p *TColumnType)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SrcName = v
}
  return nil
}

func (p *TColumnType) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TColumnType"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TColumnType) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("col_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:col_name: ", p), err) }
  if err := oprot.WriteString(string(p.ColName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.col_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:col_name: ", p), err) }
  return err
}

func (p *TColumnType) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("col_type", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:col_type: ", p), err) }
  if err := p.ColType.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ColType), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:col_type: ", p), err) }
  return err
}

func (p *TColumnType) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_reserved_keyword", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:is_reserved_keyword: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsReservedKeyword)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_reserved_keyword (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:is_reserved_keyword: ", p), err) }
  return err
}

func (p *TColumnType) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("src_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:src_name: ", p), err) }
  if err := oprot.WriteString(string(p.SrcName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.src_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:src_name: ", p), err) }
  return err
}

func (p *TColumnType) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TColumnType(%+v)", *p)
}

// Attributes:
//  - Cols
type TRow struct {
  Cols []*TDatum `thrift:"cols,1" db:"cols" json:"cols"`
}

func NewTRow() *TRow {
  return &TRow{}
}


func (p *TRow) GetCols() []*TDatum {
  return p.Cols
}
func (p *TRow) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TRow)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDatum, 0, size)
  p.Cols =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &TDatum{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Cols = append(p.Cols, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TRow) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRow"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRow) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cols", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cols: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Cols)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Cols {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cols: ", p), err) }
  return err
}

func (p *TRow) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRow(%+v)", *p)
}

// Attributes:
//  - IntCol
//  - RealCol
//  - StrCol
//  - ArrCol
type TColumnData struct {
  IntCol []int64 `thrift:"int_col,1" db:"int_col" json:"int_col"`
  RealCol []float64 `thrift:"real_col,2" db:"real_col" json:"real_col"`
  StrCol []string `thrift:"str_col,3" db:"str_col" json:"str_col"`
  ArrCol []*TColumn `thrift:"arr_col,4" db:"arr_col" json:"arr_col"`
}

func NewTColumnData() *TColumnData {
  return &TColumnData{}
}


func (p *TColumnData) GetIntCol() []int64 {
  return p.IntCol
}

func (p *TColumnData) GetRealCol() []float64 {
  return p.RealCol
}

func (p *TColumnData) GetStrCol() []string {
  return p.StrCol
}

func (p *TColumnData) GetArrCol() []*TColumn {
  return p.ArrCol
}
func (p *TColumnData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TColumnData)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.IntCol =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.IntCol = append(p.IntCol, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TColumnData)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]float64, 0, size)
  p.RealCol =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 float64
    if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.RealCol = append(p.RealCol, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TColumnData)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.StrCol =  tSlice
  for i := 0; i < size; i ++ {
var _elem4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem4 = v
}
    p.StrCol = append(p.StrCol, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TColumnData)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TColumn, 0, size)
  p.ArrCol =  tSlice
  for i := 0; i < size; i ++ {
    _elem5 := &TColumn{}
    if err := _elem5.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.ArrCol = append(p.ArrCol, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TColumnData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TColumnData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TColumnData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("int_col", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:int_col: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.IntCol)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.IntCol {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:int_col: ", p), err) }
  return err
}

func (p *TColumnData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("real_col", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:real_col: ", p), err) }
  if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.RealCol)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RealCol {
    if err := oprot.WriteDouble(float64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:real_col: ", p), err) }
  return err
}

func (p *TColumnData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("str_col", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:str_col: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.StrCol)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.StrCol {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:str_col: ", p), err) }
  return err
}

func (p *TColumnData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("arr_col", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:arr_col: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ArrCol)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ArrCol {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:arr_col: ", p), err) }
  return err
}

func (p *TColumnData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TColumnData(%+v)", *p)
}

// Attributes:
//  - Data
//  - Nulls
type TColumn struct {
  Data *TColumnData `thrift:"data,1" db:"data" json:"data"`
  Nulls []bool `thrift:"nulls,2" db:"nulls" json:"nulls"`
}

func NewTColumn() *TColumn {
  return &TColumn{}
}

var TColumn_Data_DEFAULT *TColumnData
func (p *TColumn) GetData() *TColumnData {
  if !p.IsSetData() {
    return TColumn_Data_DEFAULT
  }
return p.Data
}

func (p *TColumn) GetNulls() []bool {
  return p.Nulls
}
func (p *TColumn) IsSetData() bool {
  return p.Data != nil
}

func (p *TColumn) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TColumn)  ReadField1(iprot thrift.TProtocol) error {
  p.Data = &TColumnData{}
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *TColumn)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]bool, 0, size)
  p.Nulls =  tSlice
  for i := 0; i < size; i ++ {
var _elem6 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem6 = v
}
    p.Nulls = append(p.Nulls, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TColumn) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TColumn"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TColumn) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data: ", p), err) }
  if err := p.Data.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data: ", p), err) }
  return err
}

func (p *TColumn) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nulls", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nulls: ", p), err) }
  if err := oprot.WriteListBegin(thrift.BOOL, len(p.Nulls)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Nulls {
    if err := oprot.WriteBool(bool(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nulls: ", p), err) }
  return err
}

func (p *TColumn) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TColumn(%+v)", *p)
}

// Attributes:
//  - Cols
type TStringRow struct {
  Cols []*TStringValue `thrift:"cols,1" db:"cols" json:"cols"`
}

func NewTStringRow() *TStringRow {
  return &TStringRow{}
}


func (p *TStringRow) GetCols() []*TStringValue {
  return p.Cols
}
func (p *TStringRow) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringRow)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TStringValue, 0, size)
  p.Cols =  tSlice
  for i := 0; i < size; i ++ {
    _elem7 := &TStringValue{}
    if err := _elem7.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
    }
    p.Cols = append(p.Cols, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TStringRow) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TStringRow"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringRow) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cols", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cols: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Cols)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Cols {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cols: ", p), err) }
  return err
}

func (p *TStringRow) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringRow(%+v)", *p)
}

// Attributes:
//  - SerializedRows
//  - ExecutionFinished
//  - MergeType
//  - Sharded
//  - RowDesc
//  - NodeID
type TStepResult_ struct {
  SerializedRows string `thrift:"serialized_rows,1" db:"serialized_rows" json:"serialized_rows"`
  ExecutionFinished bool `thrift:"execution_finished,2" db:"execution_finished" json:"execution_finished"`
  MergeType TMergeType `thrift:"merge_type,3" db:"merge_type" json:"merge_type"`
  Sharded bool `thrift:"sharded,4" db:"sharded" json:"sharded"`
  RowDesc TRowDescriptor `thrift:"row_desc,5" db:"row_desc" json:"row_desc"`
  NodeID int32 `thrift:"node_id,6" db:"node_id" json:"node_id"`
}

func NewTStepResult_() *TStepResult_ {
  return &TStepResult_{}
}


func (p *TStepResult_) GetSerializedRows() string {
  return p.SerializedRows
}

func (p *TStepResult_) GetExecutionFinished() bool {
  return p.ExecutionFinished
}

func (p *TStepResult_) GetMergeType() TMergeType {
  return p.MergeType
}

func (p *TStepResult_) GetSharded() bool {
  return p.Sharded
}

func (p *TStepResult_) GetRowDesc() TRowDescriptor {
  return p.RowDesc
}

func (p *TStepResult_) GetNodeID() int32 {
  return p.NodeID
}
func (p *TStepResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStepResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SerializedRows = v
}
  return nil
}

func (p *TStepResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExecutionFinished = v
}
  return nil
}

func (p *TStepResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TMergeType(v)
  p.MergeType = temp
}
  return nil
}

func (p *TStepResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Sharded = v
}
  return nil
}

func (p *TStepResult_)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make(TRowDescriptor, 0, size)
  p.RowDesc =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &TColumnType{}
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.RowDesc = append(p.RowDesc, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TStepResult_)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NodeID = v
}
  return nil
}

func (p *TStepResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TStepResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStepResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serialized_rows", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serialized_rows: ", p), err) }
  if err := oprot.WriteString(string(p.SerializedRows)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serialized_rows (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serialized_rows: ", p), err) }
  return err
}

func (p *TStepResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("execution_finished", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:execution_finished: ", p), err) }
  if err := oprot.WriteBool(bool(p.ExecutionFinished)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.execution_finished (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:execution_finished: ", p), err) }
  return err
}

func (p *TStepResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("merge_type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:merge_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.MergeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.merge_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:merge_type: ", p), err) }
  return err
}

func (p *TStepResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sharded", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sharded: ", p), err) }
  if err := oprot.WriteBool(bool(p.Sharded)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sharded (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sharded: ", p), err) }
  return err
}

func (p *TStepResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_desc", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:row_desc: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowDesc)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RowDesc {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:row_desc: ", p), err) }
  return err
}

func (p *TStepResult_) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("node_id", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:node_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.NodeID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.node_id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:node_id: ", p), err) }
  return err
}

func (p *TStepResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStepResult_(%+v)", *p)
}

// Attributes:
//  - RowDesc
//  - Rows
//  - Columns
//  - IsColumnar
type TRowSet struct {
  RowDesc TRowDescriptor `thrift:"row_desc,1" db:"row_desc" json:"row_desc"`
  Rows []*TRow `thrift:"rows,2" db:"rows" json:"rows"`
  Columns []*TColumn `thrift:"columns,3" db:"columns" json:"columns"`
  IsColumnar bool `thrift:"is_columnar,4" db:"is_columnar" json:"is_columnar"`
}

func NewTRowSet() *TRowSet {
  return &TRowSet{}
}


func (p *TRowSet) GetRowDesc() TRowDescriptor {
  return p.RowDesc
}

func (p *TRowSet) GetRows() []*TRow {
  return p.Rows
}

func (p *TRowSet) GetColumns() []*TColumn {
  return p.Columns
}

func (p *TRowSet) GetIsColumnar() bool {
  return p.IsColumnar
}
func (p *TRowSet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TRowSet)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make(TRowDescriptor, 0, size)
  p.RowDesc =  tSlice
  for i := 0; i < size; i ++ {
    _elem9 := &TColumnType{}
    if err := _elem9.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.RowDesc = append(p.RowDesc, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TRowSet)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TRow, 0, size)
  p.Rows =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := &TRow{}
    if err := _elem10.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.Rows = append(p.Rows, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TRowSet)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TColumn, 0, size)
  p.Columns =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := &TColumn{}
    if err := _elem11.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.Columns = append(p.Columns, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TRowSet)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsColumnar = v
}
  return nil
}

func (p *TRowSet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRowSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRowSet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_desc", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row_desc: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowDesc)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RowDesc {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row_desc: ", p), err) }
  return err
}

func (p *TRowSet) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rows", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rows: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Rows)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Rows {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rows: ", p), err) }
  return err
}

func (p *TRowSet) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("columns", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:columns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Columns {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:columns: ", p), err) }
  return err
}

func (p *TRowSet) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_columnar", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:is_columnar: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsColumnar)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_columnar (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:is_columnar: ", p), err) }
  return err
}

func (p *TRowSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRowSet(%+v)", *p)
}

// Attributes:
//  - RowSet
//  - ExecutionTimeMs
//  - TotalTimeMs
//  - Nonce
type TQueryResult_ struct {
  RowSet *TRowSet `thrift:"row_set,1" db:"row_set" json:"row_set"`
  ExecutionTimeMs int64 `thrift:"execution_time_ms,2" db:"execution_time_ms" json:"execution_time_ms"`
  TotalTimeMs int64 `thrift:"total_time_ms,3" db:"total_time_ms" json:"total_time_ms"`
  Nonce string `thrift:"nonce,4" db:"nonce" json:"nonce"`
}

func NewTQueryResult_() *TQueryResult_ {
  return &TQueryResult_{}
}

var TQueryResult__RowSet_DEFAULT *TRowSet
func (p *TQueryResult_) GetRowSet() *TRowSet {
  if !p.IsSetRowSet() {
    return TQueryResult__RowSet_DEFAULT
  }
return p.RowSet
}

func (p *TQueryResult_) GetExecutionTimeMs() int64 {
  return p.ExecutionTimeMs
}

func (p *TQueryResult_) GetTotalTimeMs() int64 {
  return p.TotalTimeMs
}

func (p *TQueryResult_) GetNonce() string {
  return p.Nonce
}
func (p *TQueryResult_) IsSetRowSet() bool {
  return p.RowSet != nil
}

func (p *TQueryResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TQueryResult_)  ReadField1(iprot thrift.TProtocol) error {
  p.RowSet = &TRowSet{}
  if err := p.RowSet.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RowSet), err)
  }
  return nil
}

func (p *TQueryResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExecutionTimeMs = v
}
  return nil
}

func (p *TQueryResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TotalTimeMs = v
}
  return nil
}

func (p *TQueryResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *TQueryResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TQueryResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TQueryResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_set", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row_set: ", p), err) }
  if err := p.RowSet.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RowSet), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row_set: ", p), err) }
  return err
}

func (p *TQueryResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("execution_time_ms", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:execution_time_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExecutionTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.execution_time_ms (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:execution_time_ms: ", p), err) }
  return err
}

func (p *TQueryResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("total_time_ms", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total_time_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.TotalTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total_time_ms (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total_time_ms: ", p), err) }
  return err
}

func (p *TQueryResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nonce: ", p), err) }
  if err := oprot.WriteString(string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nonce: ", p), err) }
  return err
}

func (p *TQueryResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TQueryResult_(%+v)", *p)
}

// Attributes:
//  - Schema
//  - DfHandle
//  - DfSize
type TGpuDataFrame struct {
  Schema []byte `thrift:"schema,1" db:"schema" json:"schema"`
  DfHandle []byte `thrift:"df_handle,2" db:"df_handle" json:"df_handle"`
  DfSize int64 `thrift:"df_size,3" db:"df_size" json:"df_size"`
}

func NewTGpuDataFrame() *TGpuDataFrame {
  return &TGpuDataFrame{}
}


func (p *TGpuDataFrame) GetSchema() []byte {
  return p.Schema
}

func (p *TGpuDataFrame) GetDfHandle() []byte {
  return p.DfHandle
}

func (p *TGpuDataFrame) GetDfSize() int64 {
  return p.DfSize
}
func (p *TGpuDataFrame) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGpuDataFrame)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Schema = v
}
  return nil
}

func (p *TGpuDataFrame)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DfHandle = v
}
  return nil
}

func (p *TGpuDataFrame)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DfSize = v
}
  return nil
}

func (p *TGpuDataFrame) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TGpuDataFrame"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGpuDataFrame) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:schema: ", p), err) }
  if err := oprot.WriteBinary(p.Schema); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.schema (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:schema: ", p), err) }
  return err
}

func (p *TGpuDataFrame) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("df_handle", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:df_handle: ", p), err) }
  if err := oprot.WriteBinary(p.DfHandle); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.df_handle (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:df_handle: ", p), err) }
  return err
}

func (p *TGpuDataFrame) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("df_size", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:df_size: ", p), err) }
  if err := oprot.WriteI64(int64(p.DfSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.df_size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:df_size: ", p), err) }
  return err
}

func (p *TGpuDataFrame) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGpuDataFrame(%+v)", *p)
}

// Attributes:
//  - DbName
//  - DbOwner
type TDBInfo struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  DbOwner string `thrift:"db_owner,2" db:"db_owner" json:"db_owner"`
}

func NewTDBInfo() *TDBInfo {
  return &TDBInfo{}
}


func (p *TDBInfo) GetDbName() string {
  return p.DbName
}

func (p *TDBInfo) GetDbOwner() string {
  return p.DbOwner
}
func (p *TDBInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDBInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *TDBInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DbOwner = v
}
  return nil
}

func (p *TDBInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDBInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDBInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *TDBInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_owner", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:db_owner: ", p), err) }
  if err := oprot.WriteString(string(p.DbOwner)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_owner (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:db_owner: ", p), err) }
  return err
}

func (p *TDBInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDBInfo(%+v)", *p)
}

// Attributes:
//  - ErrorMsg
type TMapDException struct {
  ErrorMsg string `thrift:"error_msg,1" db:"error_msg" json:"error_msg"`
}

func NewTMapDException() *TMapDException {
  return &TMapDException{}
}


func (p *TMapDException) GetErrorMsg() string {
  return p.ErrorMsg
}
func (p *TMapDException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMapDException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ErrorMsg = v
}
  return nil
}

func (p *TMapDException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TMapDException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMapDException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_msg", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_msg: ", p), err) }
  if err := oprot.WriteString(string(p.ErrorMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_msg (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_msg: ", p), err) }
  return err
}

func (p *TMapDException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMapDException(%+v)", *p)
}

func (p *TMapDException) Error() string {
  return p.String()
}

// Attributes:
//  - PropertyType
//  - PropertyValue
type TRenderProperty struct {
  PropertyType TDatumType `thrift:"property_type,1" db:"property_type" json:"property_type"`
  PropertyValue *TDatumVal `thrift:"property_value,2" db:"property_value" json:"property_value"`
}

func NewTRenderProperty() *TRenderProperty {
  return &TRenderProperty{}
}


func (p *TRenderProperty) GetPropertyType() TDatumType {
  return p.PropertyType
}
var TRenderProperty_PropertyValue_DEFAULT *TDatumVal
func (p *TRenderProperty) GetPropertyValue() *TDatumVal {
  if !p.IsSetPropertyValue() {
    return TRenderProperty_PropertyValue_DEFAULT
  }
return p.PropertyValue
}
func (p *TRenderProperty) IsSetPropertyValue() bool {
  return p.PropertyValue != nil
}

func (p *TRenderProperty) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TRenderProperty)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TDatumType(v)
  p.PropertyType = temp
}
  return nil
}

func (p *TRenderProperty)  ReadField2(iprot thrift.TProtocol) error {
  p.PropertyValue = &TDatumVal{}
  if err := p.PropertyValue.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PropertyValue), err)
  }
  return nil
}

func (p *TRenderProperty) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRenderProperty"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRenderProperty) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("property_type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:property_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.PropertyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.property_type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:property_type: ", p), err) }
  return err
}

func (p *TRenderProperty) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("property_value", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:property_value: ", p), err) }
  if err := p.PropertyValue.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PropertyValue), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:property_value: ", p), err) }
  return err
}

func (p *TRenderProperty) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRenderProperty(%+v)", *p)
}

// Attributes:
//  - Delimiter
//  - NullStr
//  - HasHeader
//  - Quoted
//  - Quote
//  - Escape
//  - LineDelim
//  - ArrayDelim
//  - ArrayBegin
//  - ArrayEnd
//  - Threads
//  - TableType
type TCopyParams struct {
  Delimiter string `thrift:"delimiter,1" db:"delimiter" json:"delimiter"`
  NullStr string `thrift:"null_str,2" db:"null_str" json:"null_str"`
  HasHeader bool `thrift:"has_header,3" db:"has_header" json:"has_header"`
  Quoted bool `thrift:"quoted,4" db:"quoted" json:"quoted"`
  Quote string `thrift:"quote,5" db:"quote" json:"quote"`
  Escape string `thrift:"escape,6" db:"escape" json:"escape"`
  LineDelim string `thrift:"line_delim,7" db:"line_delim" json:"line_delim"`
  ArrayDelim string `thrift:"array_delim,8" db:"array_delim" json:"array_delim"`
  ArrayBegin string `thrift:"array_begin,9" db:"array_begin" json:"array_begin"`
  ArrayEnd string `thrift:"array_end,10" db:"array_end" json:"array_end"`
  Threads int32 `thrift:"threads,11" db:"threads" json:"threads"`
  TableType TTableType `thrift:"table_type,12" db:"table_type" json:"table_type"`
}

func NewTCopyParams() *TCopyParams {
  return &TCopyParams{
TableType: 0,
}
}


func (p *TCopyParams) GetDelimiter() string {
  return p.Delimiter
}

func (p *TCopyParams) GetNullStr() string {
  return p.NullStr
}

func (p *TCopyParams) GetHasHeader() bool {
  return p.HasHeader
}

func (p *TCopyParams) GetQuoted() bool {
  return p.Quoted
}

func (p *TCopyParams) GetQuote() string {
  return p.Quote
}

func (p *TCopyParams) GetEscape() string {
  return p.Escape
}

func (p *TCopyParams) GetLineDelim() string {
  return p.LineDelim
}

func (p *TCopyParams) GetArrayDelim() string {
  return p.ArrayDelim
}

func (p *TCopyParams) GetArrayBegin() string {
  return p.ArrayBegin
}

func (p *TCopyParams) GetArrayEnd() string {
  return p.ArrayEnd
}

func (p *TCopyParams) GetThreads() int32 {
  return p.Threads
}

func (p *TCopyParams) GetTableType() TTableType {
  return p.TableType
}
func (p *TCopyParams) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCopyParams)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Delimiter = v
}
  return nil
}

func (p *TCopyParams)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NullStr = v
}
  return nil
}

func (p *TCopyParams)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.HasHeader = v
}
  return nil
}

func (p *TCopyParams)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Quoted = v
}
  return nil
}

func (p *TCopyParams)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Quote = v
}
  return nil
}

func (p *TCopyParams)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Escape = v
}
  return nil
}

func (p *TCopyParams)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.LineDelim = v
}
  return nil
}

func (p *TCopyParams)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ArrayDelim = v
}
  return nil
}

func (p *TCopyParams)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ArrayBegin = v
}
  return nil
}

func (p *TCopyParams)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ArrayEnd = v
}
  return nil
}

func (p *TCopyParams)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Threads = v
}
  return nil
}

func (p *TCopyParams)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  temp := TTableType(v)
  p.TableType = temp
}
  return nil
}

func (p *TCopyParams) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TCopyParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCopyParams) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("delimiter", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:delimiter: ", p), err) }
  if err := oprot.WriteString(string(p.Delimiter)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.delimiter (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:delimiter: ", p), err) }
  return err
}

func (p *TCopyParams) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("null_str", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:null_str: ", p), err) }
  if err := oprot.WriteString(string(p.NullStr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.null_str (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:null_str: ", p), err) }
  return err
}

func (p *TCopyParams) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("has_header", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:has_header: ", p), err) }
  if err := oprot.WriteBool(bool(p.HasHeader)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.has_header (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:has_header: ", p), err) }
  return err
}

func (p *TCopyParams) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("quoted", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:quoted: ", p), err) }
  if err := oprot.WriteBool(bool(p.Quoted)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.quoted (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:quoted: ", p), err) }
  return err
}

func (p *TCopyParams) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("quote", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:quote: ", p), err) }
  if err := oprot.WriteString(string(p.Quote)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.quote (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:quote: ", p), err) }
  return err
}

func (p *TCopyParams) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("escape", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:escape: ", p), err) }
  if err := oprot.WriteString(string(p.Escape)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.escape (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:escape: ", p), err) }
  return err
}

func (p *TCopyParams) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("line_delim", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:line_delim: ", p), err) }
  if err := oprot.WriteString(string(p.LineDelim)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.line_delim (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:line_delim: ", p), err) }
  return err
}

func (p *TCopyParams) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("array_delim", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:array_delim: ", p), err) }
  if err := oprot.WriteString(string(p.ArrayDelim)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.array_delim (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:array_delim: ", p), err) }
  return err
}

func (p *TCopyParams) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("array_begin", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:array_begin: ", p), err) }
  if err := oprot.WriteString(string(p.ArrayBegin)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.array_begin (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:array_begin: ", p), err) }
  return err
}

func (p *TCopyParams) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("array_end", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:array_end: ", p), err) }
  if err := oprot.WriteString(string(p.ArrayEnd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.array_end (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:array_end: ", p), err) }
  return err
}

func (p *TCopyParams) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("threads", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:threads: ", p), err) }
  if err := oprot.WriteI32(int32(p.Threads)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.threads (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:threads: ", p), err) }
  return err
}

func (p *TCopyParams) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_type", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:table_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.TableType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_type (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:table_type: ", p), err) }
  return err
}

func (p *TCopyParams) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCopyParams(%+v)", *p)
}

// Attributes:
//  - RowSet
//  - CopyParams
type TDetectResult_ struct {
  RowSet *TRowSet `thrift:"row_set,1" db:"row_set" json:"row_set"`
  CopyParams *TCopyParams `thrift:"copy_params,2" db:"copy_params" json:"copy_params"`
}

func NewTDetectResult_() *TDetectResult_ {
  return &TDetectResult_{}
}

var TDetectResult__RowSet_DEFAULT *TRowSet
func (p *TDetectResult_) GetRowSet() *TRowSet {
  if !p.IsSetRowSet() {
    return TDetectResult__RowSet_DEFAULT
  }
return p.RowSet
}
var TDetectResult__CopyParams_DEFAULT *TCopyParams
func (p *TDetectResult_) GetCopyParams() *TCopyParams {
  if !p.IsSetCopyParams() {
    return TDetectResult__CopyParams_DEFAULT
  }
return p.CopyParams
}
func (p *TDetectResult_) IsSetRowSet() bool {
  return p.RowSet != nil
}

func (p *TDetectResult_) IsSetCopyParams() bool {
  return p.CopyParams != nil
}

func (p *TDetectResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDetectResult_)  ReadField1(iprot thrift.TProtocol) error {
  p.RowSet = &TRowSet{}
  if err := p.RowSet.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RowSet), err)
  }
  return nil
}

func (p *TDetectResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.CopyParams = &TCopyParams{
  TableType:   0,
}
  if err := p.CopyParams.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CopyParams), err)
  }
  return nil
}

func (p *TDetectResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDetectResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDetectResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_set", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row_set: ", p), err) }
  if err := p.RowSet.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RowSet), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row_set: ", p), err) }
  return err
}

func (p *TDetectResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("copy_params", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:copy_params: ", p), err) }
  if err := p.CopyParams.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CopyParams), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:copy_params: ", p), err) }
  return err
}

func (p *TDetectResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDetectResult_(%+v)", *p)
}

// Attributes:
//  - Elapsed
//  - RowsCompleted
//  - RowsEstimated
//  - RowsRejected
type TImportStatus struct {
  Elapsed int64 `thrift:"elapsed,1" db:"elapsed" json:"elapsed"`
  RowsCompleted int64 `thrift:"rows_completed,2" db:"rows_completed" json:"rows_completed"`
  RowsEstimated int64 `thrift:"rows_estimated,3" db:"rows_estimated" json:"rows_estimated"`
  RowsRejected int64 `thrift:"rows_rejected,4" db:"rows_rejected" json:"rows_rejected"`
}

func NewTImportStatus() *TImportStatus {
  return &TImportStatus{}
}


func (p *TImportStatus) GetElapsed() int64 {
  return p.Elapsed
}

func (p *TImportStatus) GetRowsCompleted() int64 {
  return p.RowsCompleted
}

func (p *TImportStatus) GetRowsEstimated() int64 {
  return p.RowsEstimated
}

func (p *TImportStatus) GetRowsRejected() int64 {
  return p.RowsRejected
}
func (p *TImportStatus) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TImportStatus)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Elapsed = v
}
  return nil
}

func (p *TImportStatus)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RowsCompleted = v
}
  return nil
}

func (p *TImportStatus)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RowsEstimated = v
}
  return nil
}

func (p *TImportStatus)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RowsRejected = v
}
  return nil
}

func (p *TImportStatus) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TImportStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TImportStatus) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("elapsed", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:elapsed: ", p), err) }
  if err := oprot.WriteI64(int64(p.Elapsed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.elapsed (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:elapsed: ", p), err) }
  return err
}

func (p *TImportStatus) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rows_completed", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rows_completed: ", p), err) }
  if err := oprot.WriteI64(int64(p.RowsCompleted)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rows_completed (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rows_completed: ", p), err) }
  return err
}

func (p *TImportStatus) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rows_estimated", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rows_estimated: ", p), err) }
  if err := oprot.WriteI64(int64(p.RowsEstimated)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rows_estimated (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rows_estimated: ", p), err) }
  return err
}

func (p *TImportStatus) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rows_rejected", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:rows_rejected: ", p), err) }
  if err := oprot.WriteI64(int64(p.RowsRejected)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rows_rejected (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:rows_rejected: ", p), err) }
  return err
}

func (p *TImportStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TImportStatus(%+v)", *p)
}

// Attributes:
//  - ViewName
//  - ViewState
//  - ImageHash
//  - UpdateTime
//  - ViewMetadata
type TFrontendView struct {
  ViewName string `thrift:"view_name,1" db:"view_name" json:"view_name"`
  ViewState string `thrift:"view_state,2" db:"view_state" json:"view_state"`
  ImageHash string `thrift:"image_hash,3" db:"image_hash" json:"image_hash"`
  UpdateTime string `thrift:"update_time,4" db:"update_time" json:"update_time"`
  ViewMetadata string `thrift:"view_metadata,5" db:"view_metadata" json:"view_metadata"`
}

func NewTFrontendView() *TFrontendView {
  return &TFrontendView{}
}


func (p *TFrontendView) GetViewName() string {
  return p.ViewName
}

func (p *TFrontendView) GetViewState() string {
  return p.ViewState
}

func (p *TFrontendView) GetImageHash() string {
  return p.ImageHash
}

func (p *TFrontendView) GetUpdateTime() string {
  return p.UpdateTime
}

func (p *TFrontendView) GetViewMetadata() string {
  return p.ViewMetadata
}
func (p *TFrontendView) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TFrontendView)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ViewName = v
}
  return nil
}

func (p *TFrontendView)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ViewState = v
}
  return nil
}

func (p *TFrontendView)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ImageHash = v
}
  return nil
}

func (p *TFrontendView)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UpdateTime = v
}
  return nil
}

func (p *TFrontendView)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ViewMetadata = v
}
  return nil
}

func (p *TFrontendView) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TFrontendView"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TFrontendView) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("view_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:view_name: ", p), err) }
  if err := oprot.WriteString(string(p.ViewName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.view_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:view_name: ", p), err) }
  return err
}

func (p *TFrontendView) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("view_state", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:view_state: ", p), err) }
  if err := oprot.WriteString(string(p.ViewState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.view_state (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:view_state: ", p), err) }
  return err
}

func (p *TFrontendView) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_hash", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:image_hash: ", p), err) }
  if err := oprot.WriteString(string(p.ImageHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.image_hash (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:image_hash: ", p), err) }
  return err
}

func (p *TFrontendView) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("update_time", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:update_time: ", p), err) }
  if err := oprot.WriteString(string(p.UpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.update_time (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:update_time: ", p), err) }
  return err
}

func (p *TFrontendView) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("view_metadata", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:view_metadata: ", p), err) }
  if err := oprot.WriteString(string(p.ViewMetadata)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.view_metadata (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:view_metadata: ", p), err) }
  return err
}

func (p *TFrontendView) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TFrontendView(%+v)", *p)
}

// Attributes:
//  - ReadOnly
//  - Version
//  - RenderingEnabled
//  - StartTime
//  - Edition
type TServerStatus struct {
  ReadOnly bool `thrift:"read_only,1" db:"read_only" json:"read_only"`
  Version string `thrift:"version,2" db:"version" json:"version"`
  RenderingEnabled bool `thrift:"rendering_enabled,3" db:"rendering_enabled" json:"rendering_enabled"`
  StartTime int64 `thrift:"start_time,4" db:"start_time" json:"start_time"`
  Edition string `thrift:"edition,5" db:"edition" json:"edition"`
}

func NewTServerStatus() *TServerStatus {
  return &TServerStatus{}
}


func (p *TServerStatus) GetReadOnly() bool {
  return p.ReadOnly
}

func (p *TServerStatus) GetVersion() string {
  return p.Version
}

func (p *TServerStatus) GetRenderingEnabled() bool {
  return p.RenderingEnabled
}

func (p *TServerStatus) GetStartTime() int64 {
  return p.StartTime
}

func (p *TServerStatus) GetEdition() string {
  return p.Edition
}
func (p *TServerStatus) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TServerStatus)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReadOnly = v
}
  return nil
}

func (p *TServerStatus)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *TServerStatus)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RenderingEnabled = v
}
  return nil
}

func (p *TServerStatus)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TServerStatus)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Edition = v
}
  return nil
}

func (p *TServerStatus) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TServerStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TServerStatus) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("read_only", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:read_only: ", p), err) }
  if err := oprot.WriteBool(bool(p.ReadOnly)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.read_only (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:read_only: ", p), err) }
  return err
}

func (p *TServerStatus) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:version: ", p), err) }
  if err := oprot.WriteString(string(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:version: ", p), err) }
  return err
}

func (p *TServerStatus) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rendering_enabled", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rendering_enabled: ", p), err) }
  if err := oprot.WriteBool(bool(p.RenderingEnabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rendering_enabled (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rendering_enabled: ", p), err) }
  return err
}

func (p *TServerStatus) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("start_time", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:start_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:start_time: ", p), err) }
  return err
}

func (p *TServerStatus) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("edition", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:edition: ", p), err) }
  if err := oprot.WriteString(string(p.Edition)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edition (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:edition: ", p), err) }
  return err
}

func (p *TServerStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TServerStatus(%+v)", *p)
}

// Attributes:
//  - X
//  - Y
type TPixel struct {
  X int64 `thrift:"x,1" db:"x" json:"x"`
  Y int64 `thrift:"y,2" db:"y" json:"y"`
}

func NewTPixel() *TPixel {
  return &TPixel{}
}


func (p *TPixel) GetX() int64 {
  return p.X
}

func (p *TPixel) GetY() int64 {
  return p.Y
}
func (p *TPixel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPixel)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.X = v
}
  return nil
}

func (p *TPixel)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Y = v
}
  return nil
}

func (p *TPixel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPixel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPixel) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("x", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:x: ", p), err) }
  if err := oprot.WriteI64(int64(p.X)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.x (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:x: ", p), err) }
  return err
}

func (p *TPixel) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("y", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:y: ", p), err) }
  if err := oprot.WriteI64(int64(p.Y)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.y (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:y: ", p), err) }
  return err
}

func (p *TPixel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPixel(%+v)", *p)
}

// Attributes:
//  - Pixel
//  - RowID
//  - RowSet
//  - Nonce
type TPixelRowResult_ struct {
  Pixel *TPixel `thrift:"pixel,1" db:"pixel" json:"pixel"`
  RowID int64 `thrift:"row_id,2" db:"row_id" json:"row_id"`
  RowSet *TRowSet `thrift:"row_set,3" db:"row_set" json:"row_set"`
  Nonce string `thrift:"nonce,4" db:"nonce" json:"nonce"`
}

func NewTPixelRowResult_() *TPixelRowResult_ {
  return &TPixelRowResult_{}
}

var TPixelRowResult__Pixel_DEFAULT *TPixel
func (p *TPixelRowResult_) GetPixel() *TPixel {
  if !p.IsSetPixel() {
    return TPixelRowResult__Pixel_DEFAULT
  }
return p.Pixel
}

func (p *TPixelRowResult_) GetRowID() int64 {
  return p.RowID
}
var TPixelRowResult__RowSet_DEFAULT *TRowSet
func (p *TPixelRowResult_) GetRowSet() *TRowSet {
  if !p.IsSetRowSet() {
    return TPixelRowResult__RowSet_DEFAULT
  }
return p.RowSet
}

func (p *TPixelRowResult_) GetNonce() string {
  return p.Nonce
}
func (p *TPixelRowResult_) IsSetPixel() bool {
  return p.Pixel != nil
}

func (p *TPixelRowResult_) IsSetRowSet() bool {
  return p.RowSet != nil
}

func (p *TPixelRowResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPixelRowResult_)  ReadField1(iprot thrift.TProtocol) error {
  p.Pixel = &TPixel{}
  if err := p.Pixel.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pixel), err)
  }
  return nil
}

func (p *TPixelRowResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RowID = v
}
  return nil
}

func (p *TPixelRowResult_)  ReadField3(iprot thrift.TProtocol) error {
  p.RowSet = &TRowSet{}
  if err := p.RowSet.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RowSet), err)
  }
  return nil
}

func (p *TPixelRowResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *TPixelRowResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPixelRowResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPixelRowResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pixel", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pixel: ", p), err) }
  if err := p.Pixel.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pixel), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pixel: ", p), err) }
  return err
}

func (p *TPixelRowResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.RowID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.row_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row_id: ", p), err) }
  return err
}

func (p *TPixelRowResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_set", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:row_set: ", p), err) }
  if err := p.RowSet.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RowSet), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:row_set: ", p), err) }
  return err
}

func (p *TPixelRowResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nonce: ", p), err) }
  if err := oprot.WriteString(string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nonce: ", p), err) }
  return err
}

func (p *TPixelRowResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPixelRowResult_(%+v)", *p)
}

// Attributes:
//  - Pixel
//  - VegaTableName
//  - TableID
//  - RowID
//  - RowSet
//  - Nonce
type TPixelTableRowResult_ struct {
  Pixel *TPixel `thrift:"pixel,1" db:"pixel" json:"pixel"`
  VegaTableName string `thrift:"vega_table_name,2" db:"vega_table_name" json:"vega_table_name"`
  TableID int64 `thrift:"table_id,3" db:"table_id" json:"table_id"`
  RowID int64 `thrift:"row_id,4" db:"row_id" json:"row_id"`
  RowSet *TRowSet `thrift:"row_set,5" db:"row_set" json:"row_set"`
  Nonce string `thrift:"nonce,6" db:"nonce" json:"nonce"`
}

func NewTPixelTableRowResult_() *TPixelTableRowResult_ {
  return &TPixelTableRowResult_{}
}

var TPixelTableRowResult__Pixel_DEFAULT *TPixel
func (p *TPixelTableRowResult_) GetPixel() *TPixel {
  if !p.IsSetPixel() {
    return TPixelTableRowResult__Pixel_DEFAULT
  }
return p.Pixel
}

func (p *TPixelTableRowResult_) GetVegaTableName() string {
  return p.VegaTableName
}

func (p *TPixelTableRowResult_) GetTableID() int64 {
  return p.TableID
}

func (p *TPixelTableRowResult_) GetRowID() int64 {
  return p.RowID
}
var TPixelTableRowResult__RowSet_DEFAULT *TRowSet
func (p *TPixelTableRowResult_) GetRowSet() *TRowSet {
  if !p.IsSetRowSet() {
    return TPixelTableRowResult__RowSet_DEFAULT
  }
return p.RowSet
}

func (p *TPixelTableRowResult_) GetNonce() string {
  return p.Nonce
}
func (p *TPixelTableRowResult_) IsSetPixel() bool {
  return p.Pixel != nil
}

func (p *TPixelTableRowResult_) IsSetRowSet() bool {
  return p.RowSet != nil
}

func (p *TPixelTableRowResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPixelTableRowResult_)  ReadField1(iprot thrift.TProtocol) error {
  p.Pixel = &TPixel{}
  if err := p.Pixel.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pixel), err)
  }
  return nil
}

func (p *TPixelTableRowResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.VegaTableName = v
}
  return nil
}

func (p *TPixelTableRowResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TableID = v
}
  return nil
}

func (p *TPixelTableRowResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RowID = v
}
  return nil
}

func (p *TPixelTableRowResult_)  ReadField5(iprot thrift.TProtocol) error {
  p.RowSet = &TRowSet{}
  if err := p.RowSet.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RowSet), err)
  }
  return nil
}

func (p *TPixelTableRowResult_)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *TPixelTableRowResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPixelTableRowResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPixelTableRowResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pixel", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pixel: ", p), err) }
  if err := p.Pixel.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pixel), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pixel: ", p), err) }
  return err
}

func (p *TPixelTableRowResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vega_table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vega_table_name: ", p), err) }
  if err := oprot.WriteString(string(p.VegaTableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vega_table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vega_table_name: ", p), err) }
  return err
}

func (p *TPixelTableRowResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:table_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.TableID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:table_id: ", p), err) }
  return err
}

func (p *TPixelTableRowResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_id", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:row_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.RowID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.row_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:row_id: ", p), err) }
  return err
}

func (p *TPixelTableRowResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_set", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:row_set: ", p), err) }
  if err := p.RowSet.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RowSet), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:row_set: ", p), err) }
  return err
}

func (p *TPixelTableRowResult_) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nonce: ", p), err) }
  if err := oprot.WriteString(string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nonce: ", p), err) }
  return err
}

func (p *TPixelTableRowResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPixelTableRowResult_(%+v)", *p)
}

// Attributes:
//  - Pixel
//  - RowSet
type TPixelRows struct {
  Pixel *TPixel `thrift:"pixel,1" db:"pixel" json:"pixel"`
  RowSet *TRowSet `thrift:"row_set,2" db:"row_set" json:"row_set"`
}

func NewTPixelRows() *TPixelRows {
  return &TPixelRows{}
}

var TPixelRows_Pixel_DEFAULT *TPixel
func (p *TPixelRows) GetPixel() *TPixel {
  if !p.IsSetPixel() {
    return TPixelRows_Pixel_DEFAULT
  }
return p.Pixel
}
var TPixelRows_RowSet_DEFAULT *TRowSet
func (p *TPixelRows) GetRowSet() *TRowSet {
  if !p.IsSetRowSet() {
    return TPixelRows_RowSet_DEFAULT
  }
return p.RowSet
}
func (p *TPixelRows) IsSetPixel() bool {
  return p.Pixel != nil
}

func (p *TPixelRows) IsSetRowSet() bool {
  return p.RowSet != nil
}

func (p *TPixelRows) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPixelRows)  ReadField1(iprot thrift.TProtocol) error {
  p.Pixel = &TPixel{}
  if err := p.Pixel.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pixel), err)
  }
  return nil
}

func (p *TPixelRows)  ReadField2(iprot thrift.TProtocol) error {
  p.RowSet = &TRowSet{}
  if err := p.RowSet.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RowSet), err)
  }
  return nil
}

func (p *TPixelRows) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPixelRows"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPixelRows) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pixel", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pixel: ", p), err) }
  if err := p.Pixel.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pixel), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pixel: ", p), err) }
  return err
}

func (p *TPixelRows) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_set", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row_set: ", p), err) }
  if err := p.RowSet.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RowSet), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row_set: ", p), err) }
  return err
}

func (p *TPixelRows) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPixelRows(%+v)", *p)
}

// Attributes:
//  - PixelRows
//  - Nonce
type TPixelResult_ struct {
  PixelRows []*TPixelRows `thrift:"pixel_rows,1" db:"pixel_rows" json:"pixel_rows"`
  Nonce string `thrift:"nonce,2" db:"nonce" json:"nonce"`
}

func NewTPixelResult_() *TPixelResult_ {
  return &TPixelResult_{}
}


func (p *TPixelResult_) GetPixelRows() []*TPixelRows {
  return p.PixelRows
}

func (p *TPixelResult_) GetNonce() string {
  return p.Nonce
}
func (p *TPixelResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPixelResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TPixelRows, 0, size)
  p.PixelRows =  tSlice
  for i := 0; i < size; i ++ {
    _elem12 := &TPixelRows{}
    if err := _elem12.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
    }
    p.PixelRows = append(p.PixelRows, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TPixelResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *TPixelResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPixelResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPixelResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pixel_rows", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pixel_rows: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PixelRows)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PixelRows {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pixel_rows: ", p), err) }
  return err
}

func (p *TPixelResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nonce: ", p), err) }
  if err := oprot.WriteString(string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nonce: ", p), err) }
  return err
}

func (p *TPixelResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPixelResult_(%+v)", *p)
}

// Attributes:
//  - Image
//  - Nonce
//  - ExecutionTimeMs
//  - RenderTimeMs
//  - TotalTimeMs
type TRenderResult_ struct {
  Image []byte `thrift:"image,1" db:"image" json:"image"`
  Nonce string `thrift:"nonce,2" db:"nonce" json:"nonce"`
  ExecutionTimeMs int64 `thrift:"execution_time_ms,3" db:"execution_time_ms" json:"execution_time_ms"`
  RenderTimeMs int64 `thrift:"render_time_ms,4" db:"render_time_ms" json:"render_time_ms"`
  TotalTimeMs int64 `thrift:"total_time_ms,5" db:"total_time_ms" json:"total_time_ms"`
}

func NewTRenderResult_() *TRenderResult_ {
  return &TRenderResult_{}
}


func (p *TRenderResult_) GetImage() []byte {
  return p.Image
}

func (p *TRenderResult_) GetNonce() string {
  return p.Nonce
}

func (p *TRenderResult_) GetExecutionTimeMs() int64 {
  return p.ExecutionTimeMs
}

func (p *TRenderResult_) GetRenderTimeMs() int64 {
  return p.RenderTimeMs
}

func (p *TRenderResult_) GetTotalTimeMs() int64 {
  return p.TotalTimeMs
}
func (p *TRenderResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TRenderResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Image = v
}
  return nil
}

func (p *TRenderResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *TRenderResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ExecutionTimeMs = v
}
  return nil
}

func (p *TRenderResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RenderTimeMs = v
}
  return nil
}

func (p *TRenderResult_)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TotalTimeMs = v
}
  return nil
}

func (p *TRenderResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRenderResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRenderResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:image: ", p), err) }
  if err := oprot.WriteBinary(p.Image); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.image (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:image: ", p), err) }
  return err
}

func (p *TRenderResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nonce: ", p), err) }
  if err := oprot.WriteString(string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nonce: ", p), err) }
  return err
}

func (p *TRenderResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("execution_time_ms", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:execution_time_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExecutionTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.execution_time_ms (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:execution_time_ms: ", p), err) }
  return err
}

func (p *TRenderResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("render_time_ms", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:render_time_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.RenderTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.render_time_ms (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:render_time_ms: ", p), err) }
  return err
}

func (p *TRenderResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("total_time_ms", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:total_time_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.TotalTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total_time_ms (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:total_time_ms: ", p), err) }
  return err
}

func (p *TRenderResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRenderResult_(%+v)", *p)
}

// Attributes:
//  - Max
//  - InUse
//  - Allocated
//  - IsAllocationCapped
type TGpuMemorySummary struct {
  Max int64 `thrift:"max,1" db:"max" json:"max"`
  InUse int64 `thrift:"in_use,2" db:"in_use" json:"in_use"`
  Allocated int64 `thrift:"allocated,3" db:"allocated" json:"allocated"`
  IsAllocationCapped bool `thrift:"is_allocation_capped,4" db:"is_allocation_capped" json:"is_allocation_capped"`
}

func NewTGpuMemorySummary() *TGpuMemorySummary {
  return &TGpuMemorySummary{}
}


func (p *TGpuMemorySummary) GetMax() int64 {
  return p.Max
}

func (p *TGpuMemorySummary) GetInUse() int64 {
  return p.InUse
}

func (p *TGpuMemorySummary) GetAllocated() int64 {
  return p.Allocated
}

func (p *TGpuMemorySummary) GetIsAllocationCapped() bool {
  return p.IsAllocationCapped
}
func (p *TGpuMemorySummary) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGpuMemorySummary)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Max = v
}
  return nil
}

func (p *TGpuMemorySummary)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.InUse = v
}
  return nil
}

func (p *TGpuMemorySummary)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Allocated = v
}
  return nil
}

func (p *TGpuMemorySummary)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsAllocationCapped = v
}
  return nil
}

func (p *TGpuMemorySummary) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TGpuMemorySummary"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGpuMemorySummary) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("max", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:max: ", p), err) }
  if err := oprot.WriteI64(int64(p.Max)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:max: ", p), err) }
  return err
}

func (p *TGpuMemorySummary) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("in_use", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:in_use: ", p), err) }
  if err := oprot.WriteI64(int64(p.InUse)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.in_use (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:in_use: ", p), err) }
  return err
}

func (p *TGpuMemorySummary) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("allocated", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:allocated: ", p), err) }
  if err := oprot.WriteI64(int64(p.Allocated)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allocated (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:allocated: ", p), err) }
  return err
}

func (p *TGpuMemorySummary) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_allocation_capped", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:is_allocation_capped: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsAllocationCapped)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_allocation_capped (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:is_allocation_capped: ", p), err) }
  return err
}

func (p *TGpuMemorySummary) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGpuMemorySummary(%+v)", *p)
}

// Attributes:
//  - CPUMemoryInUse
//  - GpuSummary
type TMemorySummary struct {
  CPUMemoryInUse int64 `thrift:"cpu_memory_in_use,1" db:"cpu_memory_in_use" json:"cpu_memory_in_use"`
  GpuSummary []*TGpuMemorySummary `thrift:"gpu_summary,2" db:"gpu_summary" json:"gpu_summary"`
}

func NewTMemorySummary() *TMemorySummary {
  return &TMemorySummary{}
}


func (p *TMemorySummary) GetCPUMemoryInUse() int64 {
  return p.CPUMemoryInUse
}

func (p *TMemorySummary) GetGpuSummary() []*TGpuMemorySummary {
  return p.GpuSummary
}
func (p *TMemorySummary) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMemorySummary)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CPUMemoryInUse = v
}
  return nil
}

func (p *TMemorySummary)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TGpuMemorySummary, 0, size)
  p.GpuSummary =  tSlice
  for i := 0; i < size; i ++ {
    _elem13 := &TGpuMemorySummary{}
    if err := _elem13.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
    }
    p.GpuSummary = append(p.GpuSummary, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TMemorySummary) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TMemorySummary"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMemorySummary) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cpu_memory_in_use", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cpu_memory_in_use: ", p), err) }
  if err := oprot.WriteI64(int64(p.CPUMemoryInUse)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cpu_memory_in_use (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cpu_memory_in_use: ", p), err) }
  return err
}

func (p *TMemorySummary) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gpu_summary", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gpu_summary: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.GpuSummary)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.GpuSummary {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gpu_summary: ", p), err) }
  return err
}

func (p *TMemorySummary) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMemorySummary(%+v)", *p)
}

// Attributes:
//  - RowDesc
//  - FragmentSize
//  - PageSize
//  - MaxRows
//  - ViewSql
type TTableDetails struct {
  RowDesc TRowDescriptor `thrift:"row_desc,1" db:"row_desc" json:"row_desc"`
  FragmentSize int64 `thrift:"fragment_size,2" db:"fragment_size" json:"fragment_size"`
  PageSize int64 `thrift:"page_size,3" db:"page_size" json:"page_size"`
  MaxRows int64 `thrift:"max_rows,4" db:"max_rows" json:"max_rows"`
  ViewSql string `thrift:"view_sql,5" db:"view_sql" json:"view_sql"`
}

func NewTTableDetails() *TTableDetails {
  return &TTableDetails{}
}


func (p *TTableDetails) GetRowDesc() TRowDescriptor {
  return p.RowDesc
}

func (p *TTableDetails) GetFragmentSize() int64 {
  return p.FragmentSize
}

func (p *TTableDetails) GetPageSize() int64 {
  return p.PageSize
}

func (p *TTableDetails) GetMaxRows() int64 {
  return p.MaxRows
}

func (p *TTableDetails) GetViewSql() string {
  return p.ViewSql
}
func (p *TTableDetails) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTableDetails)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make(TRowDescriptor, 0, size)
  p.RowDesc =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &TColumnType{}
    if err := _elem14.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.RowDesc = append(p.RowDesc, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TTableDetails)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FragmentSize = v
}
  return nil
}

func (p *TTableDetails)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PageSize = v
}
  return nil
}

func (p *TTableDetails)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxRows = v
}
  return nil
}

func (p *TTableDetails)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ViewSql = v
}
  return nil
}

func (p *TTableDetails) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTableDetails"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTableDetails) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_desc", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row_desc: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowDesc)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RowDesc {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row_desc: ", p), err) }
  return err
}

func (p *TTableDetails) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fragment_size", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fragment_size: ", p), err) }
  if err := oprot.WriteI64(int64(p.FragmentSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fragment_size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fragment_size: ", p), err) }
  return err
}

func (p *TTableDetails) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page_size", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:page_size: ", p), err) }
  if err := oprot.WriteI64(int64(p.PageSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page_size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:page_size: ", p), err) }
  return err
}

func (p *TTableDetails) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("max_rows", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_rows: ", p), err) }
  if err := oprot.WriteI64(int64(p.MaxRows)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_rows (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_rows: ", p), err) }
  return err
}

func (p *TTableDetails) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("view_sql", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:view_sql: ", p), err) }
  if err := oprot.WriteString(string(p.ViewSql)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.view_sql (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:view_sql: ", p), err) }
  return err
}

func (p *TTableDetails) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTableDetails(%+v)", *p)
}

// Attributes:
//  - Type
//  - ColID
//  - TableID
//  - HasNulls
//  - IntMin
//  - IntMax
//  - Bucket
//  - FpMin
//  - FpMax
type TColumnRange struct {
  Type TExpressionRangeType `thrift:"type,1" db:"type" json:"type"`
  ColID int32 `thrift:"col_id,2" db:"col_id" json:"col_id"`
  TableID int32 `thrift:"table_id,3" db:"table_id" json:"table_id"`
  HasNulls bool `thrift:"has_nulls,4" db:"has_nulls" json:"has_nulls"`
  IntMin int64 `thrift:"int_min,5" db:"int_min" json:"int_min"`
  IntMax int64 `thrift:"int_max,6" db:"int_max" json:"int_max"`
  Bucket int64 `thrift:"bucket,7" db:"bucket" json:"bucket"`
  FpMin float64 `thrift:"fp_min,8" db:"fp_min" json:"fp_min"`
  FpMax float64 `thrift:"fp_max,9" db:"fp_max" json:"fp_max"`
}

func NewTColumnRange() *TColumnRange {
  return &TColumnRange{}
}


func (p *TColumnRange) GetType() TExpressionRangeType {
  return p.Type
}

func (p *TColumnRange) GetColID() int32 {
  return p.ColID
}

func (p *TColumnRange) GetTableID() int32 {
  return p.TableID
}

func (p *TColumnRange) GetHasNulls() bool {
  return p.HasNulls
}

func (p *TColumnRange) GetIntMin() int64 {
  return p.IntMin
}

func (p *TColumnRange) GetIntMax() int64 {
  return p.IntMax
}

func (p *TColumnRange) GetBucket() int64 {
  return p.Bucket
}

func (p *TColumnRange) GetFpMin() float64 {
  return p.FpMin
}

func (p *TColumnRange) GetFpMax() float64 {
  return p.FpMax
}
func (p *TColumnRange) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TColumnRange)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TExpressionRangeType(v)
  p.Type = temp
}
  return nil
}

func (p *TColumnRange)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ColID = v
}
  return nil
}

func (p *TColumnRange)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TableID = v
}
  return nil
}

func (p *TColumnRange)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.HasNulls = v
}
  return nil
}

func (p *TColumnRange)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IntMin = v
}
  return nil
}

func (p *TColumnRange)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IntMax = v
}
  return nil
}

func (p *TColumnRange)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Bucket = v
}
  return nil
}

func (p *TColumnRange)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.FpMin = v
}
  return nil
}

func (p *TColumnRange)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.FpMax = v
}
  return nil
}

func (p *TColumnRange) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TColumnRange"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TColumnRange) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *TColumnRange) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("col_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:col_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ColID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.col_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:col_id: ", p), err) }
  return err
}

func (p *TColumnRange) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:table_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TableID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:table_id: ", p), err) }
  return err
}

func (p *TColumnRange) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("has_nulls", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:has_nulls: ", p), err) }
  if err := oprot.WriteBool(bool(p.HasNulls)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.has_nulls (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:has_nulls: ", p), err) }
  return err
}

func (p *TColumnRange) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("int_min", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:int_min: ", p), err) }
  if err := oprot.WriteI64(int64(p.IntMin)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.int_min (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:int_min: ", p), err) }
  return err
}

func (p *TColumnRange) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("int_max", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:int_max: ", p), err) }
  if err := oprot.WriteI64(int64(p.IntMax)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.int_max (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:int_max: ", p), err) }
  return err
}

func (p *TColumnRange) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bucket", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:bucket: ", p), err) }
  if err := oprot.WriteI64(int64(p.Bucket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bucket (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:bucket: ", p), err) }
  return err
}

func (p *TColumnRange) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fp_min", thrift.DOUBLE, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:fp_min: ", p), err) }
  if err := oprot.WriteDouble(float64(p.FpMin)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fp_min (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:fp_min: ", p), err) }
  return err
}

func (p *TColumnRange) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fp_max", thrift.DOUBLE, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:fp_max: ", p), err) }
  if err := oprot.WriteDouble(float64(p.FpMax)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fp_max (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:fp_max: ", p), err) }
  return err
}

func (p *TColumnRange) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TColumnRange(%+v)", *p)
}

// Attributes:
//  - DictID
//  - EntryCount
type TDictionaryGeneration struct {
  DictID int32 `thrift:"dict_id,1" db:"dict_id" json:"dict_id"`
  EntryCount int64 `thrift:"entry_count,2" db:"entry_count" json:"entry_count"`
}

func NewTDictionaryGeneration() *TDictionaryGeneration {
  return &TDictionaryGeneration{}
}


func (p *TDictionaryGeneration) GetDictID() int32 {
  return p.DictID
}

func (p *TDictionaryGeneration) GetEntryCount() int64 {
  return p.EntryCount
}
func (p *TDictionaryGeneration) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDictionaryGeneration)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DictID = v
}
  return nil
}

func (p *TDictionaryGeneration)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EntryCount = v
}
  return nil
}

func (p *TDictionaryGeneration) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDictionaryGeneration"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDictionaryGeneration) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dict_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dict_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.DictID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dict_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dict_id: ", p), err) }
  return err
}

func (p *TDictionaryGeneration) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("entry_count", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entry_count: ", p), err) }
  if err := oprot.WriteI64(int64(p.EntryCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.entry_count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entry_count: ", p), err) }
  return err
}

func (p *TDictionaryGeneration) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDictionaryGeneration(%+v)", *p)
}

// Attributes:
//  - TableID
//  - TupleCount
//  - StartRowid
type TTableGeneration struct {
  TableID int32 `thrift:"table_id,1" db:"table_id" json:"table_id"`
  TupleCount int64 `thrift:"tuple_count,2" db:"tuple_count" json:"tuple_count"`
  StartRowid int64 `thrift:"start_rowid,3" db:"start_rowid" json:"start_rowid"`
}

func NewTTableGeneration() *TTableGeneration {
  return &TTableGeneration{}
}


func (p *TTableGeneration) GetTableID() int32 {
  return p.TableID
}

func (p *TTableGeneration) GetTupleCount() int64 {
  return p.TupleCount
}

func (p *TTableGeneration) GetStartRowid() int64 {
  return p.StartRowid
}
func (p *TTableGeneration) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTableGeneration)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TableID = v
}
  return nil
}

func (p *TTableGeneration)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TupleCount = v
}
  return nil
}

func (p *TTableGeneration)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartRowid = v
}
  return nil
}

func (p *TTableGeneration) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTableGeneration"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTableGeneration) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TableID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table_id: ", p), err) }
  return err
}

func (p *TTableGeneration) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tuple_count", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tuple_count: ", p), err) }
  if err := oprot.WriteI64(int64(p.TupleCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tuple_count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tuple_count: ", p), err) }
  return err
}

func (p *TTableGeneration) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("start_rowid", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:start_rowid: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartRowid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_rowid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:start_rowid: ", p), err) }
  return err
}

func (p *TTableGeneration) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTableGeneration(%+v)", *p)
}

// Attributes:
//  - ID
//  - ColumnRanges
//  - DictionaryGenerations
//  - TableGenerations
type TPendingQuery struct {
  ID TQueryId `thrift:"id,1" db:"id" json:"id"`
  ColumnRanges []*TColumnRange `thrift:"column_ranges,2" db:"column_ranges" json:"column_ranges"`
  DictionaryGenerations []*TDictionaryGeneration `thrift:"dictionary_generations,3" db:"dictionary_generations" json:"dictionary_generations"`
  TableGenerations []*TTableGeneration `thrift:"table_generations,4" db:"table_generations" json:"table_generations"`
}

func NewTPendingQuery() *TPendingQuery {
  return &TPendingQuery{}
}


func (p *TPendingQuery) GetID() TQueryId {
  return p.ID
}

func (p *TPendingQuery) GetColumnRanges() []*TColumnRange {
  return p.ColumnRanges
}

func (p *TPendingQuery) GetDictionaryGenerations() []*TDictionaryGeneration {
  return p.DictionaryGenerations
}

func (p *TPendingQuery) GetTableGenerations() []*TTableGeneration {
  return p.TableGenerations
}
func (p *TPendingQuery) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPendingQuery)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TQueryId(v)
  p.ID = temp
}
  return nil
}

func (p *TPendingQuery)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TColumnRange, 0, size)
  p.ColumnRanges =  tSlice
  for i := 0; i < size; i ++ {
    _elem15 := &TColumnRange{}
    if err := _elem15.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem15), err)
    }
    p.ColumnRanges = append(p.ColumnRanges, _elem15)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TPendingQuery)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDictionaryGeneration, 0, size)
  p.DictionaryGenerations =  tSlice
  for i := 0; i < size; i ++ {
    _elem16 := &TDictionaryGeneration{}
    if err := _elem16.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
    }
    p.DictionaryGenerations = append(p.DictionaryGenerations, _elem16)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TPendingQuery)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TTableGeneration, 0, size)
  p.TableGenerations =  tSlice
  for i := 0; i < size; i ++ {
    _elem17 := &TTableGeneration{}
    if err := _elem17.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
    }
    p.TableGenerations = append(p.TableGenerations, _elem17)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TPendingQuery) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPendingQuery"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPendingQuery) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TPendingQuery) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("column_ranges", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:column_ranges: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnRanges)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColumnRanges {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:column_ranges: ", p), err) }
  return err
}

func (p *TPendingQuery) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dictionary_generations", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dictionary_generations: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DictionaryGenerations)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.DictionaryGenerations {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dictionary_generations: ", p), err) }
  return err
}

func (p *TPendingQuery) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_generations", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:table_generations: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TableGenerations)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TableGenerations {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:table_generations: ", p), err) }
  return err
}

func (p *TPendingQuery) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPendingQuery(%+v)", *p)
}

// Attributes:
//  - Payload
//  - IsNull
type TVarLen struct {
  Payload []byte `thrift:"payload,1" db:"payload" json:"payload"`
  IsNull bool `thrift:"is_null,2" db:"is_null" json:"is_null"`
}

func NewTVarLen() *TVarLen {
  return &TVarLen{}
}


func (p *TVarLen) GetPayload() []byte {
  return p.Payload
}

func (p *TVarLen) GetIsNull() bool {
  return p.IsNull
}
func (p *TVarLen) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TVarLen)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Payload = v
}
  return nil
}

func (p *TVarLen)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IsNull = v
}
  return nil
}

func (p *TVarLen) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TVarLen"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TVarLen) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("payload", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:payload: ", p), err) }
  if err := oprot.WriteBinary(p.Payload); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.payload (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:payload: ", p), err) }
  return err
}

func (p *TVarLen) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_null", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:is_null: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsNull)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_null (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:is_null: ", p), err) }
  return err
}

func (p *TVarLen) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TVarLen(%+v)", *p)
}

// Attributes:
//  - FixedLenData
//  - VarLenData
type TDataBlockPtr struct {
  FixedLenData []byte `thrift:"fixed_len_data,1" db:"fixed_len_data" json:"fixed_len_data,omitempty"`
  VarLenData []*TVarLen `thrift:"var_len_data,2" db:"var_len_data" json:"var_len_data,omitempty"`
}

func NewTDataBlockPtr() *TDataBlockPtr {
  return &TDataBlockPtr{}
}

var TDataBlockPtr_FixedLenData_DEFAULT []byte

func (p *TDataBlockPtr) GetFixedLenData() []byte {
  return p.FixedLenData
}
var TDataBlockPtr_VarLenData_DEFAULT []*TVarLen

func (p *TDataBlockPtr) GetVarLenData() []*TVarLen {
  return p.VarLenData
}
func (p *TDataBlockPtr) IsSetFixedLenData() bool {
  return p.FixedLenData != nil
}

func (p *TDataBlockPtr) IsSetVarLenData() bool {
  return p.VarLenData != nil
}

func (p *TDataBlockPtr) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataBlockPtr)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FixedLenData = v
}
  return nil
}

func (p *TDataBlockPtr)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TVarLen, 0, size)
  p.VarLenData =  tSlice
  for i := 0; i < size; i ++ {
    _elem18 := &TVarLen{}
    if err := _elem18.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
    }
    p.VarLenData = append(p.VarLenData, _elem18)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDataBlockPtr) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDataBlockPtr"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataBlockPtr) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetFixedLenData() {
    if err := oprot.WriteFieldBegin("fixed_len_data", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fixed_len_data: ", p), err) }
    if err := oprot.WriteBinary(p.FixedLenData); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.fixed_len_data (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fixed_len_data: ", p), err) }
  }
  return err
}

func (p *TDataBlockPtr) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetVarLenData() {
    if err := oprot.WriteFieldBegin("var_len_data", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:var_len_data: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VarLenData)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.VarLenData {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:var_len_data: ", p), err) }
  }
  return err
}

func (p *TDataBlockPtr) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataBlockPtr(%+v)", *p)
}

// Attributes:
//  - DbID
//  - TableID
//  - ColumnIds
//  - Data
//  - NumRows
type TInsertData struct {
  DbID int32 `thrift:"db_id,1" db:"db_id" json:"db_id"`
  TableID int32 `thrift:"table_id,2" db:"table_id" json:"table_id"`
  ColumnIds []int32 `thrift:"column_ids,3" db:"column_ids" json:"column_ids"`
  Data []*TDataBlockPtr `thrift:"data,4" db:"data" json:"data"`
  NumRows int64 `thrift:"num_rows,5" db:"num_rows" json:"num_rows"`
}

func NewTInsertData() *TInsertData {
  return &TInsertData{}
}


func (p *TInsertData) GetDbID() int32 {
  return p.DbID
}

func (p *TInsertData) GetTableID() int32 {
  return p.TableID
}

func (p *TInsertData) GetColumnIds() []int32 {
  return p.ColumnIds
}

func (p *TInsertData) GetData() []*TDataBlockPtr {
  return p.Data
}

func (p *TInsertData) GetNumRows() int64 {
  return p.NumRows
}
func (p *TInsertData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TInsertData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbID = v
}
  return nil
}

func (p *TInsertData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableID = v
}
  return nil
}

func (p *TInsertData)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.ColumnIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem19 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem19 = v
}
    p.ColumnIds = append(p.ColumnIds, _elem19)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TInsertData)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDataBlockPtr, 0, size)
  p.Data =  tSlice
  for i := 0; i < size; i ++ {
    _elem20 := &TDataBlockPtr{}
    if err := _elem20.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem20), err)
    }
    p.Data = append(p.Data, _elem20)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TInsertData)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NumRows = v
}
  return nil
}

func (p *TInsertData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TInsertData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TInsertData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.DbID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_id: ", p), err) }
  return err
}

func (p *TInsertData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TableID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_id: ", p), err) }
  return err
}

func (p *TInsertData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("column_ids", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:column_ids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.ColumnIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColumnIds {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:column_ids: ", p), err) }
  return err
}

func (p *TInsertData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:data: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Data {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:data: ", p), err) }
  return err
}

func (p *TInsertData) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num_rows", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:num_rows: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumRows)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_rows (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:num_rows: ", p), err) }
  return err
}

func (p *TInsertData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TInsertData(%+v)", *p)
}

// Attributes:
//  - NumChannels
//  - Pixels
//  - RowIds_A
//  - RowIds_B
//  - TableIds
type TRawRenderPassDataResult_ struct {
  NumChannels int32 `thrift:"num_channels,1" db:"num_channels" json:"num_channels"`
  Pixels []byte `thrift:"pixels,2" db:"pixels" json:"pixels"`
  RowIds_A []byte `thrift:"row_ids_A,3" db:"row_ids_A" json:"row_ids_A"`
  RowIds_B []byte `thrift:"row_ids_B,4" db:"row_ids_B" json:"row_ids_B"`
  TableIds []byte `thrift:"table_ids,5" db:"table_ids" json:"table_ids"`
}

func NewTRawRenderPassDataResult_() *TRawRenderPassDataResult_ {
  return &TRawRenderPassDataResult_{}
}


func (p *TRawRenderPassDataResult_) GetNumChannels() int32 {
  return p.NumChannels
}

func (p *TRawRenderPassDataResult_) GetPixels() []byte {
  return p.Pixels
}

func (p *TRawRenderPassDataResult_) GetRowIds_A() []byte {
  return p.RowIds_A
}

func (p *TRawRenderPassDataResult_) GetRowIds_B() []byte {
  return p.RowIds_B
}

func (p *TRawRenderPassDataResult_) GetTableIds() []byte {
  return p.TableIds
}
func (p *TRawRenderPassDataResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TRawRenderPassDataResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NumChannels = v
}
  return nil
}

func (p *TRawRenderPassDataResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Pixels = v
}
  return nil
}

func (p *TRawRenderPassDataResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RowIds_A = v
}
  return nil
}

func (p *TRawRenderPassDataResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RowIds_B = v
}
  return nil
}

func (p *TRawRenderPassDataResult_)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TableIds = v
}
  return nil
}

func (p *TRawRenderPassDataResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRawRenderPassDataResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRawRenderPassDataResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num_channels", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num_channels: ", p), err) }
  if err := oprot.WriteI32(int32(p.NumChannels)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_channels (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num_channels: ", p), err) }
  return err
}

func (p *TRawRenderPassDataResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pixels", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pixels: ", p), err) }
  if err := oprot.WriteBinary(p.Pixels); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pixels (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pixels: ", p), err) }
  return err
}

func (p *TRawRenderPassDataResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_ids_A", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:row_ids_A: ", p), err) }
  if err := oprot.WriteBinary(p.RowIds_A); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.row_ids_A (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:row_ids_A: ", p), err) }
  return err
}

func (p *TRawRenderPassDataResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_ids_B", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:row_ids_B: ", p), err) }
  if err := oprot.WriteBinary(p.RowIds_B); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.row_ids_B (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:row_ids_B: ", p), err) }
  return err
}

func (p *TRawRenderPassDataResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_ids", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:table_ids: ", p), err) }
  if err := oprot.WriteBinary(p.TableIds); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_ids (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:table_ids: ", p), err) }
  return err
}

func (p *TRawRenderPassDataResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRawRenderPassDataResult_(%+v)", *p)
}

// Attributes:
//  - Width
//  - Height
//  - RenderPassMap
//  - ExecutionTimeMs
//  - RenderTimeMs
//  - TotalTimeMs
type TRawPixelDataResult_ struct {
  Width int32 `thrift:"width,1" db:"width" json:"width"`
  Height int32 `thrift:"height,2" db:"height" json:"height"`
  RenderPassMap TRenderPassMap `thrift:"render_pass_map,3" db:"render_pass_map" json:"render_pass_map"`
  // unused fields # 4 to 7
  ExecutionTimeMs int64 `thrift:"execution_time_ms,8" db:"execution_time_ms" json:"execution_time_ms"`
  RenderTimeMs int64 `thrift:"render_time_ms,9" db:"render_time_ms" json:"render_time_ms"`
  TotalTimeMs int64 `thrift:"total_time_ms,10" db:"total_time_ms" json:"total_time_ms"`
}

func NewTRawPixelDataResult_() *TRawPixelDataResult_ {
  return &TRawPixelDataResult_{}
}


func (p *TRawPixelDataResult_) GetWidth() int32 {
  return p.Width
}

func (p *TRawPixelDataResult_) GetHeight() int32 {
  return p.Height
}

func (p *TRawPixelDataResult_) GetRenderPassMap() TRenderPassMap {
  return p.RenderPassMap
}

func (p *TRawPixelDataResult_) GetExecutionTimeMs() int64 {
  return p.ExecutionTimeMs
}

func (p *TRawPixelDataResult_) GetRenderTimeMs() int64 {
  return p.RenderTimeMs
}

func (p *TRawPixelDataResult_) GetTotalTimeMs() int64 {
  return p.TotalTimeMs
}
func (p *TRawPixelDataResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TRawPixelDataResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Width = v
}
  return nil
}

func (p *TRawPixelDataResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Height = v
}
  return nil
}

func (p *TRawPixelDataResult_)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(TRenderPassMap, size)
  p.RenderPassMap =  tMap
  for i := 0; i < size; i ++ {
var _key21 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key21 = v
}
    _val22 := &TRawRenderPassDataResult_{}
    if err := _val22.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val22), err)
    }
    p.RenderPassMap[_key21] = _val22
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TRawPixelDataResult_)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ExecutionTimeMs = v
}
  return nil
}

func (p *TRawPixelDataResult_)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.RenderTimeMs = v
}
  return nil
}

func (p *TRawPixelDataResult_)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TotalTimeMs = v
}
  return nil
}

func (p *TRawPixelDataResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRawPixelDataResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRawPixelDataResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("width", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:width: ", p), err) }
  if err := oprot.WriteI32(int32(p.Width)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.width (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:width: ", p), err) }
  return err
}

func (p *TRawPixelDataResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("height", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:height: ", p), err) }
  if err := oprot.WriteI32(int32(p.Height)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.height (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:height: ", p), err) }
  return err
}

func (p *TRawPixelDataResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("render_pass_map", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:render_pass_map: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.RenderPassMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.RenderPassMap {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:render_pass_map: ", p), err) }
  return err
}

func (p *TRawPixelDataResult_) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("execution_time_ms", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:execution_time_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExecutionTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.execution_time_ms (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:execution_time_ms: ", p), err) }
  return err
}

func (p *TRawPixelDataResult_) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("render_time_ms", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:render_time_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.RenderTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.render_time_ms (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:render_time_ms: ", p), err) }
  return err
}

func (p *TRawPixelDataResult_) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("total_time_ms", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:total_time_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.TotalTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total_time_ms (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:total_time_ms: ", p), err) }
  return err
}

func (p *TRawPixelDataResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRawPixelDataResult_(%+v)", *p)
}

type MapD interface {
  // Parameters:
  //  - User
  //  - Passwd
  //  - Dbname
  Connect(user string, passwd string, dbname string) (r TSessionId, err error)
  // Parameters:
  //  - Session
  Disconnect(session TSessionId) (err error)
  // Parameters:
  //  - Session
  GetServerStatus(session TSessionId) (r *TServerStatus, err error)
  // Parameters:
  //  - Session
  GetTables(session TSessionId) (r []string, err error)
  // Parameters:
  //  - Session
  //  - TableName
  GetTableDetails(session TSessionId, table_name string) (r *TTableDetails, err error)
  // Parameters:
  //  - Session
  GetUsers(session TSessionId) (r []string, err error)
  // Parameters:
  //  - Session
  GetDatabases(session TSessionId) (r []*TDBInfo, err error)
  GetVersion() (r string, err error)
  // Parameters:
  //  - Session
  StartHeapProfile(session TSessionId) (err error)
  // Parameters:
  //  - Session
  StopHeapProfile(session TSessionId) (err error)
  // Parameters:
  //  - Session
  GetHeapProfile(session TSessionId) (r string, err error)
  // Parameters:
  //  - Session
  GetMemoryGpu(session TSessionId) (r string, err error)
  // Parameters:
  //  - Session
  GetMemorySummary(session TSessionId) (r *TMemorySummary, err error)
  // Parameters:
  //  - Session
  ClearCPUMemory(session TSessionId) (err error)
  // Parameters:
  //  - Session
  ClearGpuMemory(session TSessionId) (err error)
  // Parameters:
  //  - Session
  //  - Query
  //  - ColumnFormat
  //  - Nonce
  //  - FirstN
  SqlExecute(session TSessionId, query string, column_format bool, nonce string, first_n int32) (r *TQueryResult_, err error)
  // Parameters:
  //  - Session
  //  - Query
  //  - FirstN
  SqlExecuteDf(session TSessionId, query string, first_n int32) (r *TGpuDataFrame, err error)
  // Parameters:
  //  - Session
  //  - Query
  //  - DeviceID
  //  - FirstN
  SqlExecuteGpudf(session TSessionId, query string, device_id int32, first_n int32) (r *TGpuDataFrame, err error)
  // Parameters:
  //  - Session
  Interrupt(session TSessionId) (err error)
  // Parameters:
  //  - Session
  //  - Query
  SqlValidate(session TSessionId, query string) (r TTableDescriptor, err error)
  // Parameters:
  //  - Session
  //  - Mode
  SetExecutionMode(session TSessionId, mode TExecuteMode) (err error)
  // Parameters:
  //  - Session
  //  - WidgetID
  //  - VegaJSON
  //  - CompressionLevel
  //  - Nonce
  RenderVega(session TSessionId, widget_id int64, vega_json string, compression_level int32, nonce string) (r *TRenderResult_, err error)
  // Parameters:
  //  - Session
  //  - WidgetID
  //  - Pixel
  //  - TableColNames
  //  - ColumnFormat
  //  - PixelRadius
  //  - Nonce
  GetResultRowForPixel(session TSessionId, widget_id int64, pixel *TPixel, table_col_names map[string][]string, column_format bool, pixelRadius int32, nonce string) (r *TPixelTableRowResult_, err error)
  // Parameters:
  //  - Session
  //  - ViewName
  GetFrontendView(session TSessionId, view_name string) (r *TFrontendView, err error)
  // Parameters:
  //  - Session
  GetFrontendViews(session TSessionId) (r []*TFrontendView, err error)
  // Parameters:
  //  - Session
  //  - ViewName
  //  - ViewState
  //  - ImageHash
  //  - ViewMetadata
  CreateFrontendView(session TSessionId, view_name string, view_state string, image_hash string, view_metadata string) (err error)
  // Parameters:
  //  - Session
  //  - ViewName
  DeleteFrontendView(session TSessionId, view_name string) (err error)
  // Parameters:
  //  - Session
  //  - Link
  GetLinkView(session TSessionId, link string) (r *TFrontendView, err error)
  // Parameters:
  //  - Session
  //  - ViewState
  //  - ViewMetadata
  CreateLink(session TSessionId, view_state string, view_metadata string) (r string, err error)
  // Parameters:
  //  - Session
  //  - TableName
  //  - Rows
  LoadTableBinary(session TSessionId, table_name string, rows []*TRow) (err error)
  // Parameters:
  //  - Session
  //  - TableName
  //  - Rows
  LoadTable(session TSessionId, table_name string, rows []*TStringRow) (err error)
  // Parameters:
  //  - Session
  //  - FileName
  //  - CopyParams
  DetectColumnTypes(session TSessionId, file_name string, copy_params *TCopyParams) (r *TDetectResult_, err error)
  // Parameters:
  //  - Session
  //  - TableName
  //  - RowDesc
  //  - TableType
  CreateTable(session TSessionId, table_name string, row_desc TRowDescriptor, table_type TTableType) (err error)
  // Parameters:
  //  - Session
  //  - TableName
  //  - FileName
  //  - CopyParams
  ImportTable(session TSessionId, table_name string, file_name string, copy_params *TCopyParams) (err error)
  // Parameters:
  //  - Session
  //  - TableName
  //  - FileName
  //  - CopyParams
  //  - RowDesc
  ImportGeoTable(session TSessionId, table_name string, file_name string, copy_params *TCopyParams, row_desc TRowDescriptor) (err error)
  // Parameters:
  //  - Session
  //  - ImportID
  ImportTableStatus(session TSessionId, import_id string) (r *TImportStatus, err error)
  // Parameters:
  //  - Session
  //  - QueryRa
  //  - JustExplain
  StartQuery(session TSessionId, query_ra string, just_explain bool) (r *TPendingQuery, err error)
  // Parameters:
  //  - PendingQuery
  ExecuteFirstStep(pending_query *TPendingQuery) (r *TStepResult_, err error)
  // Parameters:
  //  - SerializedRows
  //  - RowDesc
  //  - QueryID
  BroadcastSerializedRows(serialized_rows string, row_desc TRowDescriptor, query_id TQueryId) (err error)
  // Parameters:
  //  - Session
  //  - WidgetID
  //  - NodeIdx
  //  - VegaJSON
  RenderVegaRawPixels(session TSessionId, widget_id int64, node_idx int16, vega_json string) (r *TRawPixelDataResult_, err error)
  // Parameters:
  //  - Session
  //  - InsertData
  InsertData(session TSessionId, insert_data *TInsertData) (err error)
  // Parameters:
  //  - Session
  //  - TableName
  GetTableDescriptor(session TSessionId, table_name string) (r TTableDescriptor, err error)
  // Parameters:
  //  - Session
  //  - TableName
  GetRowDescriptor(session TSessionId, table_name string) (r TRowDescriptor, err error)
  // Parameters:
  //  - Session
  //  - Query
  //  - RenderType
  //  - Nonce
  Render(session TSessionId, query string, render_type string, nonce string) (r *TRenderResult_, err error)
  // Parameters:
  //  - Session
  //  - WidgetID
  //  - Pixels
  //  - TableName
  //  - ColNames
  //  - ColumnFormat
  //  - Nonce
  GetRowsForPixels(session TSessionId, widget_id int64, pixels []*TPixel, table_name string, col_names []string, column_format bool, nonce string) (r *TPixelResult_, err error)
  // Parameters:
  //  - Session
  //  - WidgetID
  //  - Pixel
  //  - TableName
  //  - ColNames
  //  - ColumnFormat
  //  - PixelRadius
  //  - Nonce
  GetRowForPixel(session TSessionId, widget_id int64, pixel *TPixel, table_name string, col_names []string, column_format bool, pixelRadius int32, nonce string) (r *TPixelRowResult_, err error)
}

type MapDClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewMapDClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MapDClient {
  return &MapDClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewMapDClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MapDClient {
  return &MapDClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - User
//  - Passwd
//  - Dbname
func (p *MapDClient) Connect(user string, passwd string, dbname string) (r TSessionId, err error) {
  if err = p.sendConnect(user, passwd, dbname); err != nil { return }
  return p.recvConnect()
}

func (p *MapDClient) sendConnect(user string, passwd string, dbname string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("connect", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDConnectArgs{
  User : user,
  Passwd : passwd,
  Dbname : dbname,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvConnect() (value TSessionId, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "connect" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "connect failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "connect failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error23 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error24 error
    error24, err = error23.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error24
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "connect failed: invalid message type")
    return
  }
  result := MapDConnectResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
func (p *MapDClient) Disconnect(session TSessionId) (err error) {
  if err = p.sendDisconnect(session); err != nil { return }
  return p.recvDisconnect()
}

func (p *MapDClient) sendDisconnect(session TSessionId)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("disconnect", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDDisconnectArgs{
  Session : session,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvDisconnect() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "disconnect" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "disconnect failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "disconnect failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error25 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error26 error
    error26, err = error25.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error26
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "disconnect failed: invalid message type")
    return
  }
  result := MapDDisconnectResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  return
}

// Parameters:
//  - Session
func (p *MapDClient) GetServerStatus(session TSessionId) (r *TServerStatus, err error) {
  if err = p.sendGetServerStatus(session); err != nil { return }
  return p.recvGetServerStatus()
}

func (p *MapDClient) sendGetServerStatus(session TSessionId)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_server_status", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDGetServerStatusArgs{
  Session : session,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvGetServerStatus() (value *TServerStatus, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_server_status" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_server_status failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_server_status failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error27 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error28 error
    error28, err = error27.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error28
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_server_status failed: invalid message type")
    return
  }
  result := MapDGetServerStatusResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
func (p *MapDClient) GetTables(session TSessionId) (r []string, err error) {
  if err = p.sendGetTables(session); err != nil { return }
  return p.recvGetTables()
}

func (p *MapDClient) sendGetTables(session TSessionId)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_tables", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDGetTablesArgs{
  Session : session,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvGetTables() (value []string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_tables" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_tables failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_tables failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error29 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error30 error
    error30, err = error29.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error30
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_tables failed: invalid message type")
    return
  }
  result := MapDGetTablesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
//  - TableName
func (p *MapDClient) GetTableDetails(session TSessionId, table_name string) (r *TTableDetails, err error) {
  if err = p.sendGetTableDetails(session, table_name); err != nil { return }
  return p.recvGetTableDetails()
}

func (p *MapDClient) sendGetTableDetails(session TSessionId, table_name string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_table_details", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDGetTableDetailsArgs{
  Session : session,
  TableName : table_name,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvGetTableDetails() (value *TTableDetails, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_table_details" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_table_details failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_table_details failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error31 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error32 error
    error32, err = error31.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error32
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_table_details failed: invalid message type")
    return
  }
  result := MapDGetTableDetailsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
func (p *MapDClient) GetUsers(session TSessionId) (r []string, err error) {
  if err = p.sendGetUsers(session); err != nil { return }
  return p.recvGetUsers()
}

func (p *MapDClient) sendGetUsers(session TSessionId)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_users", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDGetUsersArgs{
  Session : session,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvGetUsers() (value []string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_users" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_users failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_users failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error33 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error34 error
    error34, err = error33.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error34
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_users failed: invalid message type")
    return
  }
  result := MapDGetUsersResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
func (p *MapDClient) GetDatabases(session TSessionId) (r []*TDBInfo, err error) {
  if err = p.sendGetDatabases(session); err != nil { return }
  return p.recvGetDatabases()
}

func (p *MapDClient) sendGetDatabases(session TSessionId)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_databases", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDGetDatabasesArgs{
  Session : session,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvGetDatabases() (value []*TDBInfo, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_databases" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_databases failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_databases failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error35 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error36 error
    error36, err = error35.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error36
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_databases failed: invalid message type")
    return
  }
  result := MapDGetDatabasesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

func (p *MapDClient) GetVersion() (r string, err error) {
  if err = p.sendGetVersion(); err != nil { return }
  return p.recvGetVersion()
}

func (p *MapDClient) sendGetVersion()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_version", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDGetVersionArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvGetVersion() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_version" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_version failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_version failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error37 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error38 error
    error38, err = error37.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error38
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_version failed: invalid message type")
    return
  }
  result := MapDGetVersionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
func (p *MapDClient) StartHeapProfile(session TSessionId) (err error) {
  if err = p.sendStartHeapProfile(session); err != nil { return }
  return p.recvStartHeapProfile()
}

func (p *MapDClient) sendStartHeapProfile(session TSessionId)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("start_heap_profile", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDStartHeapProfileArgs{
  Session : session,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvStartHeapProfile() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "start_heap_profile" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "start_heap_profile failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "start_heap_profile failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error39 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error40 error
    error40, err = error39.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error40
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "start_heap_profile failed: invalid message type")
    return
  }
  result := MapDStartHeapProfileResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  return
}

// Parameters:
//  - Session
func (p *MapDClient) StopHeapProfile(session TSessionId) (err error) {
  if err = p.sendStopHeapProfile(session); err != nil { return }
  return p.recvStopHeapProfile()
}

func (p *MapDClient) sendStopHeapProfile(session TSessionId)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("stop_heap_profile", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDStopHeapProfileArgs{
  Session : session,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvStopHeapProfile() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "stop_heap_profile" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "stop_heap_profile failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "stop_heap_profile failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error41 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error42 error
    error42, err = error41.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error42
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "stop_heap_profile failed: invalid message type")
    return
  }
  result := MapDStopHeapProfileResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  return
}

// Parameters:
//  - Session
func (p *MapDClient) GetHeapProfile(session TSessionId) (r string, err error) {
  if err = p.sendGetHeapProfile(session); err != nil { return }
  return p.recvGetHeapProfile()
}

func (p *MapDClient) sendGetHeapProfile(session TSessionId)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_heap_profile", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDGetHeapProfileArgs{
  Session : session,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvGetHeapProfile() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_heap_profile" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_heap_profile failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_heap_profile failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error43 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error44 error
    error44, err = error43.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error44
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_heap_profile failed: invalid message type")
    return
  }
  result := MapDGetHeapProfileResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
func (p *MapDClient) GetMemoryGpu(session TSessionId) (r string, err error) {
  if err = p.sendGetMemoryGpu(session); err != nil { return }
  return p.recvGetMemoryGpu()
}

func (p *MapDClient) sendGetMemoryGpu(session TSessionId)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_memory_gpu", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDGetMemoryGpuArgs{
  Session : session,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvGetMemoryGpu() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_memory_gpu" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_memory_gpu failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_memory_gpu failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error45 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error46 error
    error46, err = error45.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error46
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_memory_gpu failed: invalid message type")
    return
  }
  result := MapDGetMemoryGpuResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
func (p *MapDClient) GetMemorySummary(session TSessionId) (r *TMemorySummary, err error) {
  if err = p.sendGetMemorySummary(session); err != nil { return }
  return p.recvGetMemorySummary()
}

func (p *MapDClient) sendGetMemorySummary(session TSessionId)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_memory_summary", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDGetMemorySummaryArgs{
  Session : session,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvGetMemorySummary() (value *TMemorySummary, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_memory_summary" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_memory_summary failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_memory_summary failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error47 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error48 error
    error48, err = error47.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error48
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_memory_summary failed: invalid message type")
    return
  }
  result := MapDGetMemorySummaryResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
func (p *MapDClient) ClearCPUMemory(session TSessionId) (err error) {
  if err = p.sendClearCPUMemory(session); err != nil { return }
  return p.recvClearCPUMemory()
}

func (p *MapDClient) sendClearCPUMemory(session TSessionId)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("clear_cpu_memory", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDClearCPUMemoryArgs{
  Session : session,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvClearCPUMemory() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "clear_cpu_memory" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "clear_cpu_memory failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "clear_cpu_memory failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error49 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error50 error
    error50, err = error49.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error50
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "clear_cpu_memory failed: invalid message type")
    return
  }
  result := MapDClearCPUMemoryResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  return
}

// Parameters:
//  - Session
func (p *MapDClient) ClearGpuMemory(session TSessionId) (err error) {
  if err = p.sendClearGpuMemory(session); err != nil { return }
  return p.recvClearGpuMemory()
}

func (p *MapDClient) sendClearGpuMemory(session TSessionId)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("clear_gpu_memory", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDClearGpuMemoryArgs{
  Session : session,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvClearGpuMemory() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "clear_gpu_memory" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "clear_gpu_memory failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "clear_gpu_memory failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error51 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error52 error
    error52, err = error51.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error52
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "clear_gpu_memory failed: invalid message type")
    return
  }
  result := MapDClearGpuMemoryResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  return
}

// Parameters:
//  - Session
//  - Query
//  - ColumnFormat
//  - Nonce
//  - FirstN
func (p *MapDClient) SqlExecute(session TSessionId, query string, column_format bool, nonce string, first_n int32) (r *TQueryResult_, err error) {
  if err = p.sendSqlExecute(session, query, column_format, nonce, first_n); err != nil { return }
  return p.recvSqlExecute()
}

func (p *MapDClient) sendSqlExecute(session TSessionId, query string, column_format bool, nonce string, first_n int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("sql_execute", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDSqlExecuteArgs{
  Session : session,
  Query : query,
  ColumnFormat : column_format,
  Nonce : nonce,
  FirstN : first_n,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvSqlExecute() (value *TQueryResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "sql_execute" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sql_execute failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sql_execute failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error53 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error54 error
    error54, err = error53.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error54
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sql_execute failed: invalid message type")
    return
  }
  result := MapDSqlExecuteResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
//  - Query
//  - FirstN
func (p *MapDClient) SqlExecuteDf(session TSessionId, query string, first_n int32) (r *TGpuDataFrame, err error) {
  if err = p.sendSqlExecuteDf(session, query, first_n); err != nil { return }
  return p.recvSqlExecuteDf()
}

func (p *MapDClient) sendSqlExecuteDf(session TSessionId, query string, first_n int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("sql_execute_df", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDSqlExecuteDfArgs{
  Session : session,
  Query : query,
  FirstN : first_n,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvSqlExecuteDf() (value *TGpuDataFrame, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "sql_execute_df" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sql_execute_df failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sql_execute_df failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error55 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error56 error
    error56, err = error55.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error56
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sql_execute_df failed: invalid message type")
    return
  }
  result := MapDSqlExecuteDfResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
//  - Query
//  - DeviceID
//  - FirstN
func (p *MapDClient) SqlExecuteGpudf(session TSessionId, query string, device_id int32, first_n int32) (r *TGpuDataFrame, err error) {
  if err = p.sendSqlExecuteGpudf(session, query, device_id, first_n); err != nil { return }
  return p.recvSqlExecuteGpudf()
}

func (p *MapDClient) sendSqlExecuteGpudf(session TSessionId, query string, device_id int32, first_n int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("sql_execute_gpudf", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDSqlExecuteGpudfArgs{
  Session : session,
  Query : query,
  DeviceID : device_id,
  FirstN : first_n,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvSqlExecuteGpudf() (value *TGpuDataFrame, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "sql_execute_gpudf" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sql_execute_gpudf failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sql_execute_gpudf failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error57 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error58 error
    error58, err = error57.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error58
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sql_execute_gpudf failed: invalid message type")
    return
  }
  result := MapDSqlExecuteGpudfResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
func (p *MapDClient) Interrupt(session TSessionId) (err error) {
  if err = p.sendInterrupt(session); err != nil { return }
  return p.recvInterrupt()
}

func (p *MapDClient) sendInterrupt(session TSessionId)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("interrupt", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDInterruptArgs{
  Session : session,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvInterrupt() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "interrupt" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "interrupt failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "interrupt failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error59 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error60 error
    error60, err = error59.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error60
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "interrupt failed: invalid message type")
    return
  }
  result := MapDInterruptResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  return
}

// Parameters:
//  - Session
//  - Query
func (p *MapDClient) SqlValidate(session TSessionId, query string) (r TTableDescriptor, err error) {
  if err = p.sendSqlValidate(session, query); err != nil { return }
  return p.recvSqlValidate()
}

func (p *MapDClient) sendSqlValidate(session TSessionId, query string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("sql_validate", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDSqlValidateArgs{
  Session : session,
  Query : query,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvSqlValidate() (value TTableDescriptor, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "sql_validate" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sql_validate failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sql_validate failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error61 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error62 error
    error62, err = error61.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error62
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sql_validate failed: invalid message type")
    return
  }
  result := MapDSqlValidateResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
//  - Mode
func (p *MapDClient) SetExecutionMode(session TSessionId, mode TExecuteMode) (err error) {
  if err = p.sendSetExecutionMode(session, mode); err != nil { return }
  return p.recvSetExecutionMode()
}

func (p *MapDClient) sendSetExecutionMode(session TSessionId, mode TExecuteMode)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("set_execution_mode", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDSetExecutionModeArgs{
  Session : session,
  Mode : mode,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvSetExecutionMode() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "set_execution_mode" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "set_execution_mode failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "set_execution_mode failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error63 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error64 error
    error64, err = error63.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error64
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "set_execution_mode failed: invalid message type")
    return
  }
  result := MapDSetExecutionModeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  return
}

// Parameters:
//  - Session
//  - WidgetID
//  - VegaJSON
//  - CompressionLevel
//  - Nonce
func (p *MapDClient) RenderVega(session TSessionId, widget_id int64, vega_json string, compression_level int32, nonce string) (r *TRenderResult_, err error) {
  if err = p.sendRenderVega(session, widget_id, vega_json, compression_level, nonce); err != nil { return }
  return p.recvRenderVega()
}

func (p *MapDClient) sendRenderVega(session TSessionId, widget_id int64, vega_json string, compression_level int32, nonce string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("render_vega", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDRenderVegaArgs{
  Session : session,
  WidgetID : widget_id,
  VegaJSON : vega_json,
  CompressionLevel : compression_level,
  Nonce : nonce,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvRenderVega() (value *TRenderResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "render_vega" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "render_vega failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "render_vega failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error65 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error66 error
    error66, err = error65.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error66
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "render_vega failed: invalid message type")
    return
  }
  result := MapDRenderVegaResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
//  - WidgetID
//  - Pixel
//  - TableColNames
//  - ColumnFormat
//  - PixelRadius
//  - Nonce
func (p *MapDClient) GetResultRowForPixel(session TSessionId, widget_id int64, pixel *TPixel, table_col_names map[string][]string, column_format bool, pixelRadius int32, nonce string) (r *TPixelTableRowResult_, err error) {
  if err = p.sendGetResultRowForPixel(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce); err != nil { return }
  return p.recvGetResultRowForPixel()
}

func (p *MapDClient) sendGetResultRowForPixel(session TSessionId, widget_id int64, pixel *TPixel, table_col_names map[string][]string, column_format bool, pixelRadius int32, nonce string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_result_row_for_pixel", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDGetResultRowForPixelArgs{
  Session : session,
  WidgetID : widget_id,
  Pixel : pixel,
  TableColNames : table_col_names,
  ColumnFormat : column_format,
  PixelRadius : pixelRadius,
  Nonce : nonce,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvGetResultRowForPixel() (value *TPixelTableRowResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_result_row_for_pixel" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_result_row_for_pixel failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_result_row_for_pixel failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error67 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error68 error
    error68, err = error67.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error68
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_result_row_for_pixel failed: invalid message type")
    return
  }
  result := MapDGetResultRowForPixelResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
//  - ViewName
func (p *MapDClient) GetFrontendView(session TSessionId, view_name string) (r *TFrontendView, err error) {
  if err = p.sendGetFrontendView(session, view_name); err != nil { return }
  return p.recvGetFrontendView()
}

func (p *MapDClient) sendGetFrontendView(session TSessionId, view_name string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_frontend_view", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDGetFrontendViewArgs{
  Session : session,
  ViewName : view_name,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvGetFrontendView() (value *TFrontendView, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_frontend_view" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_frontend_view failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_frontend_view failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error69 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error70 error
    error70, err = error69.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error70
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_frontend_view failed: invalid message type")
    return
  }
  result := MapDGetFrontendViewResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
func (p *MapDClient) GetFrontendViews(session TSessionId) (r []*TFrontendView, err error) {
  if err = p.sendGetFrontendViews(session); err != nil { return }
  return p.recvGetFrontendViews()
}

func (p *MapDClient) sendGetFrontendViews(session TSessionId)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_frontend_views", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDGetFrontendViewsArgs{
  Session : session,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvGetFrontendViews() (value []*TFrontendView, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_frontend_views" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_frontend_views failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_frontend_views failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error71 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error72 error
    error72, err = error71.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error72
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_frontend_views failed: invalid message type")
    return
  }
  result := MapDGetFrontendViewsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
//  - ViewName
//  - ViewState
//  - ImageHash
//  - ViewMetadata
func (p *MapDClient) CreateFrontendView(session TSessionId, view_name string, view_state string, image_hash string, view_metadata string) (err error) {
  if err = p.sendCreateFrontendView(session, view_name, view_state, image_hash, view_metadata); err != nil { return }
  return p.recvCreateFrontendView()
}

func (p *MapDClient) sendCreateFrontendView(session TSessionId, view_name string, view_state string, image_hash string, view_metadata string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("create_frontend_view", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDCreateFrontendViewArgs{
  Session : session,
  ViewName : view_name,
  ViewState : view_state,
  ImageHash : image_hash,
  ViewMetadata : view_metadata,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvCreateFrontendView() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "create_frontend_view" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "create_frontend_view failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_frontend_view failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error73 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error74 error
    error74, err = error73.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error74
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "create_frontend_view failed: invalid message type")
    return
  }
  result := MapDCreateFrontendViewResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  return
}

// Parameters:
//  - Session
//  - ViewName
func (p *MapDClient) DeleteFrontendView(session TSessionId, view_name string) (err error) {
  if err = p.sendDeleteFrontendView(session, view_name); err != nil { return }
  return p.recvDeleteFrontendView()
}

func (p *MapDClient) sendDeleteFrontendView(session TSessionId, view_name string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("delete_frontend_view", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDDeleteFrontendViewArgs{
  Session : session,
  ViewName : view_name,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvDeleteFrontendView() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "delete_frontend_view" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "delete_frontend_view failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "delete_frontend_view failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error75 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error76 error
    error76, err = error75.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error76
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "delete_frontend_view failed: invalid message type")
    return
  }
  result := MapDDeleteFrontendViewResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  return
}

// Parameters:
//  - Session
//  - Link
func (p *MapDClient) GetLinkView(session TSessionId, link string) (r *TFrontendView, err error) {
  if err = p.sendGetLinkView(session, link); err != nil { return }
  return p.recvGetLinkView()
}

func (p *MapDClient) sendGetLinkView(session TSessionId, link string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_link_view", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDGetLinkViewArgs{
  Session : session,
  Link : link,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvGetLinkView() (value *TFrontendView, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_link_view" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_link_view failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_link_view failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error77 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error78 error
    error78, err = error77.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error78
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_link_view failed: invalid message type")
    return
  }
  result := MapDGetLinkViewResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
//  - ViewState
//  - ViewMetadata
func (p *MapDClient) CreateLink(session TSessionId, view_state string, view_metadata string) (r string, err error) {
  if err = p.sendCreateLink(session, view_state, view_metadata); err != nil { return }
  return p.recvCreateLink()
}

func (p *MapDClient) sendCreateLink(session TSessionId, view_state string, view_metadata string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("create_link", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDCreateLinkArgs{
  Session : session,
  ViewState : view_state,
  ViewMetadata : view_metadata,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvCreateLink() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "create_link" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "create_link failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_link failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error79 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error80 error
    error80, err = error79.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error80
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "create_link failed: invalid message type")
    return
  }
  result := MapDCreateLinkResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
//  - TableName
//  - Rows
func (p *MapDClient) LoadTableBinary(session TSessionId, table_name string, rows []*TRow) (err error) {
  if err = p.sendLoadTableBinary(session, table_name, rows); err != nil { return }
  return p.recvLoadTableBinary()
}

func (p *MapDClient) sendLoadTableBinary(session TSessionId, table_name string, rows []*TRow)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("load_table_binary", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDLoadTableBinaryArgs{
  Session : session,
  TableName : table_name,
  Rows : rows,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvLoadTableBinary() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "load_table_binary" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "load_table_binary failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "load_table_binary failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error81 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error82 error
    error82, err = error81.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error82
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "load_table_binary failed: invalid message type")
    return
  }
  result := MapDLoadTableBinaryResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  return
}

// Parameters:
//  - Session
//  - TableName
//  - Rows
func (p *MapDClient) LoadTable(session TSessionId, table_name string, rows []*TStringRow) (err error) {
  if err = p.sendLoadTable(session, table_name, rows); err != nil { return }
  return p.recvLoadTable()
}

func (p *MapDClient) sendLoadTable(session TSessionId, table_name string, rows []*TStringRow)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("load_table", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDLoadTableArgs{
  Session : session,
  TableName : table_name,
  Rows : rows,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvLoadTable() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "load_table" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "load_table failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "load_table failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error83 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error84 error
    error84, err = error83.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error84
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "load_table failed: invalid message type")
    return
  }
  result := MapDLoadTableResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  return
}

// Parameters:
//  - Session
//  - FileName
//  - CopyParams
func (p *MapDClient) DetectColumnTypes(session TSessionId, file_name string, copy_params *TCopyParams) (r *TDetectResult_, err error) {
  if err = p.sendDetectColumnTypes(session, file_name, copy_params); err != nil { return }
  return p.recvDetectColumnTypes()
}

func (p *MapDClient) sendDetectColumnTypes(session TSessionId, file_name string, copy_params *TCopyParams)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("detect_column_types", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDDetectColumnTypesArgs{
  Session : session,
  FileName : file_name,
  CopyParams : copy_params,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvDetectColumnTypes() (value *TDetectResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "detect_column_types" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "detect_column_types failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "detect_column_types failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error85 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error86 error
    error86, err = error85.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error86
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "detect_column_types failed: invalid message type")
    return
  }
  result := MapDDetectColumnTypesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
//  - TableName
//  - RowDesc
//  - TableType
func (p *MapDClient) CreateTable(session TSessionId, table_name string, row_desc TRowDescriptor, table_type TTableType) (err error) {
  if err = p.sendCreateTable(session, table_name, row_desc, table_type); err != nil { return }
  return p.recvCreateTable()
}

func (p *MapDClient) sendCreateTable(session TSessionId, table_name string, row_desc TRowDescriptor, table_type TTableType)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("create_table", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDCreateTableArgs{
  Session : session,
  TableName : table_name,
  RowDesc : row_desc,
  TableType : table_type,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvCreateTable() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "create_table" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "create_table failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_table failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error87 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error88 error
    error88, err = error87.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error88
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "create_table failed: invalid message type")
    return
  }
  result := MapDCreateTableResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  return
}

// Parameters:
//  - Session
//  - TableName
//  - FileName
//  - CopyParams
func (p *MapDClient) ImportTable(session TSessionId, table_name string, file_name string, copy_params *TCopyParams) (err error) {
  if err = p.sendImportTable(session, table_name, file_name, copy_params); err != nil { return }
  return p.recvImportTable()
}

func (p *MapDClient) sendImportTable(session TSessionId, table_name string, file_name string, copy_params *TCopyParams)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("import_table", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDImportTableArgs{
  Session : session,
  TableName : table_name,
  FileName : file_name,
  CopyParams : copy_params,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvImportTable() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "import_table" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "import_table failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "import_table failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error89 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error90 error
    error90, err = error89.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error90
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "import_table failed: invalid message type")
    return
  }
  result := MapDImportTableResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  return
}

// Parameters:
//  - Session
//  - TableName
//  - FileName
//  - CopyParams
//  - RowDesc
func (p *MapDClient) ImportGeoTable(session TSessionId, table_name string, file_name string, copy_params *TCopyParams, row_desc TRowDescriptor) (err error) {
  if err = p.sendImportGeoTable(session, table_name, file_name, copy_params, row_desc); err != nil { return }
  return p.recvImportGeoTable()
}

func (p *MapDClient) sendImportGeoTable(session TSessionId, table_name string, file_name string, copy_params *TCopyParams, row_desc TRowDescriptor)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("import_geo_table", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDImportGeoTableArgs{
  Session : session,
  TableName : table_name,
  FileName : file_name,
  CopyParams : copy_params,
  RowDesc : row_desc,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvImportGeoTable() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "import_geo_table" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "import_geo_table failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "import_geo_table failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error91 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error92 error
    error92, err = error91.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error92
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "import_geo_table failed: invalid message type")
    return
  }
  result := MapDImportGeoTableResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  return
}

// Parameters:
//  - Session
//  - ImportID
func (p *MapDClient) ImportTableStatus(session TSessionId, import_id string) (r *TImportStatus, err error) {
  if err = p.sendImportTableStatus(session, import_id); err != nil { return }
  return p.recvImportTableStatus()
}

func (p *MapDClient) sendImportTableStatus(session TSessionId, import_id string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("import_table_status", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDImportTableStatusArgs{
  Session : session,
  ImportID : import_id,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvImportTableStatus() (value *TImportStatus, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "import_table_status" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "import_table_status failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "import_table_status failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error93 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error94 error
    error94, err = error93.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error94
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "import_table_status failed: invalid message type")
    return
  }
  result := MapDImportTableStatusResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
//  - QueryRa
//  - JustExplain
func (p *MapDClient) StartQuery(session TSessionId, query_ra string, just_explain bool) (r *TPendingQuery, err error) {
  if err = p.sendStartQuery(session, query_ra, just_explain); err != nil { return }
  return p.recvStartQuery()
}

func (p *MapDClient) sendStartQuery(session TSessionId, query_ra string, just_explain bool)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("start_query", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDStartQueryArgs{
  Session : session,
  QueryRa : query_ra,
  JustExplain : just_explain,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvStartQuery() (value *TPendingQuery, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "start_query" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "start_query failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "start_query failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error95 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error96 error
    error96, err = error95.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error96
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "start_query failed: invalid message type")
    return
  }
  result := MapDStartQueryResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - PendingQuery
func (p *MapDClient) ExecuteFirstStep(pending_query *TPendingQuery) (r *TStepResult_, err error) {
  if err = p.sendExecuteFirstStep(pending_query); err != nil { return }
  return p.recvExecuteFirstStep()
}

func (p *MapDClient) sendExecuteFirstStep(pending_query *TPendingQuery)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("execute_first_step", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDExecuteFirstStepArgs{
  PendingQuery : pending_query,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvExecuteFirstStep() (value *TStepResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "execute_first_step" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "execute_first_step failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "execute_first_step failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error97 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error98 error
    error98, err = error97.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error98
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "execute_first_step failed: invalid message type")
    return
  }
  result := MapDExecuteFirstStepResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - SerializedRows
//  - RowDesc
//  - QueryID
func (p *MapDClient) BroadcastSerializedRows(serialized_rows string, row_desc TRowDescriptor, query_id TQueryId) (err error) {
  if err = p.sendBroadcastSerializedRows(serialized_rows, row_desc, query_id); err != nil { return }
  return p.recvBroadcastSerializedRows()
}

func (p *MapDClient) sendBroadcastSerializedRows(serialized_rows string, row_desc TRowDescriptor, query_id TQueryId)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("broadcast_serialized_rows", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDBroadcastSerializedRowsArgs{
  SerializedRows : serialized_rows,
  RowDesc : row_desc,
  QueryID : query_id,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvBroadcastSerializedRows() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "broadcast_serialized_rows" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "broadcast_serialized_rows failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "broadcast_serialized_rows failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error99 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error100 error
    error100, err = error99.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error100
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "broadcast_serialized_rows failed: invalid message type")
    return
  }
  result := MapDBroadcastSerializedRowsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  return
}

// Parameters:
//  - Session
//  - WidgetID
//  - NodeIdx
//  - VegaJSON
func (p *MapDClient) RenderVegaRawPixels(session TSessionId, widget_id int64, node_idx int16, vega_json string) (r *TRawPixelDataResult_, err error) {
  if err = p.sendRenderVegaRawPixels(session, widget_id, node_idx, vega_json); err != nil { return }
  return p.recvRenderVegaRawPixels()
}

func (p *MapDClient) sendRenderVegaRawPixels(session TSessionId, widget_id int64, node_idx int16, vega_json string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("render_vega_raw_pixels", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDRenderVegaRawPixelsArgs{
  Session : session,
  WidgetID : widget_id,
  NodeIdx : node_idx,
  VegaJSON : vega_json,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvRenderVegaRawPixels() (value *TRawPixelDataResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "render_vega_raw_pixels" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "render_vega_raw_pixels failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "render_vega_raw_pixels failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error101 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error102 error
    error102, err = error101.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error102
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "render_vega_raw_pixels failed: invalid message type")
    return
  }
  result := MapDRenderVegaRawPixelsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
//  - InsertData
func (p *MapDClient) InsertData(session TSessionId, insert_data *TInsertData) (err error) {
  if err = p.sendInsertData(session, insert_data); err != nil { return }
  return p.recvInsertData()
}

func (p *MapDClient) sendInsertData(session TSessionId, insert_data *TInsertData)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("insert_data", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDInsertDataArgs{
  Session : session,
  InsertData : insert_data,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvInsertData() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "insert_data" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "insert_data failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "insert_data failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error103 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error104 error
    error104, err = error103.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error104
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "insert_data failed: invalid message type")
    return
  }
  result := MapDInsertDataResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  return
}

// Parameters:
//  - Session
//  - TableName
func (p *MapDClient) GetTableDescriptor(session TSessionId, table_name string) (r TTableDescriptor, err error) {
  if err = p.sendGetTableDescriptor(session, table_name); err != nil { return }
  return p.recvGetTableDescriptor()
}

func (p *MapDClient) sendGetTableDescriptor(session TSessionId, table_name string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_table_descriptor", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDGetTableDescriptorArgs{
  Session : session,
  TableName : table_name,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvGetTableDescriptor() (value TTableDescriptor, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_table_descriptor" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_table_descriptor failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_table_descriptor failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error105 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error106 error
    error106, err = error105.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error106
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_table_descriptor failed: invalid message type")
    return
  }
  result := MapDGetTableDescriptorResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
//  - TableName
func (p *MapDClient) GetRowDescriptor(session TSessionId, table_name string) (r TRowDescriptor, err error) {
  if err = p.sendGetRowDescriptor(session, table_name); err != nil { return }
  return p.recvGetRowDescriptor()
}

func (p *MapDClient) sendGetRowDescriptor(session TSessionId, table_name string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_row_descriptor", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDGetRowDescriptorArgs{
  Session : session,
  TableName : table_name,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvGetRowDescriptor() (value TRowDescriptor, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_row_descriptor" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_row_descriptor failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_row_descriptor failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error107 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error108 error
    error108, err = error107.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error108
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_row_descriptor failed: invalid message type")
    return
  }
  result := MapDGetRowDescriptorResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
//  - Query
//  - RenderType
//  - Nonce
func (p *MapDClient) Render(session TSessionId, query string, render_type string, nonce string) (r *TRenderResult_, err error) {
  if err = p.sendRender(session, query, render_type, nonce); err != nil { return }
  return p.recvRender()
}

func (p *MapDClient) sendRender(session TSessionId, query string, render_type string, nonce string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("render", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDRenderArgs{
  Session : session,
  Query : query,
  RenderType : render_type,
  Nonce : nonce,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvRender() (value *TRenderResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "render" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "render failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "render failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error109 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error110 error
    error110, err = error109.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error110
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "render failed: invalid message type")
    return
  }
  result := MapDRenderResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
//  - WidgetID
//  - Pixels
//  - TableName
//  - ColNames
//  - ColumnFormat
//  - Nonce
func (p *MapDClient) GetRowsForPixels(session TSessionId, widget_id int64, pixels []*TPixel, table_name string, col_names []string, column_format bool, nonce string) (r *TPixelResult_, err error) {
  if err = p.sendGetRowsForPixels(session, widget_id, pixels, table_name, col_names, column_format, nonce); err != nil { return }
  return p.recvGetRowsForPixels()
}

func (p *MapDClient) sendGetRowsForPixels(session TSessionId, widget_id int64, pixels []*TPixel, table_name string, col_names []string, column_format bool, nonce string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_rows_for_pixels", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDGetRowsForPixelsArgs{
  Session : session,
  WidgetID : widget_id,
  Pixels : pixels,
  TableName : table_name,
  ColNames : col_names,
  ColumnFormat : column_format,
  Nonce : nonce,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvGetRowsForPixels() (value *TPixelResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_rows_for_pixels" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_rows_for_pixels failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_rows_for_pixels failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error111 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error112 error
    error112, err = error111.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error112
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_rows_for_pixels failed: invalid message type")
    return
  }
  result := MapDGetRowsForPixelsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Session
//  - WidgetID
//  - Pixel
//  - TableName
//  - ColNames
//  - ColumnFormat
//  - PixelRadius
//  - Nonce
func (p *MapDClient) GetRowForPixel(session TSessionId, widget_id int64, pixel *TPixel, table_name string, col_names []string, column_format bool, pixelRadius int32, nonce string) (r *TPixelRowResult_, err error) {
  if err = p.sendGetRowForPixel(session, widget_id, pixel, table_name, col_names, column_format, pixelRadius, nonce); err != nil { return }
  return p.recvGetRowForPixel()
}

func (p *MapDClient) sendGetRowForPixel(session TSessionId, widget_id int64, pixel *TPixel, table_name string, col_names []string, column_format bool, pixelRadius int32, nonce string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_row_for_pixel", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MapDGetRowForPixelArgs{
  Session : session,
  WidgetID : widget_id,
  Pixel : pixel,
  TableName : table_name,
  ColNames : col_names,
  ColumnFormat : column_format,
  PixelRadius : pixelRadius,
  Nonce : nonce,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MapDClient) recvGetRowForPixel() (value *TPixelRowResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_row_for_pixel" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_row_for_pixel failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_row_for_pixel failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error113 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error114 error
    error114, err = error113.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error114
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_row_for_pixel failed: invalid message type")
    return
  }
  result := MapDGetRowForPixelResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}


type MapDProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler MapD
}

func (p *MapDProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MapDProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MapDProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMapDProcessor(handler MapD) *MapDProcessor {

  self115 := &MapDProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self115.processorMap["connect"] = &mapDProcessorConnect{handler:handler}
  self115.processorMap["disconnect"] = &mapDProcessorDisconnect{handler:handler}
  self115.processorMap["get_server_status"] = &mapDProcessorGetServerStatus{handler:handler}
  self115.processorMap["get_tables"] = &mapDProcessorGetTables{handler:handler}
  self115.processorMap["get_table_details"] = &mapDProcessorGetTableDetails{handler:handler}
  self115.processorMap["get_users"] = &mapDProcessorGetUsers{handler:handler}
  self115.processorMap["get_databases"] = &mapDProcessorGetDatabases{handler:handler}
  self115.processorMap["get_version"] = &mapDProcessorGetVersion{handler:handler}
  self115.processorMap["start_heap_profile"] = &mapDProcessorStartHeapProfile{handler:handler}
  self115.processorMap["stop_heap_profile"] = &mapDProcessorStopHeapProfile{handler:handler}
  self115.processorMap["get_heap_profile"] = &mapDProcessorGetHeapProfile{handler:handler}
  self115.processorMap["get_memory_gpu"] = &mapDProcessorGetMemoryGpu{handler:handler}
  self115.processorMap["get_memory_summary"] = &mapDProcessorGetMemorySummary{handler:handler}
  self115.processorMap["clear_cpu_memory"] = &mapDProcessorClearCPUMemory{handler:handler}
  self115.processorMap["clear_gpu_memory"] = &mapDProcessorClearGpuMemory{handler:handler}
  self115.processorMap["sql_execute"] = &mapDProcessorSqlExecute{handler:handler}
  self115.processorMap["sql_execute_df"] = &mapDProcessorSqlExecuteDf{handler:handler}
  self115.processorMap["sql_execute_gpudf"] = &mapDProcessorSqlExecuteGpudf{handler:handler}
  self115.processorMap["interrupt"] = &mapDProcessorInterrupt{handler:handler}
  self115.processorMap["sql_validate"] = &mapDProcessorSqlValidate{handler:handler}
  self115.processorMap["set_execution_mode"] = &mapDProcessorSetExecutionMode{handler:handler}
  self115.processorMap["render_vega"] = &mapDProcessorRenderVega{handler:handler}
  self115.processorMap["get_result_row_for_pixel"] = &mapDProcessorGetResultRowForPixel{handler:handler}
  self115.processorMap["get_frontend_view"] = &mapDProcessorGetFrontendView{handler:handler}
  self115.processorMap["get_frontend_views"] = &mapDProcessorGetFrontendViews{handler:handler}
  self115.processorMap["create_frontend_view"] = &mapDProcessorCreateFrontendView{handler:handler}
  self115.processorMap["delete_frontend_view"] = &mapDProcessorDeleteFrontendView{handler:handler}
  self115.processorMap["get_link_view"] = &mapDProcessorGetLinkView{handler:handler}
  self115.processorMap["create_link"] = &mapDProcessorCreateLink{handler:handler}
  self115.processorMap["load_table_binary"] = &mapDProcessorLoadTableBinary{handler:handler}
  self115.processorMap["load_table"] = &mapDProcessorLoadTable{handler:handler}
  self115.processorMap["detect_column_types"] = &mapDProcessorDetectColumnTypes{handler:handler}
  self115.processorMap["create_table"] = &mapDProcessorCreateTable{handler:handler}
  self115.processorMap["import_table"] = &mapDProcessorImportTable{handler:handler}
  self115.processorMap["import_geo_table"] = &mapDProcessorImportGeoTable{handler:handler}
  self115.processorMap["import_table_status"] = &mapDProcessorImportTableStatus{handler:handler}
  self115.processorMap["start_query"] = &mapDProcessorStartQuery{handler:handler}
  self115.processorMap["execute_first_step"] = &mapDProcessorExecuteFirstStep{handler:handler}
  self115.processorMap["broadcast_serialized_rows"] = &mapDProcessorBroadcastSerializedRows{handler:handler}
  self115.processorMap["render_vega_raw_pixels"] = &mapDProcessorRenderVegaRawPixels{handler:handler}
  self115.processorMap["insert_data"] = &mapDProcessorInsertData{handler:handler}
  self115.processorMap["get_table_descriptor"] = &mapDProcessorGetTableDescriptor{handler:handler}
  self115.processorMap["get_row_descriptor"] = &mapDProcessorGetRowDescriptor{handler:handler}
  self115.processorMap["render"] = &mapDProcessorRender{handler:handler}
  self115.processorMap["get_rows_for_pixels"] = &mapDProcessorGetRowsForPixels{handler:handler}
  self115.processorMap["get_row_for_pixel"] = &mapDProcessorGetRowForPixel{handler:handler}
return self115
}

func (p *MapDProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x116 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x116.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x116

}

type mapDProcessorConnect struct {
  handler MapD
}

func (p *mapDProcessorConnect) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDConnectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("connect", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDConnectResult{}
var retval TSessionId
  var err2 error
  if retval, err2 = p.handler.Connect(args.User, args.Passwd, args.Dbname); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing connect: " + err2.Error())
    oprot.WriteMessageBegin("connect", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("connect", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorDisconnect struct {
  handler MapD
}

func (p *mapDProcessorDisconnect) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDDisconnectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("disconnect", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDDisconnectResult{}
  var err2 error
  if err2 = p.handler.Disconnect(args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing disconnect: " + err2.Error())
    oprot.WriteMessageBegin("disconnect", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("disconnect", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorGetServerStatus struct {
  handler MapD
}

func (p *mapDProcessorGetServerStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDGetServerStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_server_status", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDGetServerStatusResult{}
var retval *TServerStatus
  var err2 error
  if retval, err2 = p.handler.GetServerStatus(args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_server_status: " + err2.Error())
    oprot.WriteMessageBegin("get_server_status", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_server_status", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorGetTables struct {
  handler MapD
}

func (p *mapDProcessorGetTables) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDGetTablesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_tables", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDGetTablesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetTables(args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_tables: " + err2.Error())
    oprot.WriteMessageBegin("get_tables", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_tables", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorGetTableDetails struct {
  handler MapD
}

func (p *mapDProcessorGetTableDetails) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDGetTableDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_table_details", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDGetTableDetailsResult{}
var retval *TTableDetails
  var err2 error
  if retval, err2 = p.handler.GetTableDetails(args.Session, args.TableName); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_details: " + err2.Error())
    oprot.WriteMessageBegin("get_table_details", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_table_details", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorGetUsers struct {
  handler MapD
}

func (p *mapDProcessorGetUsers) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDGetUsersArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_users", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDGetUsersResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetUsers(args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_users: " + err2.Error())
    oprot.WriteMessageBegin("get_users", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_users", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorGetDatabases struct {
  handler MapD
}

func (p *mapDProcessorGetDatabases) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDGetDatabasesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_databases", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDGetDatabasesResult{}
var retval []*TDBInfo
  var err2 error
  if retval, err2 = p.handler.GetDatabases(args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_databases: " + err2.Error())
    oprot.WriteMessageBegin("get_databases", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_databases", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorGetVersion struct {
  handler MapD
}

func (p *mapDProcessorGetVersion) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDGetVersionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_version", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDGetVersionResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetVersion(); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_version: " + err2.Error())
    oprot.WriteMessageBegin("get_version", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("get_version", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorStartHeapProfile struct {
  handler MapD
}

func (p *mapDProcessorStartHeapProfile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDStartHeapProfileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("start_heap_profile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDStartHeapProfileResult{}
  var err2 error
  if err2 = p.handler.StartHeapProfile(args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing start_heap_profile: " + err2.Error())
    oprot.WriteMessageBegin("start_heap_profile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("start_heap_profile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorStopHeapProfile struct {
  handler MapD
}

func (p *mapDProcessorStopHeapProfile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDStopHeapProfileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("stop_heap_profile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDStopHeapProfileResult{}
  var err2 error
  if err2 = p.handler.StopHeapProfile(args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing stop_heap_profile: " + err2.Error())
    oprot.WriteMessageBegin("stop_heap_profile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("stop_heap_profile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorGetHeapProfile struct {
  handler MapD
}

func (p *mapDProcessorGetHeapProfile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDGetHeapProfileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_heap_profile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDGetHeapProfileResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetHeapProfile(args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_heap_profile: " + err2.Error())
    oprot.WriteMessageBegin("get_heap_profile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("get_heap_profile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorGetMemoryGpu struct {
  handler MapD
}

func (p *mapDProcessorGetMemoryGpu) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDGetMemoryGpuArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_memory_gpu", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDGetMemoryGpuResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetMemoryGpu(args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_memory_gpu: " + err2.Error())
    oprot.WriteMessageBegin("get_memory_gpu", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("get_memory_gpu", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorGetMemorySummary struct {
  handler MapD
}

func (p *mapDProcessorGetMemorySummary) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDGetMemorySummaryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_memory_summary", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDGetMemorySummaryResult{}
var retval *TMemorySummary
  var err2 error
  if retval, err2 = p.handler.GetMemorySummary(args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_memory_summary: " + err2.Error())
    oprot.WriteMessageBegin("get_memory_summary", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_memory_summary", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorClearCPUMemory struct {
  handler MapD
}

func (p *mapDProcessorClearCPUMemory) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDClearCPUMemoryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("clear_cpu_memory", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDClearCPUMemoryResult{}
  var err2 error
  if err2 = p.handler.ClearCPUMemory(args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clear_cpu_memory: " + err2.Error())
    oprot.WriteMessageBegin("clear_cpu_memory", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("clear_cpu_memory", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorClearGpuMemory struct {
  handler MapD
}

func (p *mapDProcessorClearGpuMemory) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDClearGpuMemoryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("clear_gpu_memory", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDClearGpuMemoryResult{}
  var err2 error
  if err2 = p.handler.ClearGpuMemory(args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clear_gpu_memory: " + err2.Error())
    oprot.WriteMessageBegin("clear_gpu_memory", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("clear_gpu_memory", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorSqlExecute struct {
  handler MapD
}

func (p *mapDProcessorSqlExecute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDSqlExecuteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sql_execute", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDSqlExecuteResult{}
var retval *TQueryResult_
  var err2 error
  if retval, err2 = p.handler.SqlExecute(args.Session, args.Query, args.ColumnFormat, args.Nonce, args.FirstN); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_execute: " + err2.Error())
    oprot.WriteMessageBegin("sql_execute", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("sql_execute", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorSqlExecuteDf struct {
  handler MapD
}

func (p *mapDProcessorSqlExecuteDf) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDSqlExecuteDfArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sql_execute_df", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDSqlExecuteDfResult{}
var retval *TGpuDataFrame
  var err2 error
  if retval, err2 = p.handler.SqlExecuteDf(args.Session, args.Query, args.FirstN); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_execute_df: " + err2.Error())
    oprot.WriteMessageBegin("sql_execute_df", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("sql_execute_df", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorSqlExecuteGpudf struct {
  handler MapD
}

func (p *mapDProcessorSqlExecuteGpudf) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDSqlExecuteGpudfArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sql_execute_gpudf", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDSqlExecuteGpudfResult{}
var retval *TGpuDataFrame
  var err2 error
  if retval, err2 = p.handler.SqlExecuteGpudf(args.Session, args.Query, args.DeviceID, args.FirstN); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_execute_gpudf: " + err2.Error())
    oprot.WriteMessageBegin("sql_execute_gpudf", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("sql_execute_gpudf", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorInterrupt struct {
  handler MapD
}

func (p *mapDProcessorInterrupt) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDInterruptArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("interrupt", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDInterruptResult{}
  var err2 error
  if err2 = p.handler.Interrupt(args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing interrupt: " + err2.Error())
    oprot.WriteMessageBegin("interrupt", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("interrupt", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorSqlValidate struct {
  handler MapD
}

func (p *mapDProcessorSqlValidate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDSqlValidateArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sql_validate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDSqlValidateResult{}
var retval TTableDescriptor
  var err2 error
  if retval, err2 = p.handler.SqlValidate(args.Session, args.Query); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_validate: " + err2.Error())
    oprot.WriteMessageBegin("sql_validate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("sql_validate", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorSetExecutionMode struct {
  handler MapD
}

func (p *mapDProcessorSetExecutionMode) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDSetExecutionModeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("set_execution_mode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDSetExecutionModeResult{}
  var err2 error
  if err2 = p.handler.SetExecutionMode(args.Session, args.Mode); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_execution_mode: " + err2.Error())
    oprot.WriteMessageBegin("set_execution_mode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("set_execution_mode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorRenderVega struct {
  handler MapD
}

func (p *mapDProcessorRenderVega) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDRenderVegaArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("render_vega", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDRenderVegaResult{}
var retval *TRenderResult_
  var err2 error
  if retval, err2 = p.handler.RenderVega(args.Session, args.WidgetID, args.VegaJSON, args.CompressionLevel, args.Nonce); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing render_vega: " + err2.Error())
    oprot.WriteMessageBegin("render_vega", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("render_vega", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorGetResultRowForPixel struct {
  handler MapD
}

func (p *mapDProcessorGetResultRowForPixel) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDGetResultRowForPixelArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_result_row_for_pixel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDGetResultRowForPixelResult{}
var retval *TPixelTableRowResult_
  var err2 error
  if retval, err2 = p.handler.GetResultRowForPixel(args.Session, args.WidgetID, args.Pixel, args.TableColNames, args.ColumnFormat, args.PixelRadius, args.Nonce); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_result_row_for_pixel: " + err2.Error())
    oprot.WriteMessageBegin("get_result_row_for_pixel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_result_row_for_pixel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorGetFrontendView struct {
  handler MapD
}

func (p *mapDProcessorGetFrontendView) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDGetFrontendViewArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_frontend_view", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDGetFrontendViewResult{}
var retval *TFrontendView
  var err2 error
  if retval, err2 = p.handler.GetFrontendView(args.Session, args.ViewName); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_frontend_view: " + err2.Error())
    oprot.WriteMessageBegin("get_frontend_view", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_frontend_view", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorGetFrontendViews struct {
  handler MapD
}

func (p *mapDProcessorGetFrontendViews) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDGetFrontendViewsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_frontend_views", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDGetFrontendViewsResult{}
var retval []*TFrontendView
  var err2 error
  if retval, err2 = p.handler.GetFrontendViews(args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_frontend_views: " + err2.Error())
    oprot.WriteMessageBegin("get_frontend_views", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_frontend_views", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorCreateFrontendView struct {
  handler MapD
}

func (p *mapDProcessorCreateFrontendView) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDCreateFrontendViewArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("create_frontend_view", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDCreateFrontendViewResult{}
  var err2 error
  if err2 = p.handler.CreateFrontendView(args.Session, args.ViewName, args.ViewState, args.ImageHash, args.ViewMetadata); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_frontend_view: " + err2.Error())
    oprot.WriteMessageBegin("create_frontend_view", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("create_frontend_view", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorDeleteFrontendView struct {
  handler MapD
}

func (p *mapDProcessorDeleteFrontendView) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDDeleteFrontendViewArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("delete_frontend_view", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDDeleteFrontendViewResult{}
  var err2 error
  if err2 = p.handler.DeleteFrontendView(args.Session, args.ViewName); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delete_frontend_view: " + err2.Error())
    oprot.WriteMessageBegin("delete_frontend_view", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("delete_frontend_view", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorGetLinkView struct {
  handler MapD
}

func (p *mapDProcessorGetLinkView) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDGetLinkViewArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_link_view", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDGetLinkViewResult{}
var retval *TFrontendView
  var err2 error
  if retval, err2 = p.handler.GetLinkView(args.Session, args.Link); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_link_view: " + err2.Error())
    oprot.WriteMessageBegin("get_link_view", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_link_view", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorCreateLink struct {
  handler MapD
}

func (p *mapDProcessorCreateLink) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDCreateLinkArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("create_link", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDCreateLinkResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.CreateLink(args.Session, args.ViewState, args.ViewMetadata); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_link: " + err2.Error())
    oprot.WriteMessageBegin("create_link", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("create_link", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorLoadTableBinary struct {
  handler MapD
}

func (p *mapDProcessorLoadTableBinary) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDLoadTableBinaryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("load_table_binary", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDLoadTableBinaryResult{}
  var err2 error
  if err2 = p.handler.LoadTableBinary(args.Session, args.TableName, args.Rows); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing load_table_binary: " + err2.Error())
    oprot.WriteMessageBegin("load_table_binary", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("load_table_binary", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorLoadTable struct {
  handler MapD
}

func (p *mapDProcessorLoadTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDLoadTableArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("load_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDLoadTableResult{}
  var err2 error
  if err2 = p.handler.LoadTable(args.Session, args.TableName, args.Rows); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing load_table: " + err2.Error())
    oprot.WriteMessageBegin("load_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("load_table", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorDetectColumnTypes struct {
  handler MapD
}

func (p *mapDProcessorDetectColumnTypes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDDetectColumnTypesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("detect_column_types", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDDetectColumnTypesResult{}
var retval *TDetectResult_
  var err2 error
  if retval, err2 = p.handler.DetectColumnTypes(args.Session, args.FileName, args.CopyParams); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing detect_column_types: " + err2.Error())
    oprot.WriteMessageBegin("detect_column_types", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("detect_column_types", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorCreateTable struct {
  handler MapD
}

func (p *mapDProcessorCreateTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDCreateTableArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("create_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDCreateTableResult{}
  var err2 error
  if err2 = p.handler.CreateTable(args.Session, args.TableName, args.RowDesc, args.TableType); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_table: " + err2.Error())
    oprot.WriteMessageBegin("create_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("create_table", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorImportTable struct {
  handler MapD
}

func (p *mapDProcessorImportTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDImportTableArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("import_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDImportTableResult{}
  var err2 error
  if err2 = p.handler.ImportTable(args.Session, args.TableName, args.FileName, args.CopyParams); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing import_table: " + err2.Error())
    oprot.WriteMessageBegin("import_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("import_table", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorImportGeoTable struct {
  handler MapD
}

func (p *mapDProcessorImportGeoTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDImportGeoTableArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("import_geo_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDImportGeoTableResult{}
  var err2 error
  if err2 = p.handler.ImportGeoTable(args.Session, args.TableName, args.FileName, args.CopyParams, args.RowDesc); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing import_geo_table: " + err2.Error())
    oprot.WriteMessageBegin("import_geo_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("import_geo_table", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorImportTableStatus struct {
  handler MapD
}

func (p *mapDProcessorImportTableStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDImportTableStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("import_table_status", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDImportTableStatusResult{}
var retval *TImportStatus
  var err2 error
  if retval, err2 = p.handler.ImportTableStatus(args.Session, args.ImportID); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing import_table_status: " + err2.Error())
    oprot.WriteMessageBegin("import_table_status", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("import_table_status", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorStartQuery struct {
  handler MapD
}

func (p *mapDProcessorStartQuery) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDStartQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("start_query", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDStartQueryResult{}
var retval *TPendingQuery
  var err2 error
  if retval, err2 = p.handler.StartQuery(args.Session, args.QueryRa, args.JustExplain); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing start_query: " + err2.Error())
    oprot.WriteMessageBegin("start_query", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("start_query", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorExecuteFirstStep struct {
  handler MapD
}

func (p *mapDProcessorExecuteFirstStep) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDExecuteFirstStepArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("execute_first_step", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDExecuteFirstStepResult{}
var retval *TStepResult_
  var err2 error
  if retval, err2 = p.handler.ExecuteFirstStep(args.PendingQuery); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing execute_first_step: " + err2.Error())
    oprot.WriteMessageBegin("execute_first_step", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("execute_first_step", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorBroadcastSerializedRows struct {
  handler MapD
}

func (p *mapDProcessorBroadcastSerializedRows) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDBroadcastSerializedRowsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("broadcast_serialized_rows", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDBroadcastSerializedRowsResult{}
  var err2 error
  if err2 = p.handler.BroadcastSerializedRows(args.SerializedRows, args.RowDesc, args.QueryID); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing broadcast_serialized_rows: " + err2.Error())
    oprot.WriteMessageBegin("broadcast_serialized_rows", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("broadcast_serialized_rows", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorRenderVegaRawPixels struct {
  handler MapD
}

func (p *mapDProcessorRenderVegaRawPixels) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDRenderVegaRawPixelsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("render_vega_raw_pixels", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDRenderVegaRawPixelsResult{}
var retval *TRawPixelDataResult_
  var err2 error
  if retval, err2 = p.handler.RenderVegaRawPixels(args.Session, args.WidgetID, args.NodeIdx, args.VegaJSON); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing render_vega_raw_pixels: " + err2.Error())
    oprot.WriteMessageBegin("render_vega_raw_pixels", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("render_vega_raw_pixels", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorInsertData struct {
  handler MapD
}

func (p *mapDProcessorInsertData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDInsertDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("insert_data", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDInsertDataResult{}
  var err2 error
  if err2 = p.handler.InsertData(args.Session, args.InsertData); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing insert_data: " + err2.Error())
    oprot.WriteMessageBegin("insert_data", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("insert_data", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorGetTableDescriptor struct {
  handler MapD
}

func (p *mapDProcessorGetTableDescriptor) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDGetTableDescriptorArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_table_descriptor", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDGetTableDescriptorResult{}
var retval TTableDescriptor
  var err2 error
  if retval, err2 = p.handler.GetTableDescriptor(args.Session, args.TableName); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_descriptor: " + err2.Error())
    oprot.WriteMessageBegin("get_table_descriptor", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_table_descriptor", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorGetRowDescriptor struct {
  handler MapD
}

func (p *mapDProcessorGetRowDescriptor) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDGetRowDescriptorArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_row_descriptor", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDGetRowDescriptorResult{}
var retval TRowDescriptor
  var err2 error
  if retval, err2 = p.handler.GetRowDescriptor(args.Session, args.TableName); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_row_descriptor: " + err2.Error())
    oprot.WriteMessageBegin("get_row_descriptor", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_row_descriptor", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorRender struct {
  handler MapD
}

func (p *mapDProcessorRender) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDRenderArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("render", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDRenderResult{}
var retval *TRenderResult_
  var err2 error
  if retval, err2 = p.handler.Render(args.Session, args.Query, args.RenderType, args.Nonce); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing render: " + err2.Error())
    oprot.WriteMessageBegin("render", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("render", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorGetRowsForPixels struct {
  handler MapD
}

func (p *mapDProcessorGetRowsForPixels) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDGetRowsForPixelsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_rows_for_pixels", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDGetRowsForPixelsResult{}
var retval *TPixelResult_
  var err2 error
  if retval, err2 = p.handler.GetRowsForPixels(args.Session, args.WidgetID, args.Pixels, args.TableName, args.ColNames, args.ColumnFormat, args.Nonce); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_rows_for_pixels: " + err2.Error())
    oprot.WriteMessageBegin("get_rows_for_pixels", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_rows_for_pixels", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mapDProcessorGetRowForPixel struct {
  handler MapD
}

func (p *mapDProcessorGetRowForPixel) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MapDGetRowForPixelArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_row_for_pixel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MapDGetRowForPixelResult{}
var retval *TPixelRowResult_
  var err2 error
  if retval, err2 = p.handler.GetRowForPixel(args.Session, args.WidgetID, args.Pixel, args.TableName, args.ColNames, args.ColumnFormat, args.PixelRadius, args.Nonce); err2 != nil {
  switch v := err2.(type) {
    case *TMapDException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_row_for_pixel: " + err2.Error())
    oprot.WriteMessageBegin("get_row_for_pixel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_row_for_pixel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - User
//  - Passwd
//  - Dbname
type MapDConnectArgs struct {
  User string `thrift:"user,1" db:"user" json:"user"`
  Passwd string `thrift:"passwd,2" db:"passwd" json:"passwd"`
  Dbname string `thrift:"dbname,3" db:"dbname" json:"dbname"`
}

func NewMapDConnectArgs() *MapDConnectArgs {
  return &MapDConnectArgs{}
}


func (p *MapDConnectArgs) GetUser() string {
  return p.User
}

func (p *MapDConnectArgs) GetPasswd() string {
  return p.Passwd
}

func (p *MapDConnectArgs) GetDbname() string {
  return p.Dbname
}
func (p *MapDConnectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDConnectArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.User = v
}
  return nil
}

func (p *MapDConnectArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Passwd = v
}
  return nil
}

func (p *MapDConnectArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *MapDConnectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("connect_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDConnectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := oprot.WriteString(string(p.User)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *MapDConnectArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:passwd: ", p), err) }
  if err := oprot.WriteString(string(p.Passwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:passwd: ", p), err) }
  return err
}

func (p *MapDConnectArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dbname: ", p), err) }
  if err := oprot.WriteString(string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dbname: ", p), err) }
  return err
}

func (p *MapDConnectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDConnectArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDConnectResult struct {
  Success *TSessionId `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDConnectResult() *MapDConnectResult {
  return &MapDConnectResult{}
}

var MapDConnectResult_Success_DEFAULT TSessionId
func (p *MapDConnectResult) GetSuccess() TSessionId {
  if !p.IsSetSuccess() {
    return MapDConnectResult_Success_DEFAULT
  }
return *p.Success
}
var MapDConnectResult_E_DEFAULT *TMapDException
func (p *MapDConnectResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDConnectResult_E_DEFAULT
  }
return p.E
}
func (p *MapDConnectResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDConnectResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDConnectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDConnectResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := TSessionId(v)
  p.Success = &temp
}
  return nil
}

func (p *MapDConnectResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDConnectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("connect_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDConnectResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDConnectResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDConnectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDConnectResult(%+v)", *p)
}

// Attributes:
//  - Session
type MapDDisconnectArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewMapDDisconnectArgs() *MapDDisconnectArgs {
  return &MapDDisconnectArgs{}
}


func (p *MapDDisconnectArgs) GetSession() TSessionId {
  return p.Session
}
func (p *MapDDisconnectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDDisconnectArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDDisconnectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("disconnect_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDDisconnectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDDisconnectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDDisconnectArgs(%+v)", *p)
}

// Attributes:
//  - E
type MapDDisconnectResult struct {
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDDisconnectResult() *MapDDisconnectResult {
  return &MapDDisconnectResult{}
}

var MapDDisconnectResult_E_DEFAULT *TMapDException
func (p *MapDDisconnectResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDDisconnectResult_E_DEFAULT
  }
return p.E
}
func (p *MapDDisconnectResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDDisconnectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDDisconnectResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDDisconnectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("disconnect_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDDisconnectResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDDisconnectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDDisconnectResult(%+v)", *p)
}

// Attributes:
//  - Session
type MapDGetServerStatusArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewMapDGetServerStatusArgs() *MapDGetServerStatusArgs {
  return &MapDGetServerStatusArgs{}
}


func (p *MapDGetServerStatusArgs) GetSession() TSessionId {
  return p.Session
}
func (p *MapDGetServerStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetServerStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDGetServerStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_server_status_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetServerStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDGetServerStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetServerStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDGetServerStatusResult struct {
  Success *TServerStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDGetServerStatusResult() *MapDGetServerStatusResult {
  return &MapDGetServerStatusResult{}
}

var MapDGetServerStatusResult_Success_DEFAULT *TServerStatus
func (p *MapDGetServerStatusResult) GetSuccess() *TServerStatus {
  if !p.IsSetSuccess() {
    return MapDGetServerStatusResult_Success_DEFAULT
  }
return p.Success
}
var MapDGetServerStatusResult_E_DEFAULT *TMapDException
func (p *MapDGetServerStatusResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDGetServerStatusResult_E_DEFAULT
  }
return p.E
}
func (p *MapDGetServerStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDGetServerStatusResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDGetServerStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetServerStatusResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TServerStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MapDGetServerStatusResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDGetServerStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_server_status_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetServerStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDGetServerStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDGetServerStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetServerStatusResult(%+v)", *p)
}

// Attributes:
//  - Session
type MapDGetTablesArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewMapDGetTablesArgs() *MapDGetTablesArgs {
  return &MapDGetTablesArgs{}
}


func (p *MapDGetTablesArgs) GetSession() TSessionId {
  return p.Session
}
func (p *MapDGetTablesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetTablesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDGetTablesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_tables_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetTablesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDGetTablesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetTablesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDGetTablesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDGetTablesResult() *MapDGetTablesResult {
  return &MapDGetTablesResult{}
}

var MapDGetTablesResult_Success_DEFAULT []string

func (p *MapDGetTablesResult) GetSuccess() []string {
  return p.Success
}
var MapDGetTablesResult_E_DEFAULT *TMapDException
func (p *MapDGetTablesResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDGetTablesResult_E_DEFAULT
  }
return p.E
}
func (p *MapDGetTablesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDGetTablesResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDGetTablesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetTablesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem117 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem117 = v
}
    p.Success = append(p.Success, _elem117)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MapDGetTablesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDGetTablesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_tables_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetTablesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDGetTablesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDGetTablesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetTablesResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
type MapDGetTableDetailsArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
}

func NewMapDGetTableDetailsArgs() *MapDGetTableDetailsArgs {
  return &MapDGetTableDetailsArgs{}
}


func (p *MapDGetTableDetailsArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDGetTableDetailsArgs) GetTableName() string {
  return p.TableName
}
func (p *MapDGetTableDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetTableDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDGetTableDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *MapDGetTableDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_table_details_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetTableDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDGetTableDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *MapDGetTableDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetTableDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDGetTableDetailsResult struct {
  Success *TTableDetails `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDGetTableDetailsResult() *MapDGetTableDetailsResult {
  return &MapDGetTableDetailsResult{}
}

var MapDGetTableDetailsResult_Success_DEFAULT *TTableDetails
func (p *MapDGetTableDetailsResult) GetSuccess() *TTableDetails {
  if !p.IsSetSuccess() {
    return MapDGetTableDetailsResult_Success_DEFAULT
  }
return p.Success
}
var MapDGetTableDetailsResult_E_DEFAULT *TMapDException
func (p *MapDGetTableDetailsResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDGetTableDetailsResult_E_DEFAULT
  }
return p.E
}
func (p *MapDGetTableDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDGetTableDetailsResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDGetTableDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetTableDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TTableDetails{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MapDGetTableDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDGetTableDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_table_details_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetTableDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDGetTableDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDGetTableDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetTableDetailsResult(%+v)", *p)
}

// Attributes:
//  - Session
type MapDGetUsersArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewMapDGetUsersArgs() *MapDGetUsersArgs {
  return &MapDGetUsersArgs{}
}


func (p *MapDGetUsersArgs) GetSession() TSessionId {
  return p.Session
}
func (p *MapDGetUsersArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetUsersArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDGetUsersArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_users_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetUsersArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDGetUsersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetUsersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDGetUsersResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDGetUsersResult() *MapDGetUsersResult {
  return &MapDGetUsersResult{}
}

var MapDGetUsersResult_Success_DEFAULT []string

func (p *MapDGetUsersResult) GetSuccess() []string {
  return p.Success
}
var MapDGetUsersResult_E_DEFAULT *TMapDException
func (p *MapDGetUsersResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDGetUsersResult_E_DEFAULT
  }
return p.E
}
func (p *MapDGetUsersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDGetUsersResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDGetUsersResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetUsersResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem118 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem118 = v
}
    p.Success = append(p.Success, _elem118)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MapDGetUsersResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDGetUsersResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_users_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetUsersResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDGetUsersResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDGetUsersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetUsersResult(%+v)", *p)
}

// Attributes:
//  - Session
type MapDGetDatabasesArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewMapDGetDatabasesArgs() *MapDGetDatabasesArgs {
  return &MapDGetDatabasesArgs{}
}


func (p *MapDGetDatabasesArgs) GetSession() TSessionId {
  return p.Session
}
func (p *MapDGetDatabasesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetDatabasesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDGetDatabasesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_databases_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetDatabasesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDGetDatabasesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetDatabasesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDGetDatabasesResult struct {
  Success []*TDBInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDGetDatabasesResult() *MapDGetDatabasesResult {
  return &MapDGetDatabasesResult{}
}

var MapDGetDatabasesResult_Success_DEFAULT []*TDBInfo

func (p *MapDGetDatabasesResult) GetSuccess() []*TDBInfo {
  return p.Success
}
var MapDGetDatabasesResult_E_DEFAULT *TMapDException
func (p *MapDGetDatabasesResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDGetDatabasesResult_E_DEFAULT
  }
return p.E
}
func (p *MapDGetDatabasesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDGetDatabasesResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDGetDatabasesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetDatabasesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDBInfo, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem119 := &TDBInfo{}
    if err := _elem119.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem119), err)
    }
    p.Success = append(p.Success, _elem119)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MapDGetDatabasesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDGetDatabasesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_databases_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetDatabasesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDGetDatabasesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDGetDatabasesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetDatabasesResult(%+v)", *p)
}

type MapDGetVersionArgs struct {
}

func NewMapDGetVersionArgs() *MapDGetVersionArgs {
  return &MapDGetVersionArgs{}
}

func (p *MapDGetVersionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetVersionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_version_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDGetVersionResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDGetVersionResult() *MapDGetVersionResult {
  return &MapDGetVersionResult{}
}

var MapDGetVersionResult_Success_DEFAULT string
func (p *MapDGetVersionResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return MapDGetVersionResult_Success_DEFAULT
  }
return *p.Success
}
var MapDGetVersionResult_E_DEFAULT *TMapDException
func (p *MapDGetVersionResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDGetVersionResult_E_DEFAULT
  }
return p.E
}
func (p *MapDGetVersionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDGetVersionResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDGetVersionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetVersionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MapDGetVersionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDGetVersionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_version_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDGetVersionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDGetVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetVersionResult(%+v)", *p)
}

// Attributes:
//  - Session
type MapDStartHeapProfileArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewMapDStartHeapProfileArgs() *MapDStartHeapProfileArgs {
  return &MapDStartHeapProfileArgs{}
}


func (p *MapDStartHeapProfileArgs) GetSession() TSessionId {
  return p.Session
}
func (p *MapDStartHeapProfileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDStartHeapProfileArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDStartHeapProfileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("start_heap_profile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDStartHeapProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDStartHeapProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDStartHeapProfileArgs(%+v)", *p)
}

// Attributes:
//  - E
type MapDStartHeapProfileResult struct {
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDStartHeapProfileResult() *MapDStartHeapProfileResult {
  return &MapDStartHeapProfileResult{}
}

var MapDStartHeapProfileResult_E_DEFAULT *TMapDException
func (p *MapDStartHeapProfileResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDStartHeapProfileResult_E_DEFAULT
  }
return p.E
}
func (p *MapDStartHeapProfileResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDStartHeapProfileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDStartHeapProfileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDStartHeapProfileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("start_heap_profile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDStartHeapProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDStartHeapProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDStartHeapProfileResult(%+v)", *p)
}

// Attributes:
//  - Session
type MapDStopHeapProfileArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewMapDStopHeapProfileArgs() *MapDStopHeapProfileArgs {
  return &MapDStopHeapProfileArgs{}
}


func (p *MapDStopHeapProfileArgs) GetSession() TSessionId {
  return p.Session
}
func (p *MapDStopHeapProfileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDStopHeapProfileArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDStopHeapProfileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stop_heap_profile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDStopHeapProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDStopHeapProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDStopHeapProfileArgs(%+v)", *p)
}

// Attributes:
//  - E
type MapDStopHeapProfileResult struct {
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDStopHeapProfileResult() *MapDStopHeapProfileResult {
  return &MapDStopHeapProfileResult{}
}

var MapDStopHeapProfileResult_E_DEFAULT *TMapDException
func (p *MapDStopHeapProfileResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDStopHeapProfileResult_E_DEFAULT
  }
return p.E
}
func (p *MapDStopHeapProfileResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDStopHeapProfileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDStopHeapProfileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDStopHeapProfileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stop_heap_profile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDStopHeapProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDStopHeapProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDStopHeapProfileResult(%+v)", *p)
}

// Attributes:
//  - Session
type MapDGetHeapProfileArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewMapDGetHeapProfileArgs() *MapDGetHeapProfileArgs {
  return &MapDGetHeapProfileArgs{}
}


func (p *MapDGetHeapProfileArgs) GetSession() TSessionId {
  return p.Session
}
func (p *MapDGetHeapProfileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetHeapProfileArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDGetHeapProfileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_heap_profile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetHeapProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDGetHeapProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetHeapProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDGetHeapProfileResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDGetHeapProfileResult() *MapDGetHeapProfileResult {
  return &MapDGetHeapProfileResult{}
}

var MapDGetHeapProfileResult_Success_DEFAULT string
func (p *MapDGetHeapProfileResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return MapDGetHeapProfileResult_Success_DEFAULT
  }
return *p.Success
}
var MapDGetHeapProfileResult_E_DEFAULT *TMapDException
func (p *MapDGetHeapProfileResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDGetHeapProfileResult_E_DEFAULT
  }
return p.E
}
func (p *MapDGetHeapProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDGetHeapProfileResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDGetHeapProfileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetHeapProfileResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MapDGetHeapProfileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDGetHeapProfileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_heap_profile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetHeapProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDGetHeapProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDGetHeapProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetHeapProfileResult(%+v)", *p)
}

// Attributes:
//  - Session
type MapDGetMemoryGpuArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewMapDGetMemoryGpuArgs() *MapDGetMemoryGpuArgs {
  return &MapDGetMemoryGpuArgs{}
}


func (p *MapDGetMemoryGpuArgs) GetSession() TSessionId {
  return p.Session
}
func (p *MapDGetMemoryGpuArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetMemoryGpuArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDGetMemoryGpuArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_memory_gpu_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetMemoryGpuArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDGetMemoryGpuArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetMemoryGpuArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDGetMemoryGpuResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDGetMemoryGpuResult() *MapDGetMemoryGpuResult {
  return &MapDGetMemoryGpuResult{}
}

var MapDGetMemoryGpuResult_Success_DEFAULT string
func (p *MapDGetMemoryGpuResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return MapDGetMemoryGpuResult_Success_DEFAULT
  }
return *p.Success
}
var MapDGetMemoryGpuResult_E_DEFAULT *TMapDException
func (p *MapDGetMemoryGpuResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDGetMemoryGpuResult_E_DEFAULT
  }
return p.E
}
func (p *MapDGetMemoryGpuResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDGetMemoryGpuResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDGetMemoryGpuResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetMemoryGpuResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MapDGetMemoryGpuResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDGetMemoryGpuResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_memory_gpu_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetMemoryGpuResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDGetMemoryGpuResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDGetMemoryGpuResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetMemoryGpuResult(%+v)", *p)
}

// Attributes:
//  - Session
type MapDGetMemorySummaryArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewMapDGetMemorySummaryArgs() *MapDGetMemorySummaryArgs {
  return &MapDGetMemorySummaryArgs{}
}


func (p *MapDGetMemorySummaryArgs) GetSession() TSessionId {
  return p.Session
}
func (p *MapDGetMemorySummaryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetMemorySummaryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDGetMemorySummaryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_memory_summary_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetMemorySummaryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDGetMemorySummaryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetMemorySummaryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDGetMemorySummaryResult struct {
  Success *TMemorySummary `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDGetMemorySummaryResult() *MapDGetMemorySummaryResult {
  return &MapDGetMemorySummaryResult{}
}

var MapDGetMemorySummaryResult_Success_DEFAULT *TMemorySummary
func (p *MapDGetMemorySummaryResult) GetSuccess() *TMemorySummary {
  if !p.IsSetSuccess() {
    return MapDGetMemorySummaryResult_Success_DEFAULT
  }
return p.Success
}
var MapDGetMemorySummaryResult_E_DEFAULT *TMapDException
func (p *MapDGetMemorySummaryResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDGetMemorySummaryResult_E_DEFAULT
  }
return p.E
}
func (p *MapDGetMemorySummaryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDGetMemorySummaryResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDGetMemorySummaryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetMemorySummaryResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TMemorySummary{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MapDGetMemorySummaryResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDGetMemorySummaryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_memory_summary_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetMemorySummaryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDGetMemorySummaryResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDGetMemorySummaryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetMemorySummaryResult(%+v)", *p)
}

// Attributes:
//  - Session
type MapDClearCPUMemoryArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewMapDClearCPUMemoryArgs() *MapDClearCPUMemoryArgs {
  return &MapDClearCPUMemoryArgs{}
}


func (p *MapDClearCPUMemoryArgs) GetSession() TSessionId {
  return p.Session
}
func (p *MapDClearCPUMemoryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDClearCPUMemoryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDClearCPUMemoryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("clear_cpu_memory_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDClearCPUMemoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDClearCPUMemoryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDClearCPUMemoryArgs(%+v)", *p)
}

// Attributes:
//  - E
type MapDClearCPUMemoryResult struct {
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDClearCPUMemoryResult() *MapDClearCPUMemoryResult {
  return &MapDClearCPUMemoryResult{}
}

var MapDClearCPUMemoryResult_E_DEFAULT *TMapDException
func (p *MapDClearCPUMemoryResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDClearCPUMemoryResult_E_DEFAULT
  }
return p.E
}
func (p *MapDClearCPUMemoryResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDClearCPUMemoryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDClearCPUMemoryResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDClearCPUMemoryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("clear_cpu_memory_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDClearCPUMemoryResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDClearCPUMemoryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDClearCPUMemoryResult(%+v)", *p)
}

// Attributes:
//  - Session
type MapDClearGpuMemoryArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewMapDClearGpuMemoryArgs() *MapDClearGpuMemoryArgs {
  return &MapDClearGpuMemoryArgs{}
}


func (p *MapDClearGpuMemoryArgs) GetSession() TSessionId {
  return p.Session
}
func (p *MapDClearGpuMemoryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDClearGpuMemoryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDClearGpuMemoryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("clear_gpu_memory_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDClearGpuMemoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDClearGpuMemoryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDClearGpuMemoryArgs(%+v)", *p)
}

// Attributes:
//  - E
type MapDClearGpuMemoryResult struct {
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDClearGpuMemoryResult() *MapDClearGpuMemoryResult {
  return &MapDClearGpuMemoryResult{}
}

var MapDClearGpuMemoryResult_E_DEFAULT *TMapDException
func (p *MapDClearGpuMemoryResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDClearGpuMemoryResult_E_DEFAULT
  }
return p.E
}
func (p *MapDClearGpuMemoryResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDClearGpuMemoryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDClearGpuMemoryResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDClearGpuMemoryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("clear_gpu_memory_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDClearGpuMemoryResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDClearGpuMemoryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDClearGpuMemoryResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Query
//  - ColumnFormat
//  - Nonce
//  - FirstN
type MapDSqlExecuteArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  Query string `thrift:"query,2" db:"query" json:"query"`
  ColumnFormat bool `thrift:"column_format,3" db:"column_format" json:"column_format"`
  Nonce string `thrift:"nonce,4" db:"nonce" json:"nonce"`
  FirstN int32 `thrift:"first_n,5" db:"first_n" json:"first_n"`
}

func NewMapDSqlExecuteArgs() *MapDSqlExecuteArgs {
  return &MapDSqlExecuteArgs{
FirstN: -1,
}
}


func (p *MapDSqlExecuteArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDSqlExecuteArgs) GetQuery() string {
  return p.Query
}

func (p *MapDSqlExecuteArgs) GetColumnFormat() bool {
  return p.ColumnFormat
}

func (p *MapDSqlExecuteArgs) GetNonce() string {
  return p.Nonce
}

func (p *MapDSqlExecuteArgs) GetFirstN() int32 {
  return p.FirstN
}
func (p *MapDSqlExecuteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDSqlExecuteArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDSqlExecuteArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Query = v
}
  return nil
}

func (p *MapDSqlExecuteArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ColumnFormat = v
}
  return nil
}

func (p *MapDSqlExecuteArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *MapDSqlExecuteArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.FirstN = v
}
  return nil
}

func (p *MapDSqlExecuteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sql_execute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDSqlExecuteArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDSqlExecuteArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query: ", p), err) }
  if err := oprot.WriteString(string(p.Query)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query: ", p), err) }
  return err
}

func (p *MapDSqlExecuteArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("column_format", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:column_format: ", p), err) }
  if err := oprot.WriteBool(bool(p.ColumnFormat)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.column_format (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:column_format: ", p), err) }
  return err
}

func (p *MapDSqlExecuteArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nonce: ", p), err) }
  if err := oprot.WriteString(string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nonce: ", p), err) }
  return err
}

func (p *MapDSqlExecuteArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("first_n", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:first_n: ", p), err) }
  if err := oprot.WriteI32(int32(p.FirstN)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.first_n (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:first_n: ", p), err) }
  return err
}

func (p *MapDSqlExecuteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDSqlExecuteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDSqlExecuteResult struct {
  Success *TQueryResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDSqlExecuteResult() *MapDSqlExecuteResult {
  return &MapDSqlExecuteResult{}
}

var MapDSqlExecuteResult_Success_DEFAULT *TQueryResult_
func (p *MapDSqlExecuteResult) GetSuccess() *TQueryResult_ {
  if !p.IsSetSuccess() {
    return MapDSqlExecuteResult_Success_DEFAULT
  }
return p.Success
}
var MapDSqlExecuteResult_E_DEFAULT *TMapDException
func (p *MapDSqlExecuteResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDSqlExecuteResult_E_DEFAULT
  }
return p.E
}
func (p *MapDSqlExecuteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDSqlExecuteResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDSqlExecuteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDSqlExecuteResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TQueryResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MapDSqlExecuteResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDSqlExecuteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sql_execute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDSqlExecuteResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDSqlExecuteResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDSqlExecuteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDSqlExecuteResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Query
//  - FirstN
type MapDSqlExecuteDfArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  Query string `thrift:"query,2" db:"query" json:"query"`
  FirstN int32 `thrift:"first_n,3" db:"first_n" json:"first_n"`
}

func NewMapDSqlExecuteDfArgs() *MapDSqlExecuteDfArgs {
  return &MapDSqlExecuteDfArgs{
FirstN: -1,
}
}


func (p *MapDSqlExecuteDfArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDSqlExecuteDfArgs) GetQuery() string {
  return p.Query
}

func (p *MapDSqlExecuteDfArgs) GetFirstN() int32 {
  return p.FirstN
}
func (p *MapDSqlExecuteDfArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDSqlExecuteDfArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDSqlExecuteDfArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Query = v
}
  return nil
}

func (p *MapDSqlExecuteDfArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FirstN = v
}
  return nil
}

func (p *MapDSqlExecuteDfArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sql_execute_df_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDSqlExecuteDfArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDSqlExecuteDfArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query: ", p), err) }
  if err := oprot.WriteString(string(p.Query)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query: ", p), err) }
  return err
}

func (p *MapDSqlExecuteDfArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("first_n", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:first_n: ", p), err) }
  if err := oprot.WriteI32(int32(p.FirstN)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.first_n (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:first_n: ", p), err) }
  return err
}

func (p *MapDSqlExecuteDfArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDSqlExecuteDfArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDSqlExecuteDfResult struct {
  Success *TGpuDataFrame `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDSqlExecuteDfResult() *MapDSqlExecuteDfResult {
  return &MapDSqlExecuteDfResult{}
}

var MapDSqlExecuteDfResult_Success_DEFAULT *TGpuDataFrame
func (p *MapDSqlExecuteDfResult) GetSuccess() *TGpuDataFrame {
  if !p.IsSetSuccess() {
    return MapDSqlExecuteDfResult_Success_DEFAULT
  }
return p.Success
}
var MapDSqlExecuteDfResult_E_DEFAULT *TMapDException
func (p *MapDSqlExecuteDfResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDSqlExecuteDfResult_E_DEFAULT
  }
return p.E
}
func (p *MapDSqlExecuteDfResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDSqlExecuteDfResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDSqlExecuteDfResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDSqlExecuteDfResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TGpuDataFrame{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MapDSqlExecuteDfResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDSqlExecuteDfResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sql_execute_df_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDSqlExecuteDfResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDSqlExecuteDfResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDSqlExecuteDfResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDSqlExecuteDfResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Query
//  - DeviceID
//  - FirstN
type MapDSqlExecuteGpudfArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  Query string `thrift:"query,2" db:"query" json:"query"`
  DeviceID int32 `thrift:"device_id,3" db:"device_id" json:"device_id"`
  FirstN int32 `thrift:"first_n,4" db:"first_n" json:"first_n"`
}

func NewMapDSqlExecuteGpudfArgs() *MapDSqlExecuteGpudfArgs {
  return &MapDSqlExecuteGpudfArgs{
FirstN: -1,
}
}


func (p *MapDSqlExecuteGpudfArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDSqlExecuteGpudfArgs) GetQuery() string {
  return p.Query
}

func (p *MapDSqlExecuteGpudfArgs) GetDeviceID() int32 {
  return p.DeviceID
}

func (p *MapDSqlExecuteGpudfArgs) GetFirstN() int32 {
  return p.FirstN
}
func (p *MapDSqlExecuteGpudfArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDSqlExecuteGpudfArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDSqlExecuteGpudfArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Query = v
}
  return nil
}

func (p *MapDSqlExecuteGpudfArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DeviceID = v
}
  return nil
}

func (p *MapDSqlExecuteGpudfArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FirstN = v
}
  return nil
}

func (p *MapDSqlExecuteGpudfArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sql_execute_gpudf_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDSqlExecuteGpudfArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDSqlExecuteGpudfArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query: ", p), err) }
  if err := oprot.WriteString(string(p.Query)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query: ", p), err) }
  return err
}

func (p *MapDSqlExecuteGpudfArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("device_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:device_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.DeviceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.device_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:device_id: ", p), err) }
  return err
}

func (p *MapDSqlExecuteGpudfArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("first_n", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:first_n: ", p), err) }
  if err := oprot.WriteI32(int32(p.FirstN)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.first_n (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:first_n: ", p), err) }
  return err
}

func (p *MapDSqlExecuteGpudfArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDSqlExecuteGpudfArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDSqlExecuteGpudfResult struct {
  Success *TGpuDataFrame `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDSqlExecuteGpudfResult() *MapDSqlExecuteGpudfResult {
  return &MapDSqlExecuteGpudfResult{}
}

var MapDSqlExecuteGpudfResult_Success_DEFAULT *TGpuDataFrame
func (p *MapDSqlExecuteGpudfResult) GetSuccess() *TGpuDataFrame {
  if !p.IsSetSuccess() {
    return MapDSqlExecuteGpudfResult_Success_DEFAULT
  }
return p.Success
}
var MapDSqlExecuteGpudfResult_E_DEFAULT *TMapDException
func (p *MapDSqlExecuteGpudfResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDSqlExecuteGpudfResult_E_DEFAULT
  }
return p.E
}
func (p *MapDSqlExecuteGpudfResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDSqlExecuteGpudfResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDSqlExecuteGpudfResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDSqlExecuteGpudfResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TGpuDataFrame{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MapDSqlExecuteGpudfResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDSqlExecuteGpudfResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sql_execute_gpudf_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDSqlExecuteGpudfResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDSqlExecuteGpudfResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDSqlExecuteGpudfResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDSqlExecuteGpudfResult(%+v)", *p)
}

// Attributes:
//  - Session
type MapDInterruptArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewMapDInterruptArgs() *MapDInterruptArgs {
  return &MapDInterruptArgs{}
}


func (p *MapDInterruptArgs) GetSession() TSessionId {
  return p.Session
}
func (p *MapDInterruptArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDInterruptArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDInterruptArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("interrupt_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDInterruptArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDInterruptArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDInterruptArgs(%+v)", *p)
}

// Attributes:
//  - E
type MapDInterruptResult struct {
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDInterruptResult() *MapDInterruptResult {
  return &MapDInterruptResult{}
}

var MapDInterruptResult_E_DEFAULT *TMapDException
func (p *MapDInterruptResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDInterruptResult_E_DEFAULT
  }
return p.E
}
func (p *MapDInterruptResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDInterruptResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDInterruptResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDInterruptResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("interrupt_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDInterruptResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDInterruptResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDInterruptResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Query
type MapDSqlValidateArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  Query string `thrift:"query,2" db:"query" json:"query"`
}

func NewMapDSqlValidateArgs() *MapDSqlValidateArgs {
  return &MapDSqlValidateArgs{}
}


func (p *MapDSqlValidateArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDSqlValidateArgs) GetQuery() string {
  return p.Query
}
func (p *MapDSqlValidateArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDSqlValidateArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDSqlValidateArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Query = v
}
  return nil
}

func (p *MapDSqlValidateArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sql_validate_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDSqlValidateArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDSqlValidateArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query: ", p), err) }
  if err := oprot.WriteString(string(p.Query)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query: ", p), err) }
  return err
}

func (p *MapDSqlValidateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDSqlValidateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDSqlValidateResult struct {
  Success TTableDescriptor `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDSqlValidateResult() *MapDSqlValidateResult {
  return &MapDSqlValidateResult{}
}

var MapDSqlValidateResult_Success_DEFAULT TTableDescriptor

func (p *MapDSqlValidateResult) GetSuccess() TTableDescriptor {
  return p.Success
}
var MapDSqlValidateResult_E_DEFAULT *TMapDException
func (p *MapDSqlValidateResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDSqlValidateResult_E_DEFAULT
  }
return p.E
}
func (p *MapDSqlValidateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDSqlValidateResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDSqlValidateResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDSqlValidateResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(TTableDescriptor, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key120 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key120 = v
}
    _val121 := &TColumnType{}
    if err := _val121.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val121), err)
    }
    p.Success[_key120] = _val121
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MapDSqlValidateResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDSqlValidateResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sql_validate_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDSqlValidateResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDSqlValidateResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDSqlValidateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDSqlValidateResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Mode
type MapDSetExecutionModeArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  Mode TExecuteMode `thrift:"mode,2" db:"mode" json:"mode"`
}

func NewMapDSetExecutionModeArgs() *MapDSetExecutionModeArgs {
  return &MapDSetExecutionModeArgs{}
}


func (p *MapDSetExecutionModeArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDSetExecutionModeArgs) GetMode() TExecuteMode {
  return p.Mode
}
func (p *MapDSetExecutionModeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDSetExecutionModeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDSetExecutionModeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TExecuteMode(v)
  p.Mode = temp
}
  return nil
}

func (p *MapDSetExecutionModeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_execution_mode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDSetExecutionModeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDSetExecutionModeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mode", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Mode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mode: ", p), err) }
  return err
}

func (p *MapDSetExecutionModeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDSetExecutionModeArgs(%+v)", *p)
}

// Attributes:
//  - E
type MapDSetExecutionModeResult struct {
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDSetExecutionModeResult() *MapDSetExecutionModeResult {
  return &MapDSetExecutionModeResult{}
}

var MapDSetExecutionModeResult_E_DEFAULT *TMapDException
func (p *MapDSetExecutionModeResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDSetExecutionModeResult_E_DEFAULT
  }
return p.E
}
func (p *MapDSetExecutionModeResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDSetExecutionModeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDSetExecutionModeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDSetExecutionModeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_execution_mode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDSetExecutionModeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDSetExecutionModeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDSetExecutionModeResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - WidgetID
//  - VegaJSON
//  - CompressionLevel
//  - Nonce
type MapDRenderVegaArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  WidgetID int64 `thrift:"widget_id,2" db:"widget_id" json:"widget_id"`
  VegaJSON string `thrift:"vega_json,3" db:"vega_json" json:"vega_json"`
  CompressionLevel int32 `thrift:"compression_level,4" db:"compression_level" json:"compression_level"`
  Nonce string `thrift:"nonce,5" db:"nonce" json:"nonce"`
}

func NewMapDRenderVegaArgs() *MapDRenderVegaArgs {
  return &MapDRenderVegaArgs{}
}


func (p *MapDRenderVegaArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDRenderVegaArgs) GetWidgetID() int64 {
  return p.WidgetID
}

func (p *MapDRenderVegaArgs) GetVegaJSON() string {
  return p.VegaJSON
}

func (p *MapDRenderVegaArgs) GetCompressionLevel() int32 {
  return p.CompressionLevel
}

func (p *MapDRenderVegaArgs) GetNonce() string {
  return p.Nonce
}
func (p *MapDRenderVegaArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDRenderVegaArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDRenderVegaArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WidgetID = v
}
  return nil
}

func (p *MapDRenderVegaArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.VegaJSON = v
}
  return nil
}

func (p *MapDRenderVegaArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CompressionLevel = v
}
  return nil
}

func (p *MapDRenderVegaArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *MapDRenderVegaArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("render_vega_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDRenderVegaArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDRenderVegaArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("widget_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:widget_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.WidgetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.widget_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:widget_id: ", p), err) }
  return err
}

func (p *MapDRenderVegaArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vega_json", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vega_json: ", p), err) }
  if err := oprot.WriteString(string(p.VegaJSON)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vega_json (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vega_json: ", p), err) }
  return err
}

func (p *MapDRenderVegaArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("compression_level", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:compression_level: ", p), err) }
  if err := oprot.WriteI32(int32(p.CompressionLevel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.compression_level (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:compression_level: ", p), err) }
  return err
}

func (p *MapDRenderVegaArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nonce: ", p), err) }
  if err := oprot.WriteString(string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nonce: ", p), err) }
  return err
}

func (p *MapDRenderVegaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDRenderVegaArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDRenderVegaResult struct {
  Success *TRenderResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDRenderVegaResult() *MapDRenderVegaResult {
  return &MapDRenderVegaResult{}
}

var MapDRenderVegaResult_Success_DEFAULT *TRenderResult_
func (p *MapDRenderVegaResult) GetSuccess() *TRenderResult_ {
  if !p.IsSetSuccess() {
    return MapDRenderVegaResult_Success_DEFAULT
  }
return p.Success
}
var MapDRenderVegaResult_E_DEFAULT *TMapDException
func (p *MapDRenderVegaResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDRenderVegaResult_E_DEFAULT
  }
return p.E
}
func (p *MapDRenderVegaResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDRenderVegaResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDRenderVegaResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDRenderVegaResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TRenderResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MapDRenderVegaResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDRenderVegaResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("render_vega_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDRenderVegaResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDRenderVegaResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDRenderVegaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDRenderVegaResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - WidgetID
//  - Pixel
//  - TableColNames
//  - ColumnFormat
//  - PixelRadius
//  - Nonce
type MapDGetResultRowForPixelArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  WidgetID int64 `thrift:"widget_id,2" db:"widget_id" json:"widget_id"`
  Pixel *TPixel `thrift:"pixel,3" db:"pixel" json:"pixel"`
  TableColNames map[string][]string `thrift:"table_col_names,4" db:"table_col_names" json:"table_col_names"`
  ColumnFormat bool `thrift:"column_format,5" db:"column_format" json:"column_format"`
  PixelRadius int32 `thrift:"pixelRadius,6" db:"pixelRadius" json:"pixelRadius"`
  Nonce string `thrift:"nonce,7" db:"nonce" json:"nonce"`
}

func NewMapDGetResultRowForPixelArgs() *MapDGetResultRowForPixelArgs {
  return &MapDGetResultRowForPixelArgs{}
}


func (p *MapDGetResultRowForPixelArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDGetResultRowForPixelArgs) GetWidgetID() int64 {
  return p.WidgetID
}
var MapDGetResultRowForPixelArgs_Pixel_DEFAULT *TPixel
func (p *MapDGetResultRowForPixelArgs) GetPixel() *TPixel {
  if !p.IsSetPixel() {
    return MapDGetResultRowForPixelArgs_Pixel_DEFAULT
  }
return p.Pixel
}

func (p *MapDGetResultRowForPixelArgs) GetTableColNames() map[string][]string {
  return p.TableColNames
}

func (p *MapDGetResultRowForPixelArgs) GetColumnFormat() bool {
  return p.ColumnFormat
}

func (p *MapDGetResultRowForPixelArgs) GetPixelRadius() int32 {
  return p.PixelRadius
}

func (p *MapDGetResultRowForPixelArgs) GetNonce() string {
  return p.Nonce
}
func (p *MapDGetResultRowForPixelArgs) IsSetPixel() bool {
  return p.Pixel != nil
}

func (p *MapDGetResultRowForPixelArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetResultRowForPixelArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDGetResultRowForPixelArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WidgetID = v
}
  return nil
}

func (p *MapDGetResultRowForPixelArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.Pixel = &TPixel{}
  if err := p.Pixel.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pixel), err)
  }
  return nil
}

func (p *MapDGetResultRowForPixelArgs)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]string, size)
  p.TableColNames =  tMap
  for i := 0; i < size; i ++ {
var _key122 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key122 = v
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]string, 0, size)
    _val123 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem124 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _elem124 = v
}
      _val123 = append(_val123, _elem124)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.TableColNames[_key122] = _val123
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MapDGetResultRowForPixelArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ColumnFormat = v
}
  return nil
}

func (p *MapDGetResultRowForPixelArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.PixelRadius = v
}
  return nil
}

func (p *MapDGetResultRowForPixelArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *MapDGetResultRowForPixelArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_result_row_for_pixel_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetResultRowForPixelArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDGetResultRowForPixelArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("widget_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:widget_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.WidgetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.widget_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:widget_id: ", p), err) }
  return err
}

func (p *MapDGetResultRowForPixelArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pixel", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pixel: ", p), err) }
  if err := p.Pixel.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pixel), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pixel: ", p), err) }
  return err
}

func (p *MapDGetResultRowForPixelArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_col_names", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:table_col_names: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.TableColNames)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.TableColNames {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:table_col_names: ", p), err) }
  return err
}

func (p *MapDGetResultRowForPixelArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("column_format", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:column_format: ", p), err) }
  if err := oprot.WriteBool(bool(p.ColumnFormat)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.column_format (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:column_format: ", p), err) }
  return err
}

func (p *MapDGetResultRowForPixelArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pixelRadius", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:pixelRadius: ", p), err) }
  if err := oprot.WriteI32(int32(p.PixelRadius)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pixelRadius (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:pixelRadius: ", p), err) }
  return err
}

func (p *MapDGetResultRowForPixelArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:nonce: ", p), err) }
  if err := oprot.WriteString(string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:nonce: ", p), err) }
  return err
}

func (p *MapDGetResultRowForPixelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetResultRowForPixelArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDGetResultRowForPixelResult struct {
  Success *TPixelTableRowResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDGetResultRowForPixelResult() *MapDGetResultRowForPixelResult {
  return &MapDGetResultRowForPixelResult{}
}

var MapDGetResultRowForPixelResult_Success_DEFAULT *TPixelTableRowResult_
func (p *MapDGetResultRowForPixelResult) GetSuccess() *TPixelTableRowResult_ {
  if !p.IsSetSuccess() {
    return MapDGetResultRowForPixelResult_Success_DEFAULT
  }
return p.Success
}
var MapDGetResultRowForPixelResult_E_DEFAULT *TMapDException
func (p *MapDGetResultRowForPixelResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDGetResultRowForPixelResult_E_DEFAULT
  }
return p.E
}
func (p *MapDGetResultRowForPixelResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDGetResultRowForPixelResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDGetResultRowForPixelResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetResultRowForPixelResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TPixelTableRowResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MapDGetResultRowForPixelResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDGetResultRowForPixelResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_result_row_for_pixel_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetResultRowForPixelResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDGetResultRowForPixelResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDGetResultRowForPixelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetResultRowForPixelResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - ViewName
type MapDGetFrontendViewArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  ViewName string `thrift:"view_name,2" db:"view_name" json:"view_name"`
}

func NewMapDGetFrontendViewArgs() *MapDGetFrontendViewArgs {
  return &MapDGetFrontendViewArgs{}
}


func (p *MapDGetFrontendViewArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDGetFrontendViewArgs) GetViewName() string {
  return p.ViewName
}
func (p *MapDGetFrontendViewArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetFrontendViewArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDGetFrontendViewArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ViewName = v
}
  return nil
}

func (p *MapDGetFrontendViewArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_frontend_view_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetFrontendViewArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDGetFrontendViewArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("view_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:view_name: ", p), err) }
  if err := oprot.WriteString(string(p.ViewName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.view_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:view_name: ", p), err) }
  return err
}

func (p *MapDGetFrontendViewArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetFrontendViewArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDGetFrontendViewResult struct {
  Success *TFrontendView `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDGetFrontendViewResult() *MapDGetFrontendViewResult {
  return &MapDGetFrontendViewResult{}
}

var MapDGetFrontendViewResult_Success_DEFAULT *TFrontendView
func (p *MapDGetFrontendViewResult) GetSuccess() *TFrontendView {
  if !p.IsSetSuccess() {
    return MapDGetFrontendViewResult_Success_DEFAULT
  }
return p.Success
}
var MapDGetFrontendViewResult_E_DEFAULT *TMapDException
func (p *MapDGetFrontendViewResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDGetFrontendViewResult_E_DEFAULT
  }
return p.E
}
func (p *MapDGetFrontendViewResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDGetFrontendViewResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDGetFrontendViewResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetFrontendViewResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TFrontendView{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MapDGetFrontendViewResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDGetFrontendViewResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_frontend_view_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetFrontendViewResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDGetFrontendViewResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDGetFrontendViewResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetFrontendViewResult(%+v)", *p)
}

// Attributes:
//  - Session
type MapDGetFrontendViewsArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewMapDGetFrontendViewsArgs() *MapDGetFrontendViewsArgs {
  return &MapDGetFrontendViewsArgs{}
}


func (p *MapDGetFrontendViewsArgs) GetSession() TSessionId {
  return p.Session
}
func (p *MapDGetFrontendViewsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetFrontendViewsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDGetFrontendViewsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_frontend_views_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetFrontendViewsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDGetFrontendViewsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetFrontendViewsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDGetFrontendViewsResult struct {
  Success []*TFrontendView `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDGetFrontendViewsResult() *MapDGetFrontendViewsResult {
  return &MapDGetFrontendViewsResult{}
}

var MapDGetFrontendViewsResult_Success_DEFAULT []*TFrontendView

func (p *MapDGetFrontendViewsResult) GetSuccess() []*TFrontendView {
  return p.Success
}
var MapDGetFrontendViewsResult_E_DEFAULT *TMapDException
func (p *MapDGetFrontendViewsResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDGetFrontendViewsResult_E_DEFAULT
  }
return p.E
}
func (p *MapDGetFrontendViewsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDGetFrontendViewsResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDGetFrontendViewsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetFrontendViewsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TFrontendView, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem125 := &TFrontendView{}
    if err := _elem125.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem125), err)
    }
    p.Success = append(p.Success, _elem125)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MapDGetFrontendViewsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDGetFrontendViewsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_frontend_views_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetFrontendViewsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDGetFrontendViewsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDGetFrontendViewsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetFrontendViewsResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - ViewName
//  - ViewState
//  - ImageHash
//  - ViewMetadata
type MapDCreateFrontendViewArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  ViewName string `thrift:"view_name,2" db:"view_name" json:"view_name"`
  ViewState string `thrift:"view_state,3" db:"view_state" json:"view_state"`
  ImageHash string `thrift:"image_hash,4" db:"image_hash" json:"image_hash"`
  ViewMetadata string `thrift:"view_metadata,5" db:"view_metadata" json:"view_metadata"`
}

func NewMapDCreateFrontendViewArgs() *MapDCreateFrontendViewArgs {
  return &MapDCreateFrontendViewArgs{}
}


func (p *MapDCreateFrontendViewArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDCreateFrontendViewArgs) GetViewName() string {
  return p.ViewName
}

func (p *MapDCreateFrontendViewArgs) GetViewState() string {
  return p.ViewState
}

func (p *MapDCreateFrontendViewArgs) GetImageHash() string {
  return p.ImageHash
}

func (p *MapDCreateFrontendViewArgs) GetViewMetadata() string {
  return p.ViewMetadata
}
func (p *MapDCreateFrontendViewArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDCreateFrontendViewArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDCreateFrontendViewArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ViewName = v
}
  return nil
}

func (p *MapDCreateFrontendViewArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ViewState = v
}
  return nil
}

func (p *MapDCreateFrontendViewArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ImageHash = v
}
  return nil
}

func (p *MapDCreateFrontendViewArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ViewMetadata = v
}
  return nil
}

func (p *MapDCreateFrontendViewArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_frontend_view_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDCreateFrontendViewArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDCreateFrontendViewArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("view_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:view_name: ", p), err) }
  if err := oprot.WriteString(string(p.ViewName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.view_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:view_name: ", p), err) }
  return err
}

func (p *MapDCreateFrontendViewArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("view_state", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:view_state: ", p), err) }
  if err := oprot.WriteString(string(p.ViewState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.view_state (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:view_state: ", p), err) }
  return err
}

func (p *MapDCreateFrontendViewArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_hash", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:image_hash: ", p), err) }
  if err := oprot.WriteString(string(p.ImageHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.image_hash (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:image_hash: ", p), err) }
  return err
}

func (p *MapDCreateFrontendViewArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("view_metadata", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:view_metadata: ", p), err) }
  if err := oprot.WriteString(string(p.ViewMetadata)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.view_metadata (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:view_metadata: ", p), err) }
  return err
}

func (p *MapDCreateFrontendViewArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDCreateFrontendViewArgs(%+v)", *p)
}

// Attributes:
//  - E
type MapDCreateFrontendViewResult struct {
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDCreateFrontendViewResult() *MapDCreateFrontendViewResult {
  return &MapDCreateFrontendViewResult{}
}

var MapDCreateFrontendViewResult_E_DEFAULT *TMapDException
func (p *MapDCreateFrontendViewResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDCreateFrontendViewResult_E_DEFAULT
  }
return p.E
}
func (p *MapDCreateFrontendViewResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDCreateFrontendViewResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDCreateFrontendViewResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDCreateFrontendViewResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_frontend_view_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDCreateFrontendViewResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDCreateFrontendViewResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDCreateFrontendViewResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - ViewName
type MapDDeleteFrontendViewArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  ViewName string `thrift:"view_name,2" db:"view_name" json:"view_name"`
}

func NewMapDDeleteFrontendViewArgs() *MapDDeleteFrontendViewArgs {
  return &MapDDeleteFrontendViewArgs{}
}


func (p *MapDDeleteFrontendViewArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDDeleteFrontendViewArgs) GetViewName() string {
  return p.ViewName
}
func (p *MapDDeleteFrontendViewArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDDeleteFrontendViewArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDDeleteFrontendViewArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ViewName = v
}
  return nil
}

func (p *MapDDeleteFrontendViewArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("delete_frontend_view_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDDeleteFrontendViewArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDDeleteFrontendViewArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("view_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:view_name: ", p), err) }
  if err := oprot.WriteString(string(p.ViewName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.view_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:view_name: ", p), err) }
  return err
}

func (p *MapDDeleteFrontendViewArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDDeleteFrontendViewArgs(%+v)", *p)
}

// Attributes:
//  - E
type MapDDeleteFrontendViewResult struct {
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDDeleteFrontendViewResult() *MapDDeleteFrontendViewResult {
  return &MapDDeleteFrontendViewResult{}
}

var MapDDeleteFrontendViewResult_E_DEFAULT *TMapDException
func (p *MapDDeleteFrontendViewResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDDeleteFrontendViewResult_E_DEFAULT
  }
return p.E
}
func (p *MapDDeleteFrontendViewResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDDeleteFrontendViewResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDDeleteFrontendViewResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDDeleteFrontendViewResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("delete_frontend_view_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDDeleteFrontendViewResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDDeleteFrontendViewResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDDeleteFrontendViewResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Link
type MapDGetLinkViewArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  Link string `thrift:"link,2" db:"link" json:"link"`
}

func NewMapDGetLinkViewArgs() *MapDGetLinkViewArgs {
  return &MapDGetLinkViewArgs{}
}


func (p *MapDGetLinkViewArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDGetLinkViewArgs) GetLink() string {
  return p.Link
}
func (p *MapDGetLinkViewArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetLinkViewArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDGetLinkViewArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Link = v
}
  return nil
}

func (p *MapDGetLinkViewArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_link_view_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetLinkViewArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDGetLinkViewArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("link", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:link: ", p), err) }
  if err := oprot.WriteString(string(p.Link)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.link (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:link: ", p), err) }
  return err
}

func (p *MapDGetLinkViewArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetLinkViewArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDGetLinkViewResult struct {
  Success *TFrontendView `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDGetLinkViewResult() *MapDGetLinkViewResult {
  return &MapDGetLinkViewResult{}
}

var MapDGetLinkViewResult_Success_DEFAULT *TFrontendView
func (p *MapDGetLinkViewResult) GetSuccess() *TFrontendView {
  if !p.IsSetSuccess() {
    return MapDGetLinkViewResult_Success_DEFAULT
  }
return p.Success
}
var MapDGetLinkViewResult_E_DEFAULT *TMapDException
func (p *MapDGetLinkViewResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDGetLinkViewResult_E_DEFAULT
  }
return p.E
}
func (p *MapDGetLinkViewResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDGetLinkViewResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDGetLinkViewResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetLinkViewResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TFrontendView{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MapDGetLinkViewResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDGetLinkViewResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_link_view_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetLinkViewResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDGetLinkViewResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDGetLinkViewResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetLinkViewResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - ViewState
//  - ViewMetadata
type MapDCreateLinkArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  ViewState string `thrift:"view_state,2" db:"view_state" json:"view_state"`
  ViewMetadata string `thrift:"view_metadata,3" db:"view_metadata" json:"view_metadata"`
}

func NewMapDCreateLinkArgs() *MapDCreateLinkArgs {
  return &MapDCreateLinkArgs{}
}


func (p *MapDCreateLinkArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDCreateLinkArgs) GetViewState() string {
  return p.ViewState
}

func (p *MapDCreateLinkArgs) GetViewMetadata() string {
  return p.ViewMetadata
}
func (p *MapDCreateLinkArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDCreateLinkArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDCreateLinkArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ViewState = v
}
  return nil
}

func (p *MapDCreateLinkArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ViewMetadata = v
}
  return nil
}

func (p *MapDCreateLinkArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_link_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDCreateLinkArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDCreateLinkArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("view_state", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:view_state: ", p), err) }
  if err := oprot.WriteString(string(p.ViewState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.view_state (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:view_state: ", p), err) }
  return err
}

func (p *MapDCreateLinkArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("view_metadata", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:view_metadata: ", p), err) }
  if err := oprot.WriteString(string(p.ViewMetadata)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.view_metadata (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:view_metadata: ", p), err) }
  return err
}

func (p *MapDCreateLinkArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDCreateLinkArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDCreateLinkResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDCreateLinkResult() *MapDCreateLinkResult {
  return &MapDCreateLinkResult{}
}

var MapDCreateLinkResult_Success_DEFAULT string
func (p *MapDCreateLinkResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return MapDCreateLinkResult_Success_DEFAULT
  }
return *p.Success
}
var MapDCreateLinkResult_E_DEFAULT *TMapDException
func (p *MapDCreateLinkResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDCreateLinkResult_E_DEFAULT
  }
return p.E
}
func (p *MapDCreateLinkResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDCreateLinkResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDCreateLinkResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDCreateLinkResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MapDCreateLinkResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDCreateLinkResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_link_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDCreateLinkResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDCreateLinkResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDCreateLinkResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDCreateLinkResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
//  - Rows
type MapDLoadTableBinaryArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
  Rows []*TRow `thrift:"rows,3" db:"rows" json:"rows"`
}

func NewMapDLoadTableBinaryArgs() *MapDLoadTableBinaryArgs {
  return &MapDLoadTableBinaryArgs{}
}


func (p *MapDLoadTableBinaryArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDLoadTableBinaryArgs) GetTableName() string {
  return p.TableName
}

func (p *MapDLoadTableBinaryArgs) GetRows() []*TRow {
  return p.Rows
}
func (p *MapDLoadTableBinaryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDLoadTableBinaryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDLoadTableBinaryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *MapDLoadTableBinaryArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TRow, 0, size)
  p.Rows =  tSlice
  for i := 0; i < size; i ++ {
    _elem126 := &TRow{}
    if err := _elem126.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem126), err)
    }
    p.Rows = append(p.Rows, _elem126)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MapDLoadTableBinaryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("load_table_binary_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDLoadTableBinaryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDLoadTableBinaryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *MapDLoadTableBinaryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rows", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rows: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Rows)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Rows {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rows: ", p), err) }
  return err
}

func (p *MapDLoadTableBinaryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDLoadTableBinaryArgs(%+v)", *p)
}

// Attributes:
//  - E
type MapDLoadTableBinaryResult struct {
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDLoadTableBinaryResult() *MapDLoadTableBinaryResult {
  return &MapDLoadTableBinaryResult{}
}

var MapDLoadTableBinaryResult_E_DEFAULT *TMapDException
func (p *MapDLoadTableBinaryResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDLoadTableBinaryResult_E_DEFAULT
  }
return p.E
}
func (p *MapDLoadTableBinaryResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDLoadTableBinaryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDLoadTableBinaryResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDLoadTableBinaryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("load_table_binary_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDLoadTableBinaryResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDLoadTableBinaryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDLoadTableBinaryResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
//  - Rows
type MapDLoadTableArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
  Rows []*TStringRow `thrift:"rows,3" db:"rows" json:"rows"`
}

func NewMapDLoadTableArgs() *MapDLoadTableArgs {
  return &MapDLoadTableArgs{}
}


func (p *MapDLoadTableArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDLoadTableArgs) GetTableName() string {
  return p.TableName
}

func (p *MapDLoadTableArgs) GetRows() []*TStringRow {
  return p.Rows
}
func (p *MapDLoadTableArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDLoadTableArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDLoadTableArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *MapDLoadTableArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TStringRow, 0, size)
  p.Rows =  tSlice
  for i := 0; i < size; i ++ {
    _elem127 := &TStringRow{}
    if err := _elem127.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem127), err)
    }
    p.Rows = append(p.Rows, _elem127)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MapDLoadTableArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("load_table_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDLoadTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDLoadTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *MapDLoadTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rows", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rows: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Rows)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Rows {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rows: ", p), err) }
  return err
}

func (p *MapDLoadTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDLoadTableArgs(%+v)", *p)
}

// Attributes:
//  - E
type MapDLoadTableResult struct {
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDLoadTableResult() *MapDLoadTableResult {
  return &MapDLoadTableResult{}
}

var MapDLoadTableResult_E_DEFAULT *TMapDException
func (p *MapDLoadTableResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDLoadTableResult_E_DEFAULT
  }
return p.E
}
func (p *MapDLoadTableResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDLoadTableResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDLoadTableResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDLoadTableResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("load_table_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDLoadTableResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDLoadTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDLoadTableResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - FileName
//  - CopyParams
type MapDDetectColumnTypesArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  FileName string `thrift:"file_name,2" db:"file_name" json:"file_name"`
  CopyParams *TCopyParams `thrift:"copy_params,3" db:"copy_params" json:"copy_params"`
}

func NewMapDDetectColumnTypesArgs() *MapDDetectColumnTypesArgs {
  return &MapDDetectColumnTypesArgs{}
}


func (p *MapDDetectColumnTypesArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDDetectColumnTypesArgs) GetFileName() string {
  return p.FileName
}
var MapDDetectColumnTypesArgs_CopyParams_DEFAULT *TCopyParams
func (p *MapDDetectColumnTypesArgs) GetCopyParams() *TCopyParams {
  if !p.IsSetCopyParams() {
    return MapDDetectColumnTypesArgs_CopyParams_DEFAULT
  }
return p.CopyParams
}
func (p *MapDDetectColumnTypesArgs) IsSetCopyParams() bool {
  return p.CopyParams != nil
}

func (p *MapDDetectColumnTypesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDDetectColumnTypesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDDetectColumnTypesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FileName = v
}
  return nil
}

func (p *MapDDetectColumnTypesArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.CopyParams = &TCopyParams{
  TableType:   0,
}
  if err := p.CopyParams.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CopyParams), err)
  }
  return nil
}

func (p *MapDDetectColumnTypesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("detect_column_types_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDDetectColumnTypesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDDetectColumnTypesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("file_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:file_name: ", p), err) }
  if err := oprot.WriteString(string(p.FileName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.file_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:file_name: ", p), err) }
  return err
}

func (p *MapDDetectColumnTypesArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("copy_params", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:copy_params: ", p), err) }
  if err := p.CopyParams.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CopyParams), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:copy_params: ", p), err) }
  return err
}

func (p *MapDDetectColumnTypesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDDetectColumnTypesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDDetectColumnTypesResult struct {
  Success *TDetectResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDDetectColumnTypesResult() *MapDDetectColumnTypesResult {
  return &MapDDetectColumnTypesResult{}
}

var MapDDetectColumnTypesResult_Success_DEFAULT *TDetectResult_
func (p *MapDDetectColumnTypesResult) GetSuccess() *TDetectResult_ {
  if !p.IsSetSuccess() {
    return MapDDetectColumnTypesResult_Success_DEFAULT
  }
return p.Success
}
var MapDDetectColumnTypesResult_E_DEFAULT *TMapDException
func (p *MapDDetectColumnTypesResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDDetectColumnTypesResult_E_DEFAULT
  }
return p.E
}
func (p *MapDDetectColumnTypesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDDetectColumnTypesResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDDetectColumnTypesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDDetectColumnTypesResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDetectResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MapDDetectColumnTypesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDDetectColumnTypesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("detect_column_types_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDDetectColumnTypesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDDetectColumnTypesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDDetectColumnTypesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDDetectColumnTypesResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
//  - RowDesc
//  - TableType
type MapDCreateTableArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
  RowDesc TRowDescriptor `thrift:"row_desc,3" db:"row_desc" json:"row_desc"`
  TableType TTableType `thrift:"table_type,4" db:"table_type" json:"table_type"`
}

func NewMapDCreateTableArgs() *MapDCreateTableArgs {
  return &MapDCreateTableArgs{
TableType: 0,
}
}


func (p *MapDCreateTableArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDCreateTableArgs) GetTableName() string {
  return p.TableName
}

func (p *MapDCreateTableArgs) GetRowDesc() TRowDescriptor {
  return p.RowDesc
}

func (p *MapDCreateTableArgs) GetTableType() TTableType {
  return p.TableType
}
func (p *MapDCreateTableArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDCreateTableArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDCreateTableArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *MapDCreateTableArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make(TRowDescriptor, 0, size)
  p.RowDesc =  tSlice
  for i := 0; i < size; i ++ {
    _elem128 := &TColumnType{}
    if err := _elem128.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem128), err)
    }
    p.RowDesc = append(p.RowDesc, _elem128)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MapDCreateTableArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TTableType(v)
  p.TableType = temp
}
  return nil
}

func (p *MapDCreateTableArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_table_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDCreateTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDCreateTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *MapDCreateTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_desc", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:row_desc: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowDesc)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RowDesc {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:row_desc: ", p), err) }
  return err
}

func (p *MapDCreateTableArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_type", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:table_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.TableType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_type (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:table_type: ", p), err) }
  return err
}

func (p *MapDCreateTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDCreateTableArgs(%+v)", *p)
}

// Attributes:
//  - E
type MapDCreateTableResult struct {
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDCreateTableResult() *MapDCreateTableResult {
  return &MapDCreateTableResult{}
}

var MapDCreateTableResult_E_DEFAULT *TMapDException
func (p *MapDCreateTableResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDCreateTableResult_E_DEFAULT
  }
return p.E
}
func (p *MapDCreateTableResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDCreateTableResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDCreateTableResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDCreateTableResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_table_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDCreateTableResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDCreateTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDCreateTableResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
//  - FileName
//  - CopyParams
type MapDImportTableArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
  FileName string `thrift:"file_name,3" db:"file_name" json:"file_name"`
  CopyParams *TCopyParams `thrift:"copy_params,4" db:"copy_params" json:"copy_params"`
}

func NewMapDImportTableArgs() *MapDImportTableArgs {
  return &MapDImportTableArgs{}
}


func (p *MapDImportTableArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDImportTableArgs) GetTableName() string {
  return p.TableName
}

func (p *MapDImportTableArgs) GetFileName() string {
  return p.FileName
}
var MapDImportTableArgs_CopyParams_DEFAULT *TCopyParams
func (p *MapDImportTableArgs) GetCopyParams() *TCopyParams {
  if !p.IsSetCopyParams() {
    return MapDImportTableArgs_CopyParams_DEFAULT
  }
return p.CopyParams
}
func (p *MapDImportTableArgs) IsSetCopyParams() bool {
  return p.CopyParams != nil
}

func (p *MapDImportTableArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDImportTableArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDImportTableArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *MapDImportTableArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FileName = v
}
  return nil
}

func (p *MapDImportTableArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.CopyParams = &TCopyParams{
  TableType:   0,
}
  if err := p.CopyParams.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CopyParams), err)
  }
  return nil
}

func (p *MapDImportTableArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("import_table_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDImportTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDImportTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *MapDImportTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("file_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:file_name: ", p), err) }
  if err := oprot.WriteString(string(p.FileName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.file_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:file_name: ", p), err) }
  return err
}

func (p *MapDImportTableArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("copy_params", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:copy_params: ", p), err) }
  if err := p.CopyParams.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CopyParams), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:copy_params: ", p), err) }
  return err
}

func (p *MapDImportTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDImportTableArgs(%+v)", *p)
}

// Attributes:
//  - E
type MapDImportTableResult struct {
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDImportTableResult() *MapDImportTableResult {
  return &MapDImportTableResult{}
}

var MapDImportTableResult_E_DEFAULT *TMapDException
func (p *MapDImportTableResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDImportTableResult_E_DEFAULT
  }
return p.E
}
func (p *MapDImportTableResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDImportTableResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDImportTableResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDImportTableResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("import_table_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDImportTableResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDImportTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDImportTableResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
//  - FileName
//  - CopyParams
//  - RowDesc
type MapDImportGeoTableArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
  FileName string `thrift:"file_name,3" db:"file_name" json:"file_name"`
  CopyParams *TCopyParams `thrift:"copy_params,4" db:"copy_params" json:"copy_params"`
  RowDesc TRowDescriptor `thrift:"row_desc,5" db:"row_desc" json:"row_desc"`
}

func NewMapDImportGeoTableArgs() *MapDImportGeoTableArgs {
  return &MapDImportGeoTableArgs{}
}


func (p *MapDImportGeoTableArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDImportGeoTableArgs) GetTableName() string {
  return p.TableName
}

func (p *MapDImportGeoTableArgs) GetFileName() string {
  return p.FileName
}
var MapDImportGeoTableArgs_CopyParams_DEFAULT *TCopyParams
func (p *MapDImportGeoTableArgs) GetCopyParams() *TCopyParams {
  if !p.IsSetCopyParams() {
    return MapDImportGeoTableArgs_CopyParams_DEFAULT
  }
return p.CopyParams
}

func (p *MapDImportGeoTableArgs) GetRowDesc() TRowDescriptor {
  return p.RowDesc
}
func (p *MapDImportGeoTableArgs) IsSetCopyParams() bool {
  return p.CopyParams != nil
}

func (p *MapDImportGeoTableArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDImportGeoTableArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDImportGeoTableArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *MapDImportGeoTableArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FileName = v
}
  return nil
}

func (p *MapDImportGeoTableArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.CopyParams = &TCopyParams{
  TableType:   0,
}
  if err := p.CopyParams.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CopyParams), err)
  }
  return nil
}

func (p *MapDImportGeoTableArgs)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make(TRowDescriptor, 0, size)
  p.RowDesc =  tSlice
  for i := 0; i < size; i ++ {
    _elem129 := &TColumnType{}
    if err := _elem129.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem129), err)
    }
    p.RowDesc = append(p.RowDesc, _elem129)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MapDImportGeoTableArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("import_geo_table_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDImportGeoTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDImportGeoTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *MapDImportGeoTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("file_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:file_name: ", p), err) }
  if err := oprot.WriteString(string(p.FileName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.file_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:file_name: ", p), err) }
  return err
}

func (p *MapDImportGeoTableArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("copy_params", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:copy_params: ", p), err) }
  if err := p.CopyParams.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CopyParams), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:copy_params: ", p), err) }
  return err
}

func (p *MapDImportGeoTableArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_desc", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:row_desc: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowDesc)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RowDesc {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:row_desc: ", p), err) }
  return err
}

func (p *MapDImportGeoTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDImportGeoTableArgs(%+v)", *p)
}

// Attributes:
//  - E
type MapDImportGeoTableResult struct {
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDImportGeoTableResult() *MapDImportGeoTableResult {
  return &MapDImportGeoTableResult{}
}

var MapDImportGeoTableResult_E_DEFAULT *TMapDException
func (p *MapDImportGeoTableResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDImportGeoTableResult_E_DEFAULT
  }
return p.E
}
func (p *MapDImportGeoTableResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDImportGeoTableResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDImportGeoTableResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDImportGeoTableResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("import_geo_table_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDImportGeoTableResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDImportGeoTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDImportGeoTableResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - ImportID
type MapDImportTableStatusArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  ImportID string `thrift:"import_id,2" db:"import_id" json:"import_id"`
}

func NewMapDImportTableStatusArgs() *MapDImportTableStatusArgs {
  return &MapDImportTableStatusArgs{}
}


func (p *MapDImportTableStatusArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDImportTableStatusArgs) GetImportID() string {
  return p.ImportID
}
func (p *MapDImportTableStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDImportTableStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDImportTableStatusArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ImportID = v
}
  return nil
}

func (p *MapDImportTableStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("import_table_status_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDImportTableStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDImportTableStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("import_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:import_id: ", p), err) }
  if err := oprot.WriteString(string(p.ImportID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.import_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:import_id: ", p), err) }
  return err
}

func (p *MapDImportTableStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDImportTableStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDImportTableStatusResult struct {
  Success *TImportStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDImportTableStatusResult() *MapDImportTableStatusResult {
  return &MapDImportTableStatusResult{}
}

var MapDImportTableStatusResult_Success_DEFAULT *TImportStatus
func (p *MapDImportTableStatusResult) GetSuccess() *TImportStatus {
  if !p.IsSetSuccess() {
    return MapDImportTableStatusResult_Success_DEFAULT
  }
return p.Success
}
var MapDImportTableStatusResult_E_DEFAULT *TMapDException
func (p *MapDImportTableStatusResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDImportTableStatusResult_E_DEFAULT
  }
return p.E
}
func (p *MapDImportTableStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDImportTableStatusResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDImportTableStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDImportTableStatusResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TImportStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MapDImportTableStatusResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDImportTableStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("import_table_status_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDImportTableStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDImportTableStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDImportTableStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDImportTableStatusResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - QueryRa
//  - JustExplain
type MapDStartQueryArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  QueryRa string `thrift:"query_ra,2" db:"query_ra" json:"query_ra"`
  JustExplain bool `thrift:"just_explain,3" db:"just_explain" json:"just_explain"`
}

func NewMapDStartQueryArgs() *MapDStartQueryArgs {
  return &MapDStartQueryArgs{}
}


func (p *MapDStartQueryArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDStartQueryArgs) GetQueryRa() string {
  return p.QueryRa
}

func (p *MapDStartQueryArgs) GetJustExplain() bool {
  return p.JustExplain
}
func (p *MapDStartQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDStartQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDStartQueryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.QueryRa = v
}
  return nil
}

func (p *MapDStartQueryArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.JustExplain = v
}
  return nil
}

func (p *MapDStartQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("start_query_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDStartQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDStartQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query_ra", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query_ra: ", p), err) }
  if err := oprot.WriteString(string(p.QueryRa)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query_ra (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query_ra: ", p), err) }
  return err
}

func (p *MapDStartQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("just_explain", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:just_explain: ", p), err) }
  if err := oprot.WriteBool(bool(p.JustExplain)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.just_explain (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:just_explain: ", p), err) }
  return err
}

func (p *MapDStartQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDStartQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDStartQueryResult struct {
  Success *TPendingQuery `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDStartQueryResult() *MapDStartQueryResult {
  return &MapDStartQueryResult{}
}

var MapDStartQueryResult_Success_DEFAULT *TPendingQuery
func (p *MapDStartQueryResult) GetSuccess() *TPendingQuery {
  if !p.IsSetSuccess() {
    return MapDStartQueryResult_Success_DEFAULT
  }
return p.Success
}
var MapDStartQueryResult_E_DEFAULT *TMapDException
func (p *MapDStartQueryResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDStartQueryResult_E_DEFAULT
  }
return p.E
}
func (p *MapDStartQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDStartQueryResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDStartQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDStartQueryResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TPendingQuery{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MapDStartQueryResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDStartQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("start_query_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDStartQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDStartQueryResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDStartQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDStartQueryResult(%+v)", *p)
}

// Attributes:
//  - PendingQuery
type MapDExecuteFirstStepArgs struct {
  PendingQuery *TPendingQuery `thrift:"pending_query,1" db:"pending_query" json:"pending_query"`
}

func NewMapDExecuteFirstStepArgs() *MapDExecuteFirstStepArgs {
  return &MapDExecuteFirstStepArgs{}
}

var MapDExecuteFirstStepArgs_PendingQuery_DEFAULT *TPendingQuery
func (p *MapDExecuteFirstStepArgs) GetPendingQuery() *TPendingQuery {
  if !p.IsSetPendingQuery() {
    return MapDExecuteFirstStepArgs_PendingQuery_DEFAULT
  }
return p.PendingQuery
}
func (p *MapDExecuteFirstStepArgs) IsSetPendingQuery() bool {
  return p.PendingQuery != nil
}

func (p *MapDExecuteFirstStepArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDExecuteFirstStepArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.PendingQuery = &TPendingQuery{}
  if err := p.PendingQuery.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PendingQuery), err)
  }
  return nil
}

func (p *MapDExecuteFirstStepArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("execute_first_step_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDExecuteFirstStepArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pending_query", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pending_query: ", p), err) }
  if err := p.PendingQuery.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PendingQuery), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pending_query: ", p), err) }
  return err
}

func (p *MapDExecuteFirstStepArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDExecuteFirstStepArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDExecuteFirstStepResult struct {
  Success *TStepResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDExecuteFirstStepResult() *MapDExecuteFirstStepResult {
  return &MapDExecuteFirstStepResult{}
}

var MapDExecuteFirstStepResult_Success_DEFAULT *TStepResult_
func (p *MapDExecuteFirstStepResult) GetSuccess() *TStepResult_ {
  if !p.IsSetSuccess() {
    return MapDExecuteFirstStepResult_Success_DEFAULT
  }
return p.Success
}
var MapDExecuteFirstStepResult_E_DEFAULT *TMapDException
func (p *MapDExecuteFirstStepResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDExecuteFirstStepResult_E_DEFAULT
  }
return p.E
}
func (p *MapDExecuteFirstStepResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDExecuteFirstStepResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDExecuteFirstStepResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDExecuteFirstStepResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TStepResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MapDExecuteFirstStepResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDExecuteFirstStepResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("execute_first_step_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDExecuteFirstStepResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDExecuteFirstStepResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDExecuteFirstStepResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDExecuteFirstStepResult(%+v)", *p)
}

// Attributes:
//  - SerializedRows
//  - RowDesc
//  - QueryID
type MapDBroadcastSerializedRowsArgs struct {
  SerializedRows string `thrift:"serialized_rows,1" db:"serialized_rows" json:"serialized_rows"`
  RowDesc TRowDescriptor `thrift:"row_desc,2" db:"row_desc" json:"row_desc"`
  QueryID TQueryId `thrift:"query_id,3" db:"query_id" json:"query_id"`
}

func NewMapDBroadcastSerializedRowsArgs() *MapDBroadcastSerializedRowsArgs {
  return &MapDBroadcastSerializedRowsArgs{}
}


func (p *MapDBroadcastSerializedRowsArgs) GetSerializedRows() string {
  return p.SerializedRows
}

func (p *MapDBroadcastSerializedRowsArgs) GetRowDesc() TRowDescriptor {
  return p.RowDesc
}

func (p *MapDBroadcastSerializedRowsArgs) GetQueryID() TQueryId {
  return p.QueryID
}
func (p *MapDBroadcastSerializedRowsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDBroadcastSerializedRowsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SerializedRows = v
}
  return nil
}

func (p *MapDBroadcastSerializedRowsArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make(TRowDescriptor, 0, size)
  p.RowDesc =  tSlice
  for i := 0; i < size; i ++ {
    _elem130 := &TColumnType{}
    if err := _elem130.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem130), err)
    }
    p.RowDesc = append(p.RowDesc, _elem130)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MapDBroadcastSerializedRowsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TQueryId(v)
  p.QueryID = temp
}
  return nil
}

func (p *MapDBroadcastSerializedRowsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("broadcast_serialized_rows_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDBroadcastSerializedRowsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serialized_rows", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serialized_rows: ", p), err) }
  if err := oprot.WriteString(string(p.SerializedRows)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serialized_rows (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serialized_rows: ", p), err) }
  return err
}

func (p *MapDBroadcastSerializedRowsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_desc", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row_desc: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowDesc)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RowDesc {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row_desc: ", p), err) }
  return err
}

func (p *MapDBroadcastSerializedRowsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:query_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.QueryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:query_id: ", p), err) }
  return err
}

func (p *MapDBroadcastSerializedRowsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDBroadcastSerializedRowsArgs(%+v)", *p)
}

// Attributes:
//  - E
type MapDBroadcastSerializedRowsResult struct {
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDBroadcastSerializedRowsResult() *MapDBroadcastSerializedRowsResult {
  return &MapDBroadcastSerializedRowsResult{}
}

var MapDBroadcastSerializedRowsResult_E_DEFAULT *TMapDException
func (p *MapDBroadcastSerializedRowsResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDBroadcastSerializedRowsResult_E_DEFAULT
  }
return p.E
}
func (p *MapDBroadcastSerializedRowsResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDBroadcastSerializedRowsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDBroadcastSerializedRowsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDBroadcastSerializedRowsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("broadcast_serialized_rows_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDBroadcastSerializedRowsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDBroadcastSerializedRowsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDBroadcastSerializedRowsResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - WidgetID
//  - NodeIdx
//  - VegaJSON
type MapDRenderVegaRawPixelsArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  WidgetID int64 `thrift:"widget_id,2" db:"widget_id" json:"widget_id"`
  NodeIdx int16 `thrift:"node_idx,3" db:"node_idx" json:"node_idx"`
  VegaJSON string `thrift:"vega_json,4" db:"vega_json" json:"vega_json"`
}

func NewMapDRenderVegaRawPixelsArgs() *MapDRenderVegaRawPixelsArgs {
  return &MapDRenderVegaRawPixelsArgs{}
}


func (p *MapDRenderVegaRawPixelsArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDRenderVegaRawPixelsArgs) GetWidgetID() int64 {
  return p.WidgetID
}

func (p *MapDRenderVegaRawPixelsArgs) GetNodeIdx() int16 {
  return p.NodeIdx
}

func (p *MapDRenderVegaRawPixelsArgs) GetVegaJSON() string {
  return p.VegaJSON
}
func (p *MapDRenderVegaRawPixelsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDRenderVegaRawPixelsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDRenderVegaRawPixelsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WidgetID = v
}
  return nil
}

func (p *MapDRenderVegaRawPixelsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NodeIdx = v
}
  return nil
}

func (p *MapDRenderVegaRawPixelsArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VegaJSON = v
}
  return nil
}

func (p *MapDRenderVegaRawPixelsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("render_vega_raw_pixels_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDRenderVegaRawPixelsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDRenderVegaRawPixelsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("widget_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:widget_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.WidgetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.widget_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:widget_id: ", p), err) }
  return err
}

func (p *MapDRenderVegaRawPixelsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("node_idx", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:node_idx: ", p), err) }
  if err := oprot.WriteI16(int16(p.NodeIdx)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.node_idx (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:node_idx: ", p), err) }
  return err
}

func (p *MapDRenderVegaRawPixelsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vega_json", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:vega_json: ", p), err) }
  if err := oprot.WriteString(string(p.VegaJSON)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vega_json (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:vega_json: ", p), err) }
  return err
}

func (p *MapDRenderVegaRawPixelsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDRenderVegaRawPixelsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDRenderVegaRawPixelsResult struct {
  Success *TRawPixelDataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDRenderVegaRawPixelsResult() *MapDRenderVegaRawPixelsResult {
  return &MapDRenderVegaRawPixelsResult{}
}

var MapDRenderVegaRawPixelsResult_Success_DEFAULT *TRawPixelDataResult_
func (p *MapDRenderVegaRawPixelsResult) GetSuccess() *TRawPixelDataResult_ {
  if !p.IsSetSuccess() {
    return MapDRenderVegaRawPixelsResult_Success_DEFAULT
  }
return p.Success
}
var MapDRenderVegaRawPixelsResult_E_DEFAULT *TMapDException
func (p *MapDRenderVegaRawPixelsResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDRenderVegaRawPixelsResult_E_DEFAULT
  }
return p.E
}
func (p *MapDRenderVegaRawPixelsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDRenderVegaRawPixelsResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDRenderVegaRawPixelsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDRenderVegaRawPixelsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TRawPixelDataResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MapDRenderVegaRawPixelsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDRenderVegaRawPixelsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("render_vega_raw_pixels_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDRenderVegaRawPixelsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDRenderVegaRawPixelsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDRenderVegaRawPixelsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDRenderVegaRawPixelsResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - InsertData
type MapDInsertDataArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  InsertData *TInsertData `thrift:"insert_data,2" db:"insert_data" json:"insert_data"`
}

func NewMapDInsertDataArgs() *MapDInsertDataArgs {
  return &MapDInsertDataArgs{}
}


func (p *MapDInsertDataArgs) GetSession() TSessionId {
  return p.Session
}
var MapDInsertDataArgs_InsertData_DEFAULT *TInsertData
func (p *MapDInsertDataArgs) GetInsertData() *TInsertData {
  if !p.IsSetInsertData() {
    return MapDInsertDataArgs_InsertData_DEFAULT
  }
return p.InsertData
}
func (p *MapDInsertDataArgs) IsSetInsertData() bool {
  return p.InsertData != nil
}

func (p *MapDInsertDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDInsertDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDInsertDataArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.InsertData = &TInsertData{}
  if err := p.InsertData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InsertData), err)
  }
  return nil
}

func (p *MapDInsertDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("insert_data_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDInsertDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDInsertDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("insert_data", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:insert_data: ", p), err) }
  if err := p.InsertData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InsertData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:insert_data: ", p), err) }
  return err
}

func (p *MapDInsertDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDInsertDataArgs(%+v)", *p)
}

// Attributes:
//  - E
type MapDInsertDataResult struct {
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDInsertDataResult() *MapDInsertDataResult {
  return &MapDInsertDataResult{}
}

var MapDInsertDataResult_E_DEFAULT *TMapDException
func (p *MapDInsertDataResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDInsertDataResult_E_DEFAULT
  }
return p.E
}
func (p *MapDInsertDataResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDInsertDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDInsertDataResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDInsertDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("insert_data_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDInsertDataResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDInsertDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDInsertDataResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
type MapDGetTableDescriptorArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
}

func NewMapDGetTableDescriptorArgs() *MapDGetTableDescriptorArgs {
  return &MapDGetTableDescriptorArgs{}
}


func (p *MapDGetTableDescriptorArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDGetTableDescriptorArgs) GetTableName() string {
  return p.TableName
}
func (p *MapDGetTableDescriptorArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetTableDescriptorArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDGetTableDescriptorArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *MapDGetTableDescriptorArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_table_descriptor_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetTableDescriptorArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDGetTableDescriptorArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *MapDGetTableDescriptorArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetTableDescriptorArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDGetTableDescriptorResult struct {
  Success TTableDescriptor `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDGetTableDescriptorResult() *MapDGetTableDescriptorResult {
  return &MapDGetTableDescriptorResult{}
}

var MapDGetTableDescriptorResult_Success_DEFAULT TTableDescriptor

func (p *MapDGetTableDescriptorResult) GetSuccess() TTableDescriptor {
  return p.Success
}
var MapDGetTableDescriptorResult_E_DEFAULT *TMapDException
func (p *MapDGetTableDescriptorResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDGetTableDescriptorResult_E_DEFAULT
  }
return p.E
}
func (p *MapDGetTableDescriptorResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDGetTableDescriptorResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDGetTableDescriptorResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetTableDescriptorResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(TTableDescriptor, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key131 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key131 = v
}
    _val132 := &TColumnType{}
    if err := _val132.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val132), err)
    }
    p.Success[_key131] = _val132
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MapDGetTableDescriptorResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDGetTableDescriptorResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_table_descriptor_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetTableDescriptorResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDGetTableDescriptorResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDGetTableDescriptorResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetTableDescriptorResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
type MapDGetRowDescriptorArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
}

func NewMapDGetRowDescriptorArgs() *MapDGetRowDescriptorArgs {
  return &MapDGetRowDescriptorArgs{}
}


func (p *MapDGetRowDescriptorArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDGetRowDescriptorArgs) GetTableName() string {
  return p.TableName
}
func (p *MapDGetRowDescriptorArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetRowDescriptorArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDGetRowDescriptorArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *MapDGetRowDescriptorArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_row_descriptor_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetRowDescriptorArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDGetRowDescriptorArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *MapDGetRowDescriptorArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetRowDescriptorArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDGetRowDescriptorResult struct {
  Success TRowDescriptor `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDGetRowDescriptorResult() *MapDGetRowDescriptorResult {
  return &MapDGetRowDescriptorResult{}
}

var MapDGetRowDescriptorResult_Success_DEFAULT TRowDescriptor

func (p *MapDGetRowDescriptorResult) GetSuccess() TRowDescriptor {
  return p.Success
}
var MapDGetRowDescriptorResult_E_DEFAULT *TMapDException
func (p *MapDGetRowDescriptorResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDGetRowDescriptorResult_E_DEFAULT
  }
return p.E
}
func (p *MapDGetRowDescriptorResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDGetRowDescriptorResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDGetRowDescriptorResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetRowDescriptorResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make(TRowDescriptor, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem133 := &TColumnType{}
    if err := _elem133.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem133), err)
    }
    p.Success = append(p.Success, _elem133)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MapDGetRowDescriptorResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDGetRowDescriptorResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_row_descriptor_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetRowDescriptorResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDGetRowDescriptorResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDGetRowDescriptorResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetRowDescriptorResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Query
//  - RenderType
//  - Nonce
type MapDRenderArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  Query string `thrift:"query,2" db:"query" json:"query"`
  RenderType string `thrift:"render_type,3" db:"render_type" json:"render_type"`
  Nonce string `thrift:"nonce,4" db:"nonce" json:"nonce"`
}

func NewMapDRenderArgs() *MapDRenderArgs {
  return &MapDRenderArgs{}
}


func (p *MapDRenderArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDRenderArgs) GetQuery() string {
  return p.Query
}

func (p *MapDRenderArgs) GetRenderType() string {
  return p.RenderType
}

func (p *MapDRenderArgs) GetNonce() string {
  return p.Nonce
}
func (p *MapDRenderArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDRenderArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDRenderArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Query = v
}
  return nil
}

func (p *MapDRenderArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RenderType = v
}
  return nil
}

func (p *MapDRenderArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *MapDRenderArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("render_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDRenderArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDRenderArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query: ", p), err) }
  if err := oprot.WriteString(string(p.Query)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query: ", p), err) }
  return err
}

func (p *MapDRenderArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("render_type", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:render_type: ", p), err) }
  if err := oprot.WriteString(string(p.RenderType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.render_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:render_type: ", p), err) }
  return err
}

func (p *MapDRenderArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nonce: ", p), err) }
  if err := oprot.WriteString(string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nonce: ", p), err) }
  return err
}

func (p *MapDRenderArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDRenderArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDRenderResult struct {
  Success *TRenderResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDRenderResult() *MapDRenderResult {
  return &MapDRenderResult{}
}

var MapDRenderResult_Success_DEFAULT *TRenderResult_
func (p *MapDRenderResult) GetSuccess() *TRenderResult_ {
  if !p.IsSetSuccess() {
    return MapDRenderResult_Success_DEFAULT
  }
return p.Success
}
var MapDRenderResult_E_DEFAULT *TMapDException
func (p *MapDRenderResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDRenderResult_E_DEFAULT
  }
return p.E
}
func (p *MapDRenderResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDRenderResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDRenderResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDRenderResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TRenderResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MapDRenderResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDRenderResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("render_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDRenderResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDRenderResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDRenderResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDRenderResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - WidgetID
//  - Pixels
//  - TableName
//  - ColNames
//  - ColumnFormat
//  - Nonce
type MapDGetRowsForPixelsArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  WidgetID int64 `thrift:"widget_id,2" db:"widget_id" json:"widget_id"`
  Pixels []*TPixel `thrift:"pixels,3" db:"pixels" json:"pixels"`
  TableName string `thrift:"table_name,4" db:"table_name" json:"table_name"`
  ColNames []string `thrift:"col_names,5" db:"col_names" json:"col_names"`
  ColumnFormat bool `thrift:"column_format,6" db:"column_format" json:"column_format"`
  Nonce string `thrift:"nonce,7" db:"nonce" json:"nonce"`
}

func NewMapDGetRowsForPixelsArgs() *MapDGetRowsForPixelsArgs {
  return &MapDGetRowsForPixelsArgs{}
}


func (p *MapDGetRowsForPixelsArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDGetRowsForPixelsArgs) GetWidgetID() int64 {
  return p.WidgetID
}

func (p *MapDGetRowsForPixelsArgs) GetPixels() []*TPixel {
  return p.Pixels
}

func (p *MapDGetRowsForPixelsArgs) GetTableName() string {
  return p.TableName
}

func (p *MapDGetRowsForPixelsArgs) GetColNames() []string {
  return p.ColNames
}

func (p *MapDGetRowsForPixelsArgs) GetColumnFormat() bool {
  return p.ColumnFormat
}

func (p *MapDGetRowsForPixelsArgs) GetNonce() string {
  return p.Nonce
}
func (p *MapDGetRowsForPixelsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetRowsForPixelsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDGetRowsForPixelsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WidgetID = v
}
  return nil
}

func (p *MapDGetRowsForPixelsArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TPixel, 0, size)
  p.Pixels =  tSlice
  for i := 0; i < size; i ++ {
    _elem134 := &TPixel{}
    if err := _elem134.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem134), err)
    }
    p.Pixels = append(p.Pixels, _elem134)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MapDGetRowsForPixelsArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *MapDGetRowsForPixelsArgs)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ColNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem135 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem135 = v
}
    p.ColNames = append(p.ColNames, _elem135)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MapDGetRowsForPixelsArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ColumnFormat = v
}
  return nil
}

func (p *MapDGetRowsForPixelsArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *MapDGetRowsForPixelsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_rows_for_pixels_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetRowsForPixelsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDGetRowsForPixelsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("widget_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:widget_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.WidgetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.widget_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:widget_id: ", p), err) }
  return err
}

func (p *MapDGetRowsForPixelsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pixels", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pixels: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Pixels)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Pixels {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pixels: ", p), err) }
  return err
}

func (p *MapDGetRowsForPixelsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:table_name: ", p), err) }
  return err
}

func (p *MapDGetRowsForPixelsArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("col_names", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:col_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ColNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColNames {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:col_names: ", p), err) }
  return err
}

func (p *MapDGetRowsForPixelsArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("column_format", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:column_format: ", p), err) }
  if err := oprot.WriteBool(bool(p.ColumnFormat)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.column_format (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:column_format: ", p), err) }
  return err
}

func (p *MapDGetRowsForPixelsArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:nonce: ", p), err) }
  if err := oprot.WriteString(string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:nonce: ", p), err) }
  return err
}

func (p *MapDGetRowsForPixelsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetRowsForPixelsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDGetRowsForPixelsResult struct {
  Success *TPixelResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDGetRowsForPixelsResult() *MapDGetRowsForPixelsResult {
  return &MapDGetRowsForPixelsResult{}
}

var MapDGetRowsForPixelsResult_Success_DEFAULT *TPixelResult_
func (p *MapDGetRowsForPixelsResult) GetSuccess() *TPixelResult_ {
  if !p.IsSetSuccess() {
    return MapDGetRowsForPixelsResult_Success_DEFAULT
  }
return p.Success
}
var MapDGetRowsForPixelsResult_E_DEFAULT *TMapDException
func (p *MapDGetRowsForPixelsResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDGetRowsForPixelsResult_E_DEFAULT
  }
return p.E
}
func (p *MapDGetRowsForPixelsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDGetRowsForPixelsResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDGetRowsForPixelsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetRowsForPixelsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TPixelResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MapDGetRowsForPixelsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDGetRowsForPixelsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_rows_for_pixels_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetRowsForPixelsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDGetRowsForPixelsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDGetRowsForPixelsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetRowsForPixelsResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - WidgetID
//  - Pixel
//  - TableName
//  - ColNames
//  - ColumnFormat
//  - PixelRadius
//  - Nonce
type MapDGetRowForPixelArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  WidgetID int64 `thrift:"widget_id,2" db:"widget_id" json:"widget_id"`
  Pixel *TPixel `thrift:"pixel,3" db:"pixel" json:"pixel"`
  TableName string `thrift:"table_name,4" db:"table_name" json:"table_name"`
  ColNames []string `thrift:"col_names,5" db:"col_names" json:"col_names"`
  ColumnFormat bool `thrift:"column_format,6" db:"column_format" json:"column_format"`
  PixelRadius int32 `thrift:"pixelRadius,7" db:"pixelRadius" json:"pixelRadius"`
  Nonce string `thrift:"nonce,8" db:"nonce" json:"nonce"`
}

func NewMapDGetRowForPixelArgs() *MapDGetRowForPixelArgs {
  return &MapDGetRowForPixelArgs{}
}


func (p *MapDGetRowForPixelArgs) GetSession() TSessionId {
  return p.Session
}

func (p *MapDGetRowForPixelArgs) GetWidgetID() int64 {
  return p.WidgetID
}
var MapDGetRowForPixelArgs_Pixel_DEFAULT *TPixel
func (p *MapDGetRowForPixelArgs) GetPixel() *TPixel {
  if !p.IsSetPixel() {
    return MapDGetRowForPixelArgs_Pixel_DEFAULT
  }
return p.Pixel
}

func (p *MapDGetRowForPixelArgs) GetTableName() string {
  return p.TableName
}

func (p *MapDGetRowForPixelArgs) GetColNames() []string {
  return p.ColNames
}

func (p *MapDGetRowForPixelArgs) GetColumnFormat() bool {
  return p.ColumnFormat
}

func (p *MapDGetRowForPixelArgs) GetPixelRadius() int32 {
  return p.PixelRadius
}

func (p *MapDGetRowForPixelArgs) GetNonce() string {
  return p.Nonce
}
func (p *MapDGetRowForPixelArgs) IsSetPixel() bool {
  return p.Pixel != nil
}

func (p *MapDGetRowForPixelArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetRowForPixelArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *MapDGetRowForPixelArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WidgetID = v
}
  return nil
}

func (p *MapDGetRowForPixelArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.Pixel = &TPixel{}
  if err := p.Pixel.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pixel), err)
  }
  return nil
}

func (p *MapDGetRowForPixelArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *MapDGetRowForPixelArgs)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ColNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem136 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem136 = v
}
    p.ColNames = append(p.ColNames, _elem136)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MapDGetRowForPixelArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ColumnFormat = v
}
  return nil
}

func (p *MapDGetRowForPixelArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.PixelRadius = v
}
  return nil
}

func (p *MapDGetRowForPixelArgs)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *MapDGetRowForPixelArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_row_for_pixel_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetRowForPixelArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *MapDGetRowForPixelArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("widget_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:widget_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.WidgetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.widget_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:widget_id: ", p), err) }
  return err
}

func (p *MapDGetRowForPixelArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pixel", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pixel: ", p), err) }
  if err := p.Pixel.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pixel), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pixel: ", p), err) }
  return err
}

func (p *MapDGetRowForPixelArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:table_name: ", p), err) }
  return err
}

func (p *MapDGetRowForPixelArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("col_names", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:col_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ColNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColNames {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:col_names: ", p), err) }
  return err
}

func (p *MapDGetRowForPixelArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("column_format", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:column_format: ", p), err) }
  if err := oprot.WriteBool(bool(p.ColumnFormat)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.column_format (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:column_format: ", p), err) }
  return err
}

func (p *MapDGetRowForPixelArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pixelRadius", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:pixelRadius: ", p), err) }
  if err := oprot.WriteI32(int32(p.PixelRadius)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pixelRadius (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:pixelRadius: ", p), err) }
  return err
}

func (p *MapDGetRowForPixelArgs) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:nonce: ", p), err) }
  if err := oprot.WriteString(string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:nonce: ", p), err) }
  return err
}

func (p *MapDGetRowForPixelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetRowForPixelArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MapDGetRowForPixelResult struct {
  Success *TPixelRowResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TMapDException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMapDGetRowForPixelResult() *MapDGetRowForPixelResult {
  return &MapDGetRowForPixelResult{}
}

var MapDGetRowForPixelResult_Success_DEFAULT *TPixelRowResult_
func (p *MapDGetRowForPixelResult) GetSuccess() *TPixelRowResult_ {
  if !p.IsSetSuccess() {
    return MapDGetRowForPixelResult_Success_DEFAULT
  }
return p.Success
}
var MapDGetRowForPixelResult_E_DEFAULT *TMapDException
func (p *MapDGetRowForPixelResult) GetE() *TMapDException {
  if !p.IsSetE() {
    return MapDGetRowForPixelResult_E_DEFAULT
  }
return p.E
}
func (p *MapDGetRowForPixelResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MapDGetRowForPixelResult) IsSetE() bool {
  return p.E != nil
}

func (p *MapDGetRowForPixelResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MapDGetRowForPixelResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TPixelRowResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MapDGetRowForPixelResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TMapDException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MapDGetRowForPixelResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_row_for_pixel_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MapDGetRowForPixelResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MapDGetRowForPixelResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MapDGetRowForPixelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MapDGetRowForPixelResult(%+v)", *p)
}


